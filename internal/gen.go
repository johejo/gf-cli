// Code generated by internal/gen/main.go DO NOT EDIT.
package internal

import (
	"fmt"
	"github.com/grafana/grafana-openapi-client-go/client/access_control"
	"github.com/grafana/grafana-openapi-client-go/client/access_control_provisioning"
	"github.com/grafana/grafana-openapi-client-go/client/admin"
	"github.com/grafana/grafana-openapi-client-go/client/admin_ldap"
	"github.com/grafana/grafana-openapi-client-go/client/admin_provisioning"
	"github.com/grafana/grafana-openapi-client-go/client/admin_users"
	"github.com/grafana/grafana-openapi-client-go/client/annotations"
	"github.com/grafana/grafana-openapi-client-go/client/api_keys"
	"github.com/grafana/grafana-openapi-client-go/client/correlations"
	"github.com/grafana/grafana-openapi-client-go/client/dashboard_permissions"
	"github.com/grafana/grafana-openapi-client-go/client/dashboard_public"
	"github.com/grafana/grafana-openapi-client-go/client/dashboard_versions"
	"github.com/grafana/grafana-openapi-client-go/client/dashboards"
	"github.com/grafana/grafana-openapi-client-go/client/datasources"
	"github.com/grafana/grafana-openapi-client-go/client/devices"
	"github.com/grafana/grafana-openapi-client-go/client/ds"
	"github.com/grafana/grafana-openapi-client-go/client/enterprise"
	"github.com/grafana/grafana-openapi-client-go/client/folder_permissions"
	"github.com/grafana/grafana-openapi-client-go/client/folders"
	"github.com/grafana/grafana-openapi-client-go/client/get_current_org"
	"github.com/grafana/grafana-openapi-client-go/client/health"
	"github.com/grafana/grafana-openapi-client-go/client/ldap_debug"
	"github.com/grafana/grafana-openapi-client-go/client/library_elements"
	"github.com/grafana/grafana-openapi-client-go/client/licensing"
	"github.com/grafana/grafana-openapi-client-go/client/migrations"
	"github.com/grafana/grafana-openapi-client-go/client/org"
	"github.com/grafana/grafana-openapi-client-go/client/org_invites"
	"github.com/grafana/grafana-openapi-client-go/client/org_preferences"
	"github.com/grafana/grafana-openapi-client-go/client/orgs"
	"github.com/grafana/grafana-openapi-client-go/client/playlists"
	"github.com/grafana/grafana-openapi-client-go/client/provisioning"
	"github.com/grafana/grafana-openapi-client-go/client/query_history"
	"github.com/grafana/grafana-openapi-client-go/client/recording_rules"
	"github.com/grafana/grafana-openapi-client-go/client/reports"
	"github.com/grafana/grafana-openapi-client-go/client/saml"
	"github.com/grafana/grafana-openapi-client-go/client/search"
	"github.com/grafana/grafana-openapi-client-go/client/service_accounts"
	"github.com/grafana/grafana-openapi-client-go/client/signed_in_user"
	"github.com/grafana/grafana-openapi-client-go/client/signing_keys"
	"github.com/grafana/grafana-openapi-client-go/client/snapshots"
	"github.com/grafana/grafana-openapi-client-go/client/sso_settings"
	"github.com/grafana/grafana-openapi-client-go/client/sync_team_groups"
	"github.com/grafana/grafana-openapi-client-go/client/teams"
	"github.com/grafana/grafana-openapi-client-go/client/user"
	"github.com/grafana/grafana-openapi-client-go/client/user_preferences"
	"github.com/grafana/grafana-openapi-client-go/client/users"
	"github.com/grafana/grafana-openapi-client-go/models"
	"github.com/spf13/cobra"
)

var (
	accessControlCmd = &cobra.Command{
		Use:               "access-control",
		DisableAutoGenTag: true,
		Args:              cobra.NoArgs,
		Run:               failIfEmptyArgs,
	}
	accessControlAddTeamRoleCmd = &cobra.Command{
		Use:               "add-team-role",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.AddTeamRoleCommand
			if err := getBodyParam(
				accessControlAddTeamRoleFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.AccessControl.AddTeamRoleWithParams(
				&access_control.AddTeamRoleParams{
					Body:   &body,
					TeamID: accessControlAddTeamRoleFlag.TeamID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	accessControlAddUserRoleCmd = &cobra.Command{
		Use:               "add-user-role",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.AddUserRoleCommand
			if err := getBodyParam(
				accessControlAddUserRoleFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.AccessControl.AddUserRoleWithParams(
				&access_control.AddUserRoleParams{
					Body:   &body,
					UserID: accessControlAddUserRoleFlag.UserID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	accessControlCreateRoleCmd = &cobra.Command{
		Use:               "create-role",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.CreateRoleForm
			if err := getBodyParam(
				accessControlCreateRoleFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.AccessControl.CreateRoleWithParams(
				&access_control.CreateRoleParams{
					Body: &body,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	accessControlDeleteRoleCmd = &cobra.Command{
		Use:               "delete-role",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.AccessControl.DeleteRole(
				&access_control.DeleteRoleParams{
					Force:   &accessControlDeleteRoleFlag.Force,
					Global:  &accessControlDeleteRoleFlag.Global,
					RoleUID: accessControlDeleteRoleFlag.RoleUID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	accessControlGetAccessControlStatusCmd = &cobra.Command{
		Use:               "get-access-control-status",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.AccessControl.GetAccessControlStatusWithParams(
				&access_control.GetAccessControlStatusParams{},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	accessControlGetResourceDescriptionCmd = &cobra.Command{
		Use:               "get-resource-description",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.AccessControl.GetResourceDescriptionWithParams(
				&access_control.GetResourceDescriptionParams{
					Resource: accessControlGetResourceDescriptionFlag.Resource,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	accessControlGetResourcePermissionsCmd = &cobra.Command{
		Use:               "get-resource-permissions",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.AccessControl.GetResourcePermissionsWithParams(
				&access_control.GetResourcePermissionsParams{
					Resource:   accessControlGetResourcePermissionsFlag.Resource,
					ResourceID: accessControlGetResourcePermissionsFlag.ResourceID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	accessControlGetRoleAssignmentsCmd = &cobra.Command{
		Use:               "get-role-assignments",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.AccessControl.GetRoleAssignmentsWithParams(
				&access_control.GetRoleAssignmentsParams{
					RoleUID: accessControlGetRoleAssignmentsFlag.RoleUID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	accessControlGetRoleCmd = &cobra.Command{
		Use:               "get-role",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.AccessControl.GetRoleWithParams(
				&access_control.GetRoleParams{
					RoleUID: accessControlGetRoleFlag.RoleUID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	accessControlListRolesCmd = &cobra.Command{
		Use:               "list-roles",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.AccessControl.ListRoles(
				&access_control.ListRolesParams{
					Delegatable:   &accessControlListRolesFlag.Delegatable,
					IncludeHidden: &accessControlListRolesFlag.IncludeHidden,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	accessControlListTeamRolesCmd = &cobra.Command{
		Use:               "list-team-roles",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.AccessControl.ListTeamRolesWithParams(
				&access_control.ListTeamRolesParams{
					TeamID: accessControlListTeamRolesFlag.TeamID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	accessControlListTeamsRolesCmd = &cobra.Command{
		Use:               "list-teams-roles",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.RolesSearchQuery
			if err := getBodyParam(
				accessControlListTeamsRolesFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.AccessControl.ListTeamsRolesWithParams(
				&access_control.ListTeamsRolesParams{
					Body: &body,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	accessControlListUserRolesCmd = &cobra.Command{
		Use:               "list-user-roles",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.AccessControl.ListUserRolesWithParams(
				&access_control.ListUserRolesParams{
					UserID: accessControlListUserRolesFlag.UserID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	accessControlListUsersRolesCmd = &cobra.Command{
		Use:               "list-users-roles",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.RolesSearchQuery
			if err := getBodyParam(
				accessControlListUsersRolesFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.AccessControl.ListUsersRolesWithParams(
				&access_control.ListUsersRolesParams{
					Body: &body,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	accessControlRemoveTeamRoleCmd = &cobra.Command{
		Use:               "remove-team-role",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.AccessControl.RemoveTeamRoleWithParams(
				&access_control.RemoveTeamRoleParams{
					RoleUID: accessControlRemoveTeamRoleFlag.RoleUID,
					TeamID:  accessControlRemoveTeamRoleFlag.TeamID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	accessControlRemoveUserRoleCmd = &cobra.Command{
		Use:               "remove-user-role",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.AccessControl.RemoveUserRole(
				&access_control.RemoveUserRoleParams{
					Global:  &accessControlRemoveUserRoleFlag.Global,
					RoleUID: accessControlRemoveUserRoleFlag.RoleUID,
					UserID:  accessControlRemoveUserRoleFlag.UserID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	accessControlSetResourcePermissionsCmd = &cobra.Command{
		Use:               "set-resource-permissions",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.SetPermissionsCommand
			if err := getBodyParam(
				accessControlSetResourcePermissionsFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.AccessControl.SetResourcePermissions(
				&access_control.SetResourcePermissionsParams{
					Body:       &body,
					Resource:   accessControlSetResourcePermissionsFlag.Resource,
					ResourceID: accessControlSetResourcePermissionsFlag.ResourceID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	accessControlSetResourcePermissionsForBuiltInRoleCmd = &cobra.Command{
		Use:               "set-resource-permissions-for-built-in-role",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.SetPermissionCommand
			if err := getBodyParam(
				accessControlSetResourcePermissionsForBuiltInRoleFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.AccessControl.SetResourcePermissionsForBuiltInRole(
				&access_control.SetResourcePermissionsForBuiltInRoleParams{
					Body:        &body,
					BuiltInRole: accessControlSetResourcePermissionsForBuiltInRoleFlag.BuiltInRole,
					Resource:    accessControlSetResourcePermissionsForBuiltInRoleFlag.Resource,
					ResourceID:  accessControlSetResourcePermissionsForBuiltInRoleFlag.ResourceID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	accessControlSetResourcePermissionsForTeamCmd = &cobra.Command{
		Use:               "set-resource-permissions-for-team",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.SetPermissionCommand
			if err := getBodyParam(
				accessControlSetResourcePermissionsForTeamFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.AccessControl.SetResourcePermissionsForTeam(
				&access_control.SetResourcePermissionsForTeamParams{
					Body:       &body,
					Resource:   accessControlSetResourcePermissionsForTeamFlag.Resource,
					ResourceID: accessControlSetResourcePermissionsForTeamFlag.ResourceID,
					TeamID:     accessControlSetResourcePermissionsForTeamFlag.TeamID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	accessControlSetResourcePermissionsForUserCmd = &cobra.Command{
		Use:               "set-resource-permissions-for-user",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.SetPermissionCommand
			if err := getBodyParam(
				accessControlSetResourcePermissionsForUserFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.AccessControl.SetResourcePermissionsForUser(
				&access_control.SetResourcePermissionsForUserParams{
					Body:       &body,
					Resource:   accessControlSetResourcePermissionsForUserFlag.Resource,
					ResourceID: accessControlSetResourcePermissionsForUserFlag.ResourceID,
					UserID:     accessControlSetResourcePermissionsForUserFlag.UserID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	accessControlSetRoleAssignmentsCmd = &cobra.Command{
		Use:               "set-role-assignments",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.SetRoleAssignmentsCommand
			if err := getBodyParam(
				accessControlSetRoleAssignmentsFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.AccessControl.SetRoleAssignmentsWithParams(
				&access_control.SetRoleAssignmentsParams{
					Body:    &body,
					RoleUID: accessControlSetRoleAssignmentsFlag.RoleUID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	accessControlSetTeamRolesCmd = &cobra.Command{
		Use:               "set-team-roles",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.AccessControl.SetTeamRolesWithParams(
				&access_control.SetTeamRolesParams{
					TeamID: accessControlSetTeamRolesFlag.TeamID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	accessControlSetUserRolesCmd = &cobra.Command{
		Use:               "set-user-roles",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.SetUserRolesCommand
			if err := getBodyParam(
				accessControlSetUserRolesFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.AccessControl.SetUserRolesWithParams(
				&access_control.SetUserRolesParams{
					Body:   &body,
					UserID: accessControlSetUserRolesFlag.UserID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	accessControlUpdateRoleCmd = &cobra.Command{
		Use:               "update-role",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.UpdateRoleCommand
			if err := getBodyParam(
				accessControlUpdateRoleFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.AccessControl.UpdateRoleWithParams(
				&access_control.UpdateRoleParams{
					Body:    &body,
					RoleUID: accessControlUpdateRoleFlag.RoleUID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	accessControlAddTeamRoleFlag = struct {
		Body   string
		TeamID int64
	}{}
	accessControlAddUserRoleFlag = struct {
		Body   string
		UserID int64
	}{}
	accessControlCreateRoleFlag = struct {
		Body string
	}{}
	accessControlDeleteRoleFlag = struct {
		Force   bool
		Global  bool
		RoleUID string
	}{}
	accessControlGetResourceDescriptionFlag = struct {
		Resource string
	}{}
	accessControlGetResourcePermissionsFlag = struct {
		Resource   string
		ResourceID string
	}{}
	accessControlGetRoleAssignmentsFlag = struct {
		RoleUID string
	}{}
	accessControlGetRoleFlag = struct {
		RoleUID string
	}{}
	accessControlListRolesFlag = struct {
		Delegatable   bool
		IncludeHidden bool
	}{}
	accessControlListTeamRolesFlag = struct {
		TeamID int64
	}{}
	accessControlListTeamsRolesFlag = struct {
		Body string
	}{}
	accessControlListUserRolesFlag = struct {
		UserID int64
	}{}
	accessControlListUsersRolesFlag = struct {
		Body string
	}{}
	accessControlRemoveTeamRoleFlag = struct {
		RoleUID string
		TeamID  int64
	}{}
	accessControlRemoveUserRoleFlag = struct {
		Global  bool
		RoleUID string
		UserID  int64
	}{}
	accessControlSetResourcePermissionsFlag = struct {
		Body       string
		Resource   string
		ResourceID string
	}{}
	accessControlSetResourcePermissionsForBuiltInRoleFlag = struct {
		Body        string
		BuiltInRole string
		Resource    string
		ResourceID  string
	}{}
	accessControlSetResourcePermissionsForTeamFlag = struct {
		Body       string
		Resource   string
		ResourceID string
		TeamID     int64
	}{}
	accessControlSetResourcePermissionsForUserFlag = struct {
		Body       string
		Resource   string
		ResourceID string
		UserID     int64
	}{}
	accessControlSetRoleAssignmentsFlag = struct {
		Body    string
		RoleUID string
	}{}
	accessControlSetTeamRolesFlag = struct {
		TeamID int64
	}{}
	accessControlSetUserRolesFlag = struct {
		Body   string
		UserID int64
	}{}
	accessControlUpdateRoleFlag = struct {
		Body    string
		RoleUID string
	}{}
	accessControlProvisioningCmd = &cobra.Command{
		Use:               "access-control-provisioning",
		DisableAutoGenTag: true,
		Args:              cobra.NoArgs,
		Run:               failIfEmptyArgs,
	}
	accessControlProvisioningAdminProvisioningReloadAccessControlCmd = &cobra.Command{
		Use:               "admin-provisioning-reload-access-control",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.AccessControlProvisioning.AdminProvisioningReloadAccessControlWithParams(
				&access_control_provisioning.AdminProvisioningReloadAccessControlParams{},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	adminCmd = &cobra.Command{
		Use:               "admin",
		DisableAutoGenTag: true,
		Args:              cobra.NoArgs,
		Run:               failIfEmptyArgs,
	}
	adminAdminGetSettingsCmd = &cobra.Command{
		Use:               "admin-get-settings",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Admin.AdminGetSettingsWithParams(
				&admin.AdminGetSettingsParams{},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	adminAdminGetStatsCmd = &cobra.Command{
		Use:               "admin-get-stats",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Admin.AdminGetStatsWithParams(
				&admin.AdminGetStatsParams{},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	adminLdapCmd = &cobra.Command{
		Use:               "admin-ldap",
		DisableAutoGenTag: true,
		Args:              cobra.NoArgs,
		Run:               failIfEmptyArgs,
	}
	adminLdapGetLDAPStatusCmd = &cobra.Command{
		Use:               "get-ldap-status",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.AdminLDAP.GetLDAPStatusWithParams(
				&admin_ldap.GetLDAPStatusParams{},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	adminLdapGetUserFromLDAPCmd = &cobra.Command{
		Use:               "get-user-from-ldap",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.AdminLDAP.GetUserFromLDAPWithParams(
				&admin_ldap.GetUserFromLDAPParams{
					UserName: adminLdapGetUserFromLDAPFlag.UserName,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	adminLdapPostSyncUserWithLDAPCmd = &cobra.Command{
		Use:               "post-sync-user-with-ldap",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.AdminLDAP.PostSyncUserWithLDAPWithParams(
				&admin_ldap.PostSyncUserWithLDAPParams{
					UserID: adminLdapPostSyncUserWithLDAPFlag.UserID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	adminLdapReloadLDAPCfgCmd = &cobra.Command{
		Use:               "reload-ldap-cfg",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.AdminLDAP.ReloadLDAPCfgWithParams(
				&admin_ldap.ReloadLDAPCfgParams{},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	adminLdapGetUserFromLDAPFlag = struct {
		UserName string
	}{}
	adminLdapPostSyncUserWithLDAPFlag = struct {
		UserID int64
	}{}
	adminProvisioningCmd = &cobra.Command{
		Use:               "admin-provisioning",
		DisableAutoGenTag: true,
		Args:              cobra.NoArgs,
		Run:               failIfEmptyArgs,
	}
	adminProvisioningAdminProvisioningReloadDashboardsCmd = &cobra.Command{
		Use:               "admin-provisioning-reload-dashboards",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.AdminProvisioning.AdminProvisioningReloadDashboardsWithParams(
				&admin_provisioning.AdminProvisioningReloadDashboardsParams{},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	adminProvisioningAdminProvisioningReloadDatasourcesCmd = &cobra.Command{
		Use:               "admin-provisioning-reload-datasources",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.AdminProvisioning.AdminProvisioningReloadDatasourcesWithParams(
				&admin_provisioning.AdminProvisioningReloadDatasourcesParams{},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	adminProvisioningAdminProvisioningReloadPluginsCmd = &cobra.Command{
		Use:               "admin-provisioning-reload-plugins",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.AdminProvisioning.AdminProvisioningReloadPluginsWithParams(
				&admin_provisioning.AdminProvisioningReloadPluginsParams{},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	adminUsersCmd = &cobra.Command{
		Use:               "admin-users",
		DisableAutoGenTag: true,
		Args:              cobra.NoArgs,
		Run:               failIfEmptyArgs,
	}
	adminUsersAdminCreateUserCmd = &cobra.Command{
		Use:               "admin-create-user",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.AdminCreateUserForm
			if err := getBodyParam(
				adminUsersAdminCreateUserFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.AdminUsers.AdminCreateUserWithParams(
				&admin_users.AdminCreateUserParams{
					Body: &body,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	adminUsersAdminDeleteUserCmd = &cobra.Command{
		Use:               "admin-delete-user",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.AdminUsers.AdminDeleteUserWithParams(
				&admin_users.AdminDeleteUserParams{
					UserID: adminUsersAdminDeleteUserFlag.UserID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	adminUsersAdminDisableUserCmd = &cobra.Command{
		Use:               "admin-disable-user",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.AdminUsers.AdminDisableUserWithParams(
				&admin_users.AdminDisableUserParams{
					UserID: adminUsersAdminDisableUserFlag.UserID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	adminUsersAdminEnableUserCmd = &cobra.Command{
		Use:               "admin-enable-user",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.AdminUsers.AdminEnableUserWithParams(
				&admin_users.AdminEnableUserParams{
					UserID: adminUsersAdminEnableUserFlag.UserID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	adminUsersAdminGetUserAuthTokensCmd = &cobra.Command{
		Use:               "admin-get-user-auth-tokens",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.AdminUsers.AdminGetUserAuthTokensWithParams(
				&admin_users.AdminGetUserAuthTokensParams{
					UserID: adminUsersAdminGetUserAuthTokensFlag.UserID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	adminUsersAdminLogoutUserCmd = &cobra.Command{
		Use:               "admin-logout-user",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.AdminUsers.AdminLogoutUserWithParams(
				&admin_users.AdminLogoutUserParams{
					UserID: adminUsersAdminLogoutUserFlag.UserID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	adminUsersAdminRevokeUserAuthTokenCmd = &cobra.Command{
		Use:               "admin-revoke-user-auth-token",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.RevokeAuthTokenCmd
			if err := getBodyParam(
				adminUsersAdminRevokeUserAuthTokenFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.AdminUsers.AdminRevokeUserAuthTokenWithParams(
				&admin_users.AdminRevokeUserAuthTokenParams{
					Body:   &body,
					UserID: adminUsersAdminRevokeUserAuthTokenFlag.UserID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	adminUsersAdminUpdateUserPasswordCmd = &cobra.Command{
		Use:               "admin-update-user-password",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.AdminUpdateUserPasswordForm
			if err := getBodyParam(
				adminUsersAdminUpdateUserPasswordFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.AdminUsers.AdminUpdateUserPasswordWithParams(
				&admin_users.AdminUpdateUserPasswordParams{
					Body:   &body,
					UserID: adminUsersAdminUpdateUserPasswordFlag.UserID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	adminUsersAdminUpdateUserPermissionsCmd = &cobra.Command{
		Use:               "admin-update-user-permissions",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.AdminUpdateUserPermissionsForm
			if err := getBodyParam(
				adminUsersAdminUpdateUserPermissionsFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.AdminUsers.AdminUpdateUserPermissionsWithParams(
				&admin_users.AdminUpdateUserPermissionsParams{
					Body:   &body,
					UserID: adminUsersAdminUpdateUserPermissionsFlag.UserID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	adminUsersGetUserQuotaCmd = &cobra.Command{
		Use:               "get-user-quota",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.AdminUsers.GetUserQuotaWithParams(
				&admin_users.GetUserQuotaParams{
					UserID: adminUsersGetUserQuotaFlag.UserID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	adminUsersUpdateUserQuotaCmd = &cobra.Command{
		Use:               "update-user-quota",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.UpdateQuotaCmd
			if err := getBodyParam(
				adminUsersUpdateUserQuotaFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.AdminUsers.UpdateUserQuota(
				&admin_users.UpdateUserQuotaParams{
					Body:        &body,
					QuotaTarget: adminUsersUpdateUserQuotaFlag.QuotaTarget,
					UserID:      adminUsersUpdateUserQuotaFlag.UserID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	adminUsersAdminCreateUserFlag = struct {
		Body string
	}{}
	adminUsersAdminDeleteUserFlag = struct {
		UserID int64
	}{}
	adminUsersAdminDisableUserFlag = struct {
		UserID int64
	}{}
	adminUsersAdminEnableUserFlag = struct {
		UserID int64
	}{}
	adminUsersAdminGetUserAuthTokensFlag = struct {
		UserID int64
	}{}
	adminUsersAdminLogoutUserFlag = struct {
		UserID int64
	}{}
	adminUsersAdminRevokeUserAuthTokenFlag = struct {
		Body   string
		UserID int64
	}{}
	adminUsersAdminUpdateUserPasswordFlag = struct {
		Body   string
		UserID int64
	}{}
	adminUsersAdminUpdateUserPermissionsFlag = struct {
		Body   string
		UserID int64
	}{}
	adminUsersGetUserQuotaFlag = struct {
		UserID int64
	}{}
	adminUsersUpdateUserQuotaFlag = struct {
		Body        string
		QuotaTarget string
		UserID      int64
	}{}
	annotationsCmd = &cobra.Command{
		Use:               "annotations",
		DisableAutoGenTag: true,
		Args:              cobra.NoArgs,
		Run:               failIfEmptyArgs,
	}
	annotationsGetAnnotationTagsCmd = &cobra.Command{
		Use:               "get-annotation-tags",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Annotations.GetAnnotationTags(
				&annotations.GetAnnotationTagsParams{
					Limit: &annotationsGetAnnotationTagsFlag.Limit,
					Tag:   &annotationsGetAnnotationTagsFlag.Tag,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	annotationsGetAnnotationsCmd = &cobra.Command{
		Use:               "get-annotations",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Annotations.GetAnnotations(
				&annotations.GetAnnotationsParams{
					AlertID:      &annotationsGetAnnotationsFlag.AlertID,
					DashboardID:  &annotationsGetAnnotationsFlag.DashboardID,
					DashboardUID: &annotationsGetAnnotationsFlag.DashboardUID,
					From:         &annotationsGetAnnotationsFlag.From,
					Limit:        &annotationsGetAnnotationsFlag.Limit,
					MatchAny:     &annotationsGetAnnotationsFlag.MatchAny,
					PanelID:      &annotationsGetAnnotationsFlag.PanelID,
					Tags:         annotationsGetAnnotationsFlag.Tags,
					To:           &annotationsGetAnnotationsFlag.To,
					Type:         &annotationsGetAnnotationsFlag.Type,
					UserID:       &annotationsGetAnnotationsFlag.UserID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	annotationsMassDeleteAnnotationsCmd = &cobra.Command{
		Use:               "mass-delete-annotations",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.MassDeleteAnnotationsCmd
			if err := getBodyParam(
				annotationsMassDeleteAnnotationsFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.Annotations.MassDeleteAnnotationsWithParams(
				&annotations.MassDeleteAnnotationsParams{
					Body: &body,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	annotationsPatchAnnotationCmd = &cobra.Command{
		Use:               "patch-annotation",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.PatchAnnotationsCmd
			if err := getBodyParam(
				annotationsPatchAnnotationFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.Annotations.PatchAnnotationWithParams(
				&annotations.PatchAnnotationParams{
					AnnotationID: annotationsPatchAnnotationFlag.AnnotationID,
					Body:         &body,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	annotationsPostAnnotationCmd = &cobra.Command{
		Use:               "post-annotation",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.PostAnnotationsCmd
			if err := getBodyParam(
				annotationsPostAnnotationFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.Annotations.PostAnnotationWithParams(
				&annotations.PostAnnotationParams{
					Body: &body,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	annotationsPostGraphiteAnnotationCmd = &cobra.Command{
		Use:               "post-graphite-annotation",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.PostGraphiteAnnotationsCmd
			if err := getBodyParam(
				annotationsPostGraphiteAnnotationFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.Annotations.PostGraphiteAnnotationWithParams(
				&annotations.PostGraphiteAnnotationParams{
					Body: &body,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	annotationsUpdateAnnotationCmd = &cobra.Command{
		Use:               "update-annotation",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.UpdateAnnotationsCmd
			if err := getBodyParam(
				annotationsUpdateAnnotationFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.Annotations.UpdateAnnotationWithParams(
				&annotations.UpdateAnnotationParams{
					AnnotationID: annotationsUpdateAnnotationFlag.AnnotationID,
					Body:         &body,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	annotationsGetAnnotationTagsFlag = struct {
		Limit string
		Tag   string
	}{}
	annotationsGetAnnotationsFlag = struct {
		AlertID      int64
		DashboardID  int64
		DashboardUID string
		From         int64
		Limit        int64
		MatchAny     bool
		PanelID      int64
		Tags         []string
		To           int64
		Type         string
		UserID       int64
	}{}
	annotationsMassDeleteAnnotationsFlag = struct {
		Body string
	}{}
	annotationsPatchAnnotationFlag = struct {
		AnnotationID string
		Body         string
	}{}
	annotationsPostAnnotationFlag = struct {
		Body string
	}{}
	annotationsPostGraphiteAnnotationFlag = struct {
		Body string
	}{}
	annotationsUpdateAnnotationFlag = struct {
		AnnotationID string
		Body         string
	}{}
	apiKeysCmd = &cobra.Command{
		Use:               "api-keys",
		DisableAutoGenTag: true,
		Args:              cobra.NoArgs,
		Run:               failIfEmptyArgs,
	}
	apiKeysAddAPIkeyCmd = &cobra.Command{
		Use:               "add-api-key",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.AddAPIKeyCommand
			if err := getBodyParam(
				apiKeysAddAPIkeyFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.APIKeys.AddAPIkeyWithParams(
				&api_keys.AddAPIkeyParams{
					Body: &body,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	apiKeysDeleteAPIkeyCmd = &cobra.Command{
		Use:               "delete-api-key",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.APIKeys.DeleteAPIkeyWithParams(
				&api_keys.DeleteAPIkeyParams{
					ID: apiKeysDeleteAPIkeyFlag.ID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	apiKeysGetAPIkeysCmd = &cobra.Command{
		Use:               "get-api-keys",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.APIKeys.GetAPIkeys(
				&api_keys.GetAPIkeysParams{
					IncludeExpired: &apiKeysGetAPIkeysFlag.IncludeExpired,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	apiKeysAddAPIkeyFlag = struct {
		Body string
	}{}
	apiKeysDeleteAPIkeyFlag = struct {
		ID int64
	}{}
	apiKeysGetAPIkeysFlag = struct {
		IncludeExpired bool
	}{}
	correlationsCmd = &cobra.Command{
		Use:               "correlations",
		DisableAutoGenTag: true,
		Args:              cobra.NoArgs,
		Run:               failIfEmptyArgs,
	}
	correlationsCreateCorrelationCmd = &cobra.Command{
		Use:               "create-correlation",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.CreateCorrelationCommand
			if err := getBodyParam(
				correlationsCreateCorrelationFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.Correlations.CreateCorrelationWithParams(
				&correlations.CreateCorrelationParams{
					Body:      &body,
					SourceUID: correlationsCreateCorrelationFlag.SourceUID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	correlationsDeleteCorrelationCmd = &cobra.Command{
		Use:               "delete-correlation",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Correlations.DeleteCorrelationWithParams(
				&correlations.DeleteCorrelationParams{
					CorrelationUID: correlationsDeleteCorrelationFlag.CorrelationUID,
					UID:            correlationsDeleteCorrelationFlag.UID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	correlationsGetCorrelationCmd = &cobra.Command{
		Use:               "get-correlation",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Correlations.GetCorrelationWithParams(
				&correlations.GetCorrelationParams{
					CorrelationUID: correlationsGetCorrelationFlag.CorrelationUID,
					SourceUID:      correlationsGetCorrelationFlag.SourceUID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	correlationsGetCorrelationsCmd = &cobra.Command{
		Use:               "get-correlations",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Correlations.GetCorrelations(
				&correlations.GetCorrelationsParams{
					Limit:     &correlationsGetCorrelationsFlag.Limit,
					Page:      &correlationsGetCorrelationsFlag.Page,
					SourceUID: correlationsGetCorrelationsFlag.SourceUID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	correlationsGetCorrelationsBySourceUIDCmd = &cobra.Command{
		Use:               "get-correlations-by-source-uid",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Correlations.GetCorrelationsBySourceUIDWithParams(
				&correlations.GetCorrelationsBySourceUIDParams{
					SourceUID: correlationsGetCorrelationsBySourceUIDFlag.SourceUID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	correlationsUpdateCorrelationCmd = &cobra.Command{
		Use:               "update-correlation",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.UpdateCorrelationCommand
			if err := getBodyParam(
				correlationsUpdateCorrelationFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.Correlations.UpdateCorrelation(
				&correlations.UpdateCorrelationParams{
					Body:           &body,
					CorrelationUID: correlationsUpdateCorrelationFlag.CorrelationUID,
					SourceUID:      correlationsUpdateCorrelationFlag.SourceUID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	correlationsCreateCorrelationFlag = struct {
		Body      string
		SourceUID string
	}{}
	correlationsDeleteCorrelationFlag = struct {
		CorrelationUID string
		UID            string
	}{}
	correlationsGetCorrelationFlag = struct {
		CorrelationUID string
		SourceUID      string
	}{}
	correlationsGetCorrelationsFlag = struct {
		Limit     int64
		Page      int64
		SourceUID []string
	}{}
	correlationsGetCorrelationsBySourceUIDFlag = struct {
		SourceUID string
	}{}
	correlationsUpdateCorrelationFlag = struct {
		Body           string
		CorrelationUID string
		SourceUID      string
	}{}
	dashboardPermissionsCmd = &cobra.Command{
		Use:               "dashboard-permissions",
		DisableAutoGenTag: true,
		Args:              cobra.NoArgs,
		Run:               failIfEmptyArgs,
	}
	dashboardPermissionsGetDashboardPermissionsListByUIDCmd = &cobra.Command{
		Use:               "get-dashboard-permissions-list-by-uid",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.DashboardPermissions.GetDashboardPermissionsListByUIDWithParams(
				&dashboard_permissions.GetDashboardPermissionsListByUIDParams{
					UID: dashboardPermissionsGetDashboardPermissionsListByUIDFlag.UID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	dashboardPermissionsUpdateDashboardPermissionsByUIDCmd = &cobra.Command{
		Use:               "update-dashboard-permissions-by-uid",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.UpdateDashboardACLCommand
			if err := getBodyParam(
				dashboardPermissionsUpdateDashboardPermissionsByUIDFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.DashboardPermissions.UpdateDashboardPermissionsByUIDWithParams(
				&dashboard_permissions.UpdateDashboardPermissionsByUIDParams{
					Body: &body,
					UID:  dashboardPermissionsUpdateDashboardPermissionsByUIDFlag.UID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	dashboardPermissionsGetDashboardPermissionsListByUIDFlag = struct {
		UID string
	}{}
	dashboardPermissionsUpdateDashboardPermissionsByUIDFlag = struct {
		Body string
		UID  string
	}{}
	dashboardPublicCmd = &cobra.Command{
		Use:               "dashboard-public",
		DisableAutoGenTag: true,
		Args:              cobra.NoArgs,
		Run:               failIfEmptyArgs,
	}
	dashboardPublicCreatePublicDashboardCmd = &cobra.Command{
		Use:               "create-public-dashboard",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.PublicDashboardDTO
			if err := getBodyParam(
				dashboardPublicCreatePublicDashboardFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.DashboardPublic.CreatePublicDashboardWithParams(
				&dashboard_public.CreatePublicDashboardParams{
					Body:         &body,
					DashboardUID: dashboardPublicCreatePublicDashboardFlag.DashboardUID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	dashboardPublicDeletePublicDashboardCmd = &cobra.Command{
		Use:               "delete-public-dashboard",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.DashboardPublic.DeletePublicDashboardWithParams(
				&dashboard_public.DeletePublicDashboardParams{
					DashboardUID: dashboardPublicDeletePublicDashboardFlag.DashboardUID,
					UID:          dashboardPublicDeletePublicDashboardFlag.UID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	dashboardPublicGetPublicAnnotationsCmd = &cobra.Command{
		Use:               "get-public-annotations",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.DashboardPublic.GetPublicAnnotationsWithParams(
				&dashboard_public.GetPublicAnnotationsParams{
					AccessToken: dashboardPublicGetPublicAnnotationsFlag.AccessToken,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	dashboardPublicGetPublicDashboardCmd = &cobra.Command{
		Use:               "get-public-dashboard",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.DashboardPublic.GetPublicDashboardWithParams(
				&dashboard_public.GetPublicDashboardParams{
					DashboardUID: dashboardPublicGetPublicDashboardFlag.DashboardUID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	dashboardPublicListPublicDashboardsCmd = &cobra.Command{
		Use:               "list-public-dashboards",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.DashboardPublic.ListPublicDashboardsWithParams(
				&dashboard_public.ListPublicDashboardsParams{},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	dashboardPublicQueryPublicDashboardCmd = &cobra.Command{
		Use:               "query-public-dashboard",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.DashboardPublic.QueryPublicDashboardWithParams(
				&dashboard_public.QueryPublicDashboardParams{
					AccessToken: dashboardPublicQueryPublicDashboardFlag.AccessToken,
					PanelID:     dashboardPublicQueryPublicDashboardFlag.PanelID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	dashboardPublicUpdatePublicDashboardCmd = &cobra.Command{
		Use:               "update-public-dashboard",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.PublicDashboardDTO
			if err := getBodyParam(
				dashboardPublicUpdatePublicDashboardFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.DashboardPublic.UpdatePublicDashboard(
				&dashboard_public.UpdatePublicDashboardParams{
					Body:         &body,
					DashboardUID: dashboardPublicUpdatePublicDashboardFlag.DashboardUID,
					UID:          dashboardPublicUpdatePublicDashboardFlag.UID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	dashboardPublicViewPublicDashboardCmd = &cobra.Command{
		Use:               "view-public-dashboard",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.DashboardPublic.ViewPublicDashboardWithParams(
				&dashboard_public.ViewPublicDashboardParams{
					AccessToken: dashboardPublicViewPublicDashboardFlag.AccessToken,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	dashboardPublicCreatePublicDashboardFlag = struct {
		Body         string
		DashboardUID string
	}{}
	dashboardPublicDeletePublicDashboardFlag = struct {
		DashboardUID string
		UID          string
	}{}
	dashboardPublicGetPublicAnnotationsFlag = struct {
		AccessToken string
	}{}
	dashboardPublicGetPublicDashboardFlag = struct {
		DashboardUID string
	}{}
	dashboardPublicQueryPublicDashboardFlag = struct {
		AccessToken string
		PanelID     int64
	}{}
	dashboardPublicUpdatePublicDashboardFlag = struct {
		Body         string
		DashboardUID string
		UID          string
	}{}
	dashboardPublicViewPublicDashboardFlag = struct {
		AccessToken string
	}{}
	dashboardVersionsCmd = &cobra.Command{
		Use:               "dashboard-versions",
		DisableAutoGenTag: true,
		Args:              cobra.NoArgs,
		Run:               failIfEmptyArgs,
	}
	dashboardVersionsGetDashboardVersionByUIDCmd = &cobra.Command{
		Use:               "get-dashboard-version-by-uid",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.DashboardVersions.GetDashboardVersionByUIDWithParams(
				&dashboard_versions.GetDashboardVersionByUIDParams{
					DashboardVersionID: dashboardVersionsGetDashboardVersionByUIDFlag.DashboardVersionID,
					UID:                dashboardVersionsGetDashboardVersionByUIDFlag.UID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	dashboardVersionsGetDashboardVersionsByUIDCmd = &cobra.Command{
		Use:               "get-dashboard-versions-by-uid",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.DashboardVersions.GetDashboardVersionsByUID(
				&dashboard_versions.GetDashboardVersionsByUIDParams{
					Limit: &dashboardVersionsGetDashboardVersionsByUIDFlag.Limit,
					Start: &dashboardVersionsGetDashboardVersionsByUIDFlag.Start,
					UID:   dashboardVersionsGetDashboardVersionsByUIDFlag.UID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	dashboardVersionsRestoreDashboardVersionByUIDCmd = &cobra.Command{
		Use:               "restore-dashboard-version-by-uid",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.RestoreDashboardVersionCommand
			if err := getBodyParam(
				dashboardVersionsRestoreDashboardVersionByUIDFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.DashboardVersions.RestoreDashboardVersionByUIDWithParams(
				&dashboard_versions.RestoreDashboardVersionByUIDParams{
					Body: &body,
					UID:  dashboardVersionsRestoreDashboardVersionByUIDFlag.UID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	dashboardVersionsGetDashboardVersionByUIDFlag = struct {
		DashboardVersionID int64
		UID                string
	}{}
	dashboardVersionsGetDashboardVersionsByUIDFlag = struct {
		Limit int64
		Start int64
		UID   string
	}{}
	dashboardVersionsRestoreDashboardVersionByUIDFlag = struct {
		Body string
		UID  string
	}{}
	dashboardsCmd = &cobra.Command{
		Use:               "dashboards",
		DisableAutoGenTag: true,
		Args:              cobra.NoArgs,
		Run:               failIfEmptyArgs,
	}
	dashboardsCalculateDashboardDiffCmd = &cobra.Command{
		Use:               "calculate-dashboard-diff",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.CalculateDashboardDiffParamsBody
			if err := getBodyParam(
				dashboardsCalculateDashboardDiffFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.Dashboards.CalculateDashboardDiffWithParams(
				&dashboards.CalculateDashboardDiffParams{
					Body: &body,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	dashboardsDeleteDashboardByUIDCmd = &cobra.Command{
		Use:               "delete-dashboard-by-uid",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Dashboards.DeleteDashboardByUIDWithParams(
				&dashboards.DeleteDashboardByUIDParams{
					UID: dashboardsDeleteDashboardByUIDFlag.UID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	dashboardsGetDashboardByUIDCmd = &cobra.Command{
		Use:               "get-dashboard-by-uid",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Dashboards.GetDashboardByUIDWithParams(
				&dashboards.GetDashboardByUIDParams{
					UID: dashboardsGetDashboardByUIDFlag.UID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	dashboardsGetDashboardTagsCmd = &cobra.Command{
		Use:               "get-dashboard-tags",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Dashboards.GetDashboardTagsWithParams(
				&dashboards.GetDashboardTagsParams{},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	dashboardsGetHomeDashboardCmd = &cobra.Command{
		Use:               "get-home-dashboard",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Dashboards.GetHomeDashboardWithParams(
				&dashboards.GetHomeDashboardParams{},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	dashboardsHardDeleteDashboardByUIDCmd = &cobra.Command{
		Use:               "hard-delete-dashboard-by-uid",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Dashboards.HardDeleteDashboardByUIDWithParams(
				&dashboards.HardDeleteDashboardByUIDParams{
					UID: dashboardsHardDeleteDashboardByUIDFlag.UID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	dashboardsImportDashboardCmd = &cobra.Command{
		Use:               "import-dashboard",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.ImportDashboardRequest
			if err := getBodyParam(
				dashboardsImportDashboardFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.Dashboards.ImportDashboardWithParams(
				&dashboards.ImportDashboardParams{
					Body: &body,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	dashboardsPostDashboardCmd = &cobra.Command{
		Use:               "post-dashboard",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.SaveDashboardCommand
			if err := getBodyParam(
				dashboardsPostDashboardFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.Dashboards.PostDashboardWithParams(
				&dashboards.PostDashboardParams{
					Body: &body,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	dashboardsRestoreDeletedDashboardByUIDCmd = &cobra.Command{
		Use:               "restore-deleted-dashboard-by-uid",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.RestoreDeletedDashboardCommand
			if err := getBodyParam(
				dashboardsRestoreDeletedDashboardByUIDFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.Dashboards.RestoreDeletedDashboardByUIDWithParams(
				&dashboards.RestoreDeletedDashboardByUIDParams{
					Body: &body,
					UID:  dashboardsRestoreDeletedDashboardByUIDFlag.UID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	dashboardsCalculateDashboardDiffFlag = struct {
		Body string
	}{}
	dashboardsDeleteDashboardByUIDFlag = struct {
		UID string
	}{}
	dashboardsGetDashboardByUIDFlag = struct {
		UID string
	}{}
	dashboardsHardDeleteDashboardByUIDFlag = struct {
		UID string
	}{}
	dashboardsImportDashboardFlag = struct {
		Body string
	}{}
	dashboardsPostDashboardFlag = struct {
		Body string
	}{}
	dashboardsRestoreDeletedDashboardByUIDFlag = struct {
		Body string
		UID  string
	}{}
	datasourcesCmd = &cobra.Command{
		Use:               "datasources",
		DisableAutoGenTag: true,
		Args:              cobra.NoArgs,
		Run:               failIfEmptyArgs,
	}
	datasourcesAddDatasourceCmd = &cobra.Command{
		Use:               "add-datasource",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.AddDataSourceCommand
			if err := getBodyParam(
				datasourcesAddDatasourceFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.Datasources.AddDataSourceWithParams(
				&datasources.AddDataSourceParams{
					Body: &body,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	datasourcesCallDatasourceResourceCmd = &cobra.Command{
		Use:               "call-datasource-resource",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Datasources.CallDatasourceResourceWithUIDWithParams(
				&datasources.CallDatasourceResourceWithUIDParams{
					DatasourceProxyRoute: datasourcesCallDatasourceResourceFlag.DatasourceProxyRoute,
					UID:                  datasourcesCallDatasourceResourceFlag.UID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	datasourcesCheckDatasourceHealthCmd = &cobra.Command{
		Use:               "check-datasource-health",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Datasources.CheckDatasourceHealthWithUIDWithParams(
				&datasources.CheckDatasourceHealthWithUIDParams{
					UID: datasourcesCheckDatasourceHealthFlag.UID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	datasourcesDeleteDatasourceByNameCmd = &cobra.Command{
		Use:               "delete-datasource-by-name",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Datasources.DeleteDataSourceByNameWithParams(
				&datasources.DeleteDataSourceByNameParams{
					Name: datasourcesDeleteDatasourceByNameFlag.Name,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	datasourcesDeleteDatasourceByUIDCmd = &cobra.Command{
		Use:               "delete-datasource-by-uid",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Datasources.DeleteDataSourceByUIDWithParams(
				&datasources.DeleteDataSourceByUIDParams{
					UID: datasourcesDeleteDatasourceByUIDFlag.UID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	datasourcesGetDatasourceByNameCmd = &cobra.Command{
		Use:               "get-datasource-by-name",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Datasources.GetDataSourceByNameWithParams(
				&datasources.GetDataSourceByNameParams{
					Name: datasourcesGetDatasourceByNameFlag.Name,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	datasourcesGetDatasourceByUIDCmd = &cobra.Command{
		Use:               "get-datasource-by-uid",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Datasources.GetDataSourceByUIDWithParams(
				&datasources.GetDataSourceByUIDParams{
					UID: datasourcesGetDatasourceByUIDFlag.UID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	datasourcesGetDatasourceIDByNameCmd = &cobra.Command{
		Use:               "get-datasource-id-by-name",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Datasources.GetDataSourceIDByNameWithParams(
				&datasources.GetDataSourceIDByNameParams{
					Name: datasourcesGetDatasourceIDByNameFlag.Name,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	datasourcesGetDatasourcesCmd = &cobra.Command{
		Use:               "get-datasources",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Datasources.GetDataSourcesWithParams(
				&datasources.GetDataSourcesParams{},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	datasourcesUpdateDatasourceByUIDCmd = &cobra.Command{
		Use:               "update-datasource-by-uid",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.UpdateDataSourceCommand
			if err := getBodyParam(
				datasourcesUpdateDatasourceByUIDFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.Datasources.UpdateDataSourceByUIDWithParams(
				&datasources.UpdateDataSourceByUIDParams{
					Body: &body,
					UID:  datasourcesUpdateDatasourceByUIDFlag.UID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	datasourcesAddDatasourceFlag = struct {
		Body string
	}{}
	datasourcesCallDatasourceResourceFlag = struct {
		DatasourceProxyRoute string
		UID                  string
	}{}
	datasourcesCheckDatasourceHealthFlag = struct {
		UID string
	}{}
	datasourcesDeleteDatasourceByNameFlag = struct {
		Name string
	}{}
	datasourcesDeleteDatasourceByUIDFlag = struct {
		UID string
	}{}
	datasourcesGetDatasourceByNameFlag = struct {
		Name string
	}{}
	datasourcesGetDatasourceByUIDFlag = struct {
		UID string
	}{}
	datasourcesGetDatasourceIDByNameFlag = struct {
		Name string
	}{}
	datasourcesUpdateDatasourceByUIDFlag = struct {
		Body string
		UID  string
	}{}
	devicesCmd = &cobra.Command{
		Use:               "devices",
		DisableAutoGenTag: true,
		Args:              cobra.NoArgs,
		Run:               failIfEmptyArgs,
	}
	devicesListDevicesCmd = &cobra.Command{
		Use:               "list-devices",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Devices.ListDevicesWithParams(
				&devices.ListDevicesParams{},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	devicesSearchDevicesCmd = &cobra.Command{
		Use:               "search-devices",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Devices.SearchDevicesWithParams(
				&devices.SearchDevicesParams{},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	dsCmd = &cobra.Command{
		Use:               "ds",
		DisableAutoGenTag: true,
		Args:              cobra.NoArgs,
		Run:               failIfEmptyArgs,
	}
	dsQueryMetricsWithExpressionsCmd = &cobra.Command{
		Use:               "query-metrics-with-expressions",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.MetricRequest
			if err := getBodyParam(
				dsQueryMetricsWithExpressionsFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, _, err := api.Ds.QueryMetricsWithExpressionsWithParams(
				&ds.QueryMetricsWithExpressionsParams{
					Body: &body,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	dsQueryMetricsWithExpressionsFlag = struct {
		Body string
	}{}
	enterpriseCmd = &cobra.Command{
		Use:               "enterprise",
		DisableAutoGenTag: true,
		Args:              cobra.NoArgs,
		Run:               failIfEmptyArgs,
	}
	enterpriseCleanDatasourceCacheCmd = &cobra.Command{
		Use:               "clean-datasource-cache",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Enterprise.CleanDataSourceCacheWithParams(
				&enterprise.CleanDataSourceCacheParams{
					DataSourceUID: enterpriseCleanDatasourceCacheFlag.DataSourceUID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	enterpriseDisableDatasourceCacheCmd = &cobra.Command{
		Use:               "disable-datasource-cache",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Enterprise.DisableDataSourceCacheWithParams(
				&enterprise.DisableDataSourceCacheParams{
					DataSourceUID: enterpriseDisableDatasourceCacheFlag.DataSourceUID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	enterpriseEnableDatasourceCacheCmd = &cobra.Command{
		Use:               "enable-datasource-cache",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Enterprise.EnableDataSourceCacheWithParams(
				&enterprise.EnableDataSourceCacheParams{
					DataSourceUID: enterpriseEnableDatasourceCacheFlag.DataSourceUID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	enterpriseGetDatasourceCacheConfigCmd = &cobra.Command{
		Use:               "get-datasource-cache-config",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Enterprise.GetDataSourceCacheConfigWithParams(
				&enterprise.GetDataSourceCacheConfigParams{
					DataSourceUID: enterpriseGetDatasourceCacheConfigFlag.DataSourceUID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	enterpriseGetTeamLBACRulesAPICmd = &cobra.Command{
		Use:               "get-team-lbac-rules-api",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Enterprise.GetTeamLBACRulesAPIWithParams(
				&enterprise.GetTeamLBACRulesAPIParams{
					UID: enterpriseGetTeamLBACRulesAPIFlag.UID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	enterpriseSearchResultCmd = &cobra.Command{
		Use:               "search-result",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Enterprise.SearchResultWithParams(
				&enterprise.SearchResultParams{},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	enterpriseSetDatasourceCacheConfigCmd = &cobra.Command{
		Use:               "set-datasource-cache-config",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.CacheConfigSetter
			if err := getBodyParam(
				enterpriseSetDatasourceCacheConfigFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.Enterprise.SetDataSourceCacheConfigWithParams(
				&enterprise.SetDataSourceCacheConfigParams{
					Body:          &body,
					DataSourceUID: enterpriseSetDatasourceCacheConfigFlag.DataSourceUID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	enterpriseUpdateTeamLBACRulesAPICmd = &cobra.Command{
		Use:               "update-team-lbac-rules-api",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Enterprise.UpdateTeamLBACRulesAPIWithParams(
				&enterprise.UpdateTeamLBACRulesAPIParams{
					UID: enterpriseUpdateTeamLBACRulesAPIFlag.UID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	enterpriseCleanDatasourceCacheFlag = struct {
		DataSourceUID string
	}{}
	enterpriseDisableDatasourceCacheFlag = struct {
		DataSourceUID string
	}{}
	enterpriseEnableDatasourceCacheFlag = struct {
		DataSourceUID string
	}{}
	enterpriseGetDatasourceCacheConfigFlag = struct {
		DataSourceUID string
	}{}
	enterpriseGetTeamLBACRulesAPIFlag = struct {
		UID string
	}{}
	enterpriseSetDatasourceCacheConfigFlag = struct {
		Body          string
		DataSourceUID string
	}{}
	enterpriseUpdateTeamLBACRulesAPIFlag = struct {
		UID string
	}{}
	folderPermissionsCmd = &cobra.Command{
		Use:               "folder-permissions",
		DisableAutoGenTag: true,
		Args:              cobra.NoArgs,
		Run:               failIfEmptyArgs,
	}
	folderPermissionsGetFolderPermissionListCmd = &cobra.Command{
		Use:               "get-folder-permission-list",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.FolderPermissions.GetFolderPermissionListWithParams(
				&folder_permissions.GetFolderPermissionListParams{
					FolderUID: folderPermissionsGetFolderPermissionListFlag.FolderUID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	folderPermissionsUpdateFolderPermissionsCmd = &cobra.Command{
		Use:               "update-folder-permissions",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.UpdateDashboardACLCommand
			if err := getBodyParam(
				folderPermissionsUpdateFolderPermissionsFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.FolderPermissions.UpdateFolderPermissionsWithParams(
				&folder_permissions.UpdateFolderPermissionsParams{
					Body:      &body,
					FolderUID: folderPermissionsUpdateFolderPermissionsFlag.FolderUID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	folderPermissionsGetFolderPermissionListFlag = struct {
		FolderUID string
	}{}
	folderPermissionsUpdateFolderPermissionsFlag = struct {
		Body      string
		FolderUID string
	}{}
	foldersCmd = &cobra.Command{
		Use:               "folders",
		DisableAutoGenTag: true,
		Args:              cobra.NoArgs,
		Run:               failIfEmptyArgs,
	}
	foldersCreateFolderCmd = &cobra.Command{
		Use:               "create-folder",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.CreateFolderCommand
			if err := getBodyParam(
				foldersCreateFolderFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.Folders.CreateFolderWithParams(
				&folders.CreateFolderParams{
					Body: &body,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	foldersDeleteFolderCmd = &cobra.Command{
		Use:               "delete-folder",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Folders.DeleteFolder(
				&folders.DeleteFolderParams{
					FolderUID:        foldersDeleteFolderFlag.FolderUID,
					ForceDeleteRules: &foldersDeleteFolderFlag.ForceDeleteRules,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	foldersGetFolderByUIDCmd = &cobra.Command{
		Use:               "get-folder-by-uid",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Folders.GetFolderByUIDWithParams(
				&folders.GetFolderByUIDParams{
					FolderUID: foldersGetFolderByUIDFlag.FolderUID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	foldersGetFolderDescendantCountsCmd = &cobra.Command{
		Use:               "get-folder-descendant-counts",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Folders.GetFolderDescendantCountsWithParams(
				&folders.GetFolderDescendantCountsParams{
					FolderUID: foldersGetFolderDescendantCountsFlag.FolderUID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	foldersGetFoldersCmd = &cobra.Command{
		Use:               "get-folders",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Folders.GetFolders(
				&folders.GetFoldersParams{
					Limit:      &foldersGetFoldersFlag.Limit,
					Page:       &foldersGetFoldersFlag.Page,
					ParentUID:  &foldersGetFoldersFlag.ParentUID,
					Permission: &foldersGetFoldersFlag.Permission,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	foldersMoveFolderCmd = &cobra.Command{
		Use:               "move-folder",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.MoveFolderCommand
			if err := getBodyParam(
				foldersMoveFolderFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.Folders.MoveFolderWithParams(
				&folders.MoveFolderParams{
					Body:      &body,
					FolderUID: foldersMoveFolderFlag.FolderUID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	foldersUpdateFolderCmd = &cobra.Command{
		Use:               "update-folder",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.UpdateFolderCommand
			if err := getBodyParam(
				foldersUpdateFolderFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.Folders.UpdateFolderWithParams(
				&folders.UpdateFolderParams{
					Body:      &body,
					FolderUID: foldersUpdateFolderFlag.FolderUID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	foldersCreateFolderFlag = struct {
		Body string
	}{}
	foldersDeleteFolderFlag = struct {
		FolderUID        string
		ForceDeleteRules bool
	}{}
	foldersGetFolderByUIDFlag = struct {
		FolderUID string
	}{}
	foldersGetFolderDescendantCountsFlag = struct {
		FolderUID string
	}{}
	foldersGetFoldersFlag = struct {
		Limit      int64
		Page       int64
		ParentUID  string
		Permission string
	}{}
	foldersMoveFolderFlag = struct {
		Body      string
		FolderUID string
	}{}
	foldersUpdateFolderFlag = struct {
		Body      string
		FolderUID string
	}{}
	getCurrentOrgCmd = &cobra.Command{
		Use:               "get-current-org",
		DisableAutoGenTag: true,
		Args:              cobra.NoArgs,
		Run:               failIfEmptyArgs,
	}
	getCurrentOrgGetCurrentOrgQuotaCmd = &cobra.Command{
		Use:               "get-current-org-quota",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.GetCurrentOrg.GetCurrentOrgQuotaWithParams(
				&get_current_org.GetCurrentOrgQuotaParams{},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	healthCmd = &cobra.Command{
		Use:               "health",
		DisableAutoGenTag: true,
		Args:              cobra.NoArgs,
		Run:               failIfEmptyArgs,
	}
	healthGetHealthCmd = &cobra.Command{
		Use:               "get-health",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Health.GetHealthWithParams(
				&health.GetHealthParams{},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	ldapDebugCmd = &cobra.Command{
		Use:               "ldap-debug",
		DisableAutoGenTag: true,
		Args:              cobra.NoArgs,
		Run:               failIfEmptyArgs,
	}
	ldapDebugGetSyncStatusCmd = &cobra.Command{
		Use:               "get-sync-status",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.LDAPDebug.GetSyncStatusWithParams(
				&ldap_debug.GetSyncStatusParams{},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	libraryElementsCmd = &cobra.Command{
		Use:               "library-elements",
		DisableAutoGenTag: true,
		Args:              cobra.NoArgs,
		Run:               failIfEmptyArgs,
	}
	libraryElementsCreateLibraryElementCmd = &cobra.Command{
		Use:               "create-library-element",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.CreateLibraryElementCommand
			if err := getBodyParam(
				libraryElementsCreateLibraryElementFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.LibraryElements.CreateLibraryElementWithParams(
				&library_elements.CreateLibraryElementParams{
					Body: &body,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	libraryElementsDeleteLibraryElementByUIDCmd = &cobra.Command{
		Use:               "delete-library-element-by-uid",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.LibraryElements.DeleteLibraryElementByUIDWithParams(
				&library_elements.DeleteLibraryElementByUIDParams{
					LibraryElementUID: libraryElementsDeleteLibraryElementByUIDFlag.LibraryElementUID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	libraryElementsGetLibraryElementByNameCmd = &cobra.Command{
		Use:               "get-library-element-by-name",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.LibraryElements.GetLibraryElementByNameWithParams(
				&library_elements.GetLibraryElementByNameParams{
					LibraryElementName: libraryElementsGetLibraryElementByNameFlag.LibraryElementName,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	libraryElementsGetLibraryElementByUIDCmd = &cobra.Command{
		Use:               "get-library-element-by-uid",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.LibraryElements.GetLibraryElementByUIDWithParams(
				&library_elements.GetLibraryElementByUIDParams{
					LibraryElementUID: libraryElementsGetLibraryElementByUIDFlag.LibraryElementUID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	libraryElementsGetLibraryElementConnectionsCmd = &cobra.Command{
		Use:               "get-library-element-connections",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.LibraryElements.GetLibraryElementConnectionsWithParams(
				&library_elements.GetLibraryElementConnectionsParams{
					LibraryElementUID: libraryElementsGetLibraryElementConnectionsFlag.LibraryElementUID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	libraryElementsGetLibraryElementsCmd = &cobra.Command{
		Use:               "get-library-elements",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.LibraryElements.GetLibraryElements(
				&library_elements.GetLibraryElementsParams{
					ExcludeUID:    &libraryElementsGetLibraryElementsFlag.ExcludeUID,
					FolderFilter:  &libraryElementsGetLibraryElementsFlag.FolderFilter,
					Kind:          &libraryElementsGetLibraryElementsFlag.Kind,
					Page:          &libraryElementsGetLibraryElementsFlag.Page,
					PerPage:       &libraryElementsGetLibraryElementsFlag.PerPage,
					SearchString:  &libraryElementsGetLibraryElementsFlag.SearchString,
					SortDirection: &libraryElementsGetLibraryElementsFlag.SortDirection,
					TypeFilter:    &libraryElementsGetLibraryElementsFlag.TypeFilter,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	libraryElementsUpdateLibraryElementCmd = &cobra.Command{
		Use:               "update-library-element",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.PatchLibraryElementCommand
			if err := getBodyParam(
				libraryElementsUpdateLibraryElementFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.LibraryElements.UpdateLibraryElementWithParams(
				&library_elements.UpdateLibraryElementParams{
					Body:              &body,
					LibraryElementUID: libraryElementsUpdateLibraryElementFlag.LibraryElementUID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	libraryElementsCreateLibraryElementFlag = struct {
		Body string
	}{}
	libraryElementsDeleteLibraryElementByUIDFlag = struct {
		LibraryElementUID string
	}{}
	libraryElementsGetLibraryElementByNameFlag = struct {
		LibraryElementName string
	}{}
	libraryElementsGetLibraryElementByUIDFlag = struct {
		LibraryElementUID string
	}{}
	libraryElementsGetLibraryElementConnectionsFlag = struct {
		LibraryElementUID string
	}{}
	libraryElementsGetLibraryElementsFlag = struct {
		ExcludeUID    string
		FolderFilter  string
		Kind          int64
		Page          int64
		PerPage       int64
		SearchString  string
		SortDirection string
		TypeFilter    string
	}{}
	libraryElementsUpdateLibraryElementFlag = struct {
		Body              string
		LibraryElementUID string
	}{}
	licensingCmd = &cobra.Command{
		Use:               "licensing",
		DisableAutoGenTag: true,
		Args:              cobra.NoArgs,
		Run:               failIfEmptyArgs,
	}
	licensingDeleteLicenseTokenCmd = &cobra.Command{
		Use:               "delete-license-token",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.DeleteTokenCommand
			if err := getBodyParam(
				licensingDeleteLicenseTokenFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.Licensing.DeleteLicenseTokenWithParams(
				&licensing.DeleteLicenseTokenParams{
					Body: &body,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	licensingGetCustomPermissionsCSVCmd = &cobra.Command{
		Use:               "get-custom-permissions-csv",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			err = api.Licensing.GetCustomPermissionsCSVWithParams(
				&licensing.GetCustomPermissionsCSVParams{},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			fmt.Println("{}")
			return nil
		},
	}
	licensingGetCustomPermissionsReportCmd = &cobra.Command{
		Use:               "get-custom-permissions-report",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			err = api.Licensing.GetCustomPermissionsReportWithParams(
				&licensing.GetCustomPermissionsReportParams{},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			fmt.Println("{}")
			return nil
		},
	}
	licensingGetLicenseTokenCmd = &cobra.Command{
		Use:               "get-license-token",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Licensing.GetLicenseTokenWithParams(
				&licensing.GetLicenseTokenParams{},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	licensingGetStatusCmd = &cobra.Command{
		Use:               "get-status",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Licensing.GetStatusWithParams(
				&licensing.GetStatusParams{},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			fmt.Println(resp.String())
			return nil
		},
	}
	licensingPostLicenseTokenCmd = &cobra.Command{
		Use:               "post-license-token",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.DeleteTokenCommand
			if err := getBodyParam(
				licensingPostLicenseTokenFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.Licensing.PostLicenseTokenWithParams(
				&licensing.PostLicenseTokenParams{
					Body: &body,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	licensingPostRenewLicenseTokenCmd = &cobra.Command{
		Use:               "post-renew-license-token",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body interface{}
			if err := getBodyParam(
				licensingPostRenewLicenseTokenFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.Licensing.PostRenewLicenseTokenWithParams(
				&licensing.PostRenewLicenseTokenParams{
					Body: &body,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			fmt.Println(resp.String())
			return nil
		},
	}
	licensingRefreshLicenseStatsCmd = &cobra.Command{
		Use:               "refresh-license-stats",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Licensing.RefreshLicenseStatsWithParams(
				&licensing.RefreshLicenseStatsParams{},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	licensingDeleteLicenseTokenFlag = struct {
		Body string
	}{}
	licensingPostLicenseTokenFlag = struct {
		Body string
	}{}
	licensingPostRenewLicenseTokenFlag = struct {
		Body string
	}{}
	migrationsCmd = &cobra.Command{
		Use:               "migrations",
		DisableAutoGenTag: true,
		Args:              cobra.NoArgs,
		Run:               failIfEmptyArgs,
	}
	migrationsCancelSnapshotCmd = &cobra.Command{
		Use:               "cancel-snapshot",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Migrations.CancelSnapshotWithParams(
				&migrations.CancelSnapshotParams{
					SnapshotUID: migrationsCancelSnapshotFlag.SnapshotUID,
					UID:         migrationsCancelSnapshotFlag.UID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			fmt.Println(resp.String())
			return nil
		},
	}
	migrationsCreateCloudMigrationTokenCmd = &cobra.Command{
		Use:               "create-cloud-migration-token",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Migrations.CreateCloudMigrationTokenWithParams(
				&migrations.CreateCloudMigrationTokenParams{},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	migrationsCreateSessionCmd = &cobra.Command{
		Use:               "create-session",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.CloudMigrationSessionRequestDTO
			if err := getBodyParam(
				migrationsCreateSessionFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.Migrations.CreateSessionWithParams(
				&migrations.CreateSessionParams{
					Body: &body,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	migrationsCreateSnapshotCmd = &cobra.Command{
		Use:               "create-snapshot",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Migrations.CreateSnapshotWithParams(
				&migrations.CreateSnapshotParams{
					UID: migrationsCreateSnapshotFlag.UID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	migrationsDeleteCloudMigrationTokenCmd = &cobra.Command{
		Use:               "delete-cloud-migration-token",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Migrations.DeleteCloudMigrationTokenWithParams(
				&migrations.DeleteCloudMigrationTokenParams{
					UID: migrationsDeleteCloudMigrationTokenFlag.UID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			fmt.Println(resp.String())
			return nil
		},
	}
	migrationsDeleteSessionCmd = &cobra.Command{
		Use:               "delete-session",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			err = api.Migrations.DeleteSessionWithParams(
				&migrations.DeleteSessionParams{
					UID: migrationsDeleteSessionFlag.UID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			fmt.Println("{}")
			return nil
		},
	}
	migrationsGetCloudMigrationRunListCmd = &cobra.Command{
		Use:               "get-cloud-migration-run-list",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Migrations.GetCloudMigrationRunListWithParams(
				&migrations.GetCloudMigrationRunListParams{
					UID: migrationsGetCloudMigrationRunListFlag.UID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	migrationsGetCloudMigrationRunCmd = &cobra.Command{
		Use:               "get-cloud-migration-run",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Migrations.GetCloudMigrationRunWithParams(
				&migrations.GetCloudMigrationRunParams{
					RunUID: migrationsGetCloudMigrationRunFlag.RunUID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	migrationsGetCloudMigrationTokenCmd = &cobra.Command{
		Use:               "get-cloud-migration-token",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Migrations.GetCloudMigrationTokenWithParams(
				&migrations.GetCloudMigrationTokenParams{},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	migrationsGetSessionListCmd = &cobra.Command{
		Use:               "get-session-list",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Migrations.GetSessionListWithParams(
				&migrations.GetSessionListParams{},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	migrationsGetSessionCmd = &cobra.Command{
		Use:               "get-session",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Migrations.GetSessionWithParams(
				&migrations.GetSessionParams{
					UID: migrationsGetSessionFlag.UID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	migrationsGetShapshotListCmd = &cobra.Command{
		Use:               "get-shapshot-list",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Migrations.GetShapshotList(
				&migrations.GetShapshotListParams{
					Limit: &migrationsGetShapshotListFlag.Limit,
					Page:  &migrationsGetShapshotListFlag.Page,
					UID:   migrationsGetShapshotListFlag.UID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	migrationsGetSnapshotCmd = &cobra.Command{
		Use:               "get-snapshot",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Migrations.GetSnapshot(
				&migrations.GetSnapshotParams{
					ResultLimit: &migrationsGetSnapshotFlag.ResultLimit,
					ResultPage:  &migrationsGetSnapshotFlag.ResultPage,
					SnapshotUID: migrationsGetSnapshotFlag.SnapshotUID,
					UID:         migrationsGetSnapshotFlag.UID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	migrationsRunCloudMigrationCmd = &cobra.Command{
		Use:               "run-cloud-migration",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Migrations.RunCloudMigrationWithParams(
				&migrations.RunCloudMigrationParams{
					UID: migrationsRunCloudMigrationFlag.UID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	migrationsUploadSnapshotCmd = &cobra.Command{
		Use:               "upload-snapshot",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Migrations.UploadSnapshotWithParams(
				&migrations.UploadSnapshotParams{
					SnapshotUID: migrationsUploadSnapshotFlag.SnapshotUID,
					UID:         migrationsUploadSnapshotFlag.UID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			fmt.Println(resp.String())
			return nil
		},
	}
	migrationsCancelSnapshotFlag = struct {
		SnapshotUID string
		UID         string
	}{}
	migrationsCreateSessionFlag = struct {
		Body string
	}{}
	migrationsCreateSnapshotFlag = struct {
		UID string
	}{}
	migrationsDeleteCloudMigrationTokenFlag = struct {
		UID string
	}{}
	migrationsDeleteSessionFlag = struct {
		UID string
	}{}
	migrationsGetCloudMigrationRunListFlag = struct {
		UID string
	}{}
	migrationsGetCloudMigrationRunFlag = struct {
		RunUID string
	}{}
	migrationsGetSessionFlag = struct {
		UID string
	}{}
	migrationsGetShapshotListFlag = struct {
		Limit int64
		Page  int64
		UID   string
	}{}
	migrationsGetSnapshotFlag = struct {
		ResultLimit int64
		ResultPage  int64
		SnapshotUID string
		UID         string
	}{}
	migrationsRunCloudMigrationFlag = struct {
		UID string
	}{}
	migrationsUploadSnapshotFlag = struct {
		SnapshotUID string
		UID         string
	}{}
	orgCmd = &cobra.Command{
		Use:               "org",
		DisableAutoGenTag: true,
		Args:              cobra.NoArgs,
		Run:               failIfEmptyArgs,
	}
	orgAddOrgUserToCurrentOrgCmd = &cobra.Command{
		Use:               "add-org-user-to-current-org",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.AddOrgUserCommand
			if err := getBodyParam(
				orgAddOrgUserToCurrentOrgFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.Org.AddOrgUserToCurrentOrgWithParams(
				&org.AddOrgUserToCurrentOrgParams{
					Body: &body,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	orgGetCurrentOrgCmd = &cobra.Command{
		Use:               "get-current-org",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Org.GetCurrentOrgWithParams(
				&org.GetCurrentOrgParams{},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	orgGetOrgUsersForCurrentOrgLookupCmd = &cobra.Command{
		Use:               "get-org-users-for-current-org-lookup",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Org.GetOrgUsersForCurrentOrgLookup(
				&org.GetOrgUsersForCurrentOrgLookupParams{
					Limit: &orgGetOrgUsersForCurrentOrgLookupFlag.Limit,
					Query: &orgGetOrgUsersForCurrentOrgLookupFlag.Query,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	orgGetOrgUsersForCurrentOrgCmd = &cobra.Command{
		Use:               "get-org-users-for-current-org",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Org.GetOrgUsersForCurrentOrgWithParams(
				&org.GetOrgUsersForCurrentOrgParams{},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	orgRemoveOrgUserForCurrentOrgCmd = &cobra.Command{
		Use:               "remove-org-user-for-current-org",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Org.RemoveOrgUserForCurrentOrgWithParams(
				&org.RemoveOrgUserForCurrentOrgParams{
					UserID: orgRemoveOrgUserForCurrentOrgFlag.UserID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	orgUpdateCurrentOrgAddressCmd = &cobra.Command{
		Use:               "update-current-org-address",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.UpdateOrgAddressForm
			if err := getBodyParam(
				orgUpdateCurrentOrgAddressFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.Org.UpdateCurrentOrgAddressWithParams(
				&org.UpdateCurrentOrgAddressParams{
					Body: &body,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	orgUpdateCurrentOrgCmd = &cobra.Command{
		Use:               "update-current-org",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.UpdateOrgForm
			if err := getBodyParam(
				orgUpdateCurrentOrgFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.Org.UpdateCurrentOrgWithParams(
				&org.UpdateCurrentOrgParams{
					Body: &body,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	orgUpdateOrgUserForCurrentOrgCmd = &cobra.Command{
		Use:               "update-org-user-for-current-org",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.UpdateOrgUserCommand
			if err := getBodyParam(
				orgUpdateOrgUserForCurrentOrgFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.Org.UpdateOrgUserForCurrentOrgWithParams(
				&org.UpdateOrgUserForCurrentOrgParams{
					Body:   &body,
					UserID: orgUpdateOrgUserForCurrentOrgFlag.UserID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	orgAddOrgUserToCurrentOrgFlag = struct {
		Body string
	}{}
	orgGetOrgUsersForCurrentOrgLookupFlag = struct {
		Limit int64
		Query string
	}{}
	orgRemoveOrgUserForCurrentOrgFlag = struct {
		UserID int64
	}{}
	orgUpdateCurrentOrgAddressFlag = struct {
		Body string
	}{}
	orgUpdateCurrentOrgFlag = struct {
		Body string
	}{}
	orgUpdateOrgUserForCurrentOrgFlag = struct {
		Body   string
		UserID int64
	}{}
	orgInvitesCmd = &cobra.Command{
		Use:               "org-invites",
		DisableAutoGenTag: true,
		Args:              cobra.NoArgs,
		Run:               failIfEmptyArgs,
	}
	orgInvitesAddOrgInviteCmd = &cobra.Command{
		Use:               "add-org-invite",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.AddInviteForm
			if err := getBodyParam(
				orgInvitesAddOrgInviteFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.OrgInvites.AddOrgInviteWithParams(
				&org_invites.AddOrgInviteParams{
					Body: &body,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	orgInvitesGetPendingOrgInvitesCmd = &cobra.Command{
		Use:               "get-pending-org-invites",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.OrgInvites.GetPendingOrgInvitesWithParams(
				&org_invites.GetPendingOrgInvitesParams{},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	orgInvitesRevokeInviteCmd = &cobra.Command{
		Use:               "revoke-invite",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.OrgInvites.RevokeInviteWithParams(
				&org_invites.RevokeInviteParams{
					InvitationCode: orgInvitesRevokeInviteFlag.InvitationCode,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	orgInvitesAddOrgInviteFlag = struct {
		Body string
	}{}
	orgInvitesRevokeInviteFlag = struct {
		InvitationCode string
	}{}
	orgPreferencesCmd = &cobra.Command{
		Use:               "org-preferences",
		DisableAutoGenTag: true,
		Args:              cobra.NoArgs,
		Run:               failIfEmptyArgs,
	}
	orgPreferencesGetOrgPreferencesCmd = &cobra.Command{
		Use:               "get-org-preferences",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.OrgPreferences.GetOrgPreferencesWithParams(
				&org_preferences.GetOrgPreferencesParams{},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	orgPreferencesPatchOrgPreferencesCmd = &cobra.Command{
		Use:               "patch-org-preferences",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.PatchPrefsCmd
			if err := getBodyParam(
				orgPreferencesPatchOrgPreferencesFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.OrgPreferences.PatchOrgPreferencesWithParams(
				&org_preferences.PatchOrgPreferencesParams{
					Body: &body,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	orgPreferencesUpdateOrgPreferencesCmd = &cobra.Command{
		Use:               "update-org-preferences",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.UpdatePrefsCmd
			if err := getBodyParam(
				orgPreferencesUpdateOrgPreferencesFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.OrgPreferences.UpdateOrgPreferencesWithParams(
				&org_preferences.UpdateOrgPreferencesParams{
					Body: &body,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	orgPreferencesPatchOrgPreferencesFlag = struct {
		Body string
	}{}
	orgPreferencesUpdateOrgPreferencesFlag = struct {
		Body string
	}{}
	orgsCmd = &cobra.Command{
		Use:               "orgs",
		DisableAutoGenTag: true,
		Args:              cobra.NoArgs,
		Run:               failIfEmptyArgs,
	}
	orgsAddOrgUserCmd = &cobra.Command{
		Use:               "add-org-user",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.AddOrgUserCommand
			if err := getBodyParam(
				orgsAddOrgUserFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.Orgs.AddOrgUserWithParams(
				&orgs.AddOrgUserParams{
					Body:  &body,
					OrgID: orgsAddOrgUserFlag.OrgID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	orgsCreateOrgCmd = &cobra.Command{
		Use:               "create-org",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.CreateOrgCommand
			if err := getBodyParam(
				orgsCreateOrgFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.Orgs.CreateOrgWithParams(
				&orgs.CreateOrgParams{
					Body: &body,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	orgsGetOrgByNameCmd = &cobra.Command{
		Use:               "get-org-by-name",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Orgs.GetOrgByNameWithParams(
				&orgs.GetOrgByNameParams{
					OrgName: orgsGetOrgByNameFlag.OrgName,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	orgsGetOrgQuotaCmd = &cobra.Command{
		Use:               "get-org-quota",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Orgs.GetOrgQuotaWithParams(
				&orgs.GetOrgQuotaParams{
					OrgID: orgsGetOrgQuotaFlag.OrgID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	orgsGetOrgUsersCmd = &cobra.Command{
		Use:               "get-org-users",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Orgs.GetOrgUsersWithParams(
				&orgs.GetOrgUsersParams{
					OrgID: orgsGetOrgUsersFlag.OrgID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	orgsRemoveOrgUserCmd = &cobra.Command{
		Use:               "remove-org-user",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Orgs.RemoveOrgUserWithParams(
				&orgs.RemoveOrgUserParams{
					OrgID:  orgsRemoveOrgUserFlag.OrgID,
					UserID: orgsRemoveOrgUserFlag.UserID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	orgsSearchOrgUsersCmd = &cobra.Command{
		Use:               "search-org-users",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Orgs.SearchOrgUsersWithParams(
				&orgs.SearchOrgUsersParams{
					OrgID: orgsSearchOrgUsersFlag.OrgID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	orgsSearchOrgsCmd = &cobra.Command{
		Use:               "search-orgs",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Orgs.SearchOrgs(
				&orgs.SearchOrgsParams{
					Name:    &orgsSearchOrgsFlag.Name,
					Page:    &orgsSearchOrgsFlag.Page,
					Perpage: &orgsSearchOrgsFlag.Perpage,
					Query:   &orgsSearchOrgsFlag.Query,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	orgsUpdateOrgAddressCmd = &cobra.Command{
		Use:               "update-org-address",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.UpdateOrgAddressForm
			if err := getBodyParam(
				orgsUpdateOrgAddressFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.Orgs.UpdateOrgAddressWithParams(
				&orgs.UpdateOrgAddressParams{
					Body:  &body,
					OrgID: orgsUpdateOrgAddressFlag.OrgID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	orgsUpdateOrgQuotaCmd = &cobra.Command{
		Use:               "update-org-quota",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.UpdateQuotaCmd
			if err := getBodyParam(
				orgsUpdateOrgQuotaFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.Orgs.UpdateOrgQuota(
				&orgs.UpdateOrgQuotaParams{
					Body:        &body,
					OrgID:       orgsUpdateOrgQuotaFlag.OrgID,
					QuotaTarget: orgsUpdateOrgQuotaFlag.QuotaTarget,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	orgsUpdateOrgUserCmd = &cobra.Command{
		Use:               "update-org-user",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.UpdateOrgUserCommand
			if err := getBodyParam(
				orgsUpdateOrgUserFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.Orgs.UpdateOrgUser(
				&orgs.UpdateOrgUserParams{
					Body:   &body,
					OrgID:  orgsUpdateOrgUserFlag.OrgID,
					UserID: orgsUpdateOrgUserFlag.UserID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	orgsUpdateOrgCmd = &cobra.Command{
		Use:               "update-org",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.UpdateOrgForm
			if err := getBodyParam(
				orgsUpdateOrgFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.Orgs.UpdateOrgWithParams(
				&orgs.UpdateOrgParams{
					Body:  &body,
					OrgID: orgsUpdateOrgFlag.OrgID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	orgsAddOrgUserFlag = struct {
		Body  string
		OrgID int64
	}{}
	orgsCreateOrgFlag = struct {
		Body string
	}{}
	orgsGetOrgByNameFlag = struct {
		OrgName string
	}{}
	orgsGetOrgQuotaFlag = struct {
		OrgID int64
	}{}
	orgsGetOrgUsersFlag = struct {
		OrgID int64
	}{}
	orgsRemoveOrgUserFlag = struct {
		OrgID  int64
		UserID int64
	}{}
	orgsSearchOrgUsersFlag = struct {
		OrgID int64
	}{}
	orgsSearchOrgsFlag = struct {
		Name    string
		Page    int64
		Perpage int64
		Query   string
	}{}
	orgsUpdateOrgAddressFlag = struct {
		Body  string
		OrgID int64
	}{}
	orgsUpdateOrgQuotaFlag = struct {
		Body        string
		OrgID       int64
		QuotaTarget string
	}{}
	orgsUpdateOrgUserFlag = struct {
		Body   string
		OrgID  int64
		UserID int64
	}{}
	orgsUpdateOrgFlag = struct {
		Body  string
		OrgID int64
	}{}
	playlistsCmd = &cobra.Command{
		Use:               "playlists",
		DisableAutoGenTag: true,
		Args:              cobra.NoArgs,
		Run:               failIfEmptyArgs,
	}
	playlistsCreatePlaylistCmd = &cobra.Command{
		Use:               "create-playlist",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.CreatePlaylistCommand
			if err := getBodyParam(
				playlistsCreatePlaylistFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.Playlists.CreatePlaylistWithParams(
				&playlists.CreatePlaylistParams{
					Body: &body,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	playlistsDeletePlaylistCmd = &cobra.Command{
		Use:               "delete-playlist",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Playlists.DeletePlaylistWithParams(
				&playlists.DeletePlaylistParams{
					UID: playlistsDeletePlaylistFlag.UID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	playlistsGetPlaylistItemsCmd = &cobra.Command{
		Use:               "get-playlist-items",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Playlists.GetPlaylistItemsWithParams(
				&playlists.GetPlaylistItemsParams{
					UID: playlistsGetPlaylistItemsFlag.UID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	playlistsGetPlaylistCmd = &cobra.Command{
		Use:               "get-playlist",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Playlists.GetPlaylistWithParams(
				&playlists.GetPlaylistParams{
					UID: playlistsGetPlaylistFlag.UID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	playlistsSearchPlaylistsCmd = &cobra.Command{
		Use:               "search-playlists",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Playlists.SearchPlaylists(
				&playlists.SearchPlaylistsParams{
					Limit: &playlistsSearchPlaylistsFlag.Limit,
					Query: &playlistsSearchPlaylistsFlag.Query,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	playlistsUpdatePlaylistCmd = &cobra.Command{
		Use:               "update-playlist",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.UpdatePlaylistCommand
			if err := getBodyParam(
				playlistsUpdatePlaylistFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.Playlists.UpdatePlaylistWithParams(
				&playlists.UpdatePlaylistParams{
					Body: &body,
					UID:  playlistsUpdatePlaylistFlag.UID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	playlistsCreatePlaylistFlag = struct {
		Body string
	}{}
	playlistsDeletePlaylistFlag = struct {
		UID string
	}{}
	playlistsGetPlaylistItemsFlag = struct {
		UID string
	}{}
	playlistsGetPlaylistFlag = struct {
		UID string
	}{}
	playlistsSearchPlaylistsFlag = struct {
		Limit int64
		Query string
	}{}
	playlistsUpdatePlaylistFlag = struct {
		Body string
		UID  string
	}{}
	provisioningCmd = &cobra.Command{
		Use:               "provisioning",
		DisableAutoGenTag: true,
		Args:              cobra.NoArgs,
		Run:               failIfEmptyArgs,
	}
	provisioningDeleteAlertRuleCmd = &cobra.Command{
		Use:               "delete-alert-rule",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Provisioning.DeleteAlertRule(
				&provisioning.DeleteAlertRuleParams{
					UID:                provisioningDeleteAlertRuleFlag.UID,
					XDisableProvenance: &provisioningDeleteAlertRuleFlag.XDisableProvenance,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			fmt.Println(resp.String())
			return nil
		},
	}
	provisioningDeleteAlertRuleGroupCmd = &cobra.Command{
		Use:               "delete-alert-rule-group",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Provisioning.DeleteAlertRuleGroupWithParams(
				&provisioning.DeleteAlertRuleGroupParams{
					FolderUID: provisioningDeleteAlertRuleGroupFlag.FolderUID,
					Group:     provisioningDeleteAlertRuleGroupFlag.Group,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			fmt.Println(resp.String())
			return nil
		},
	}
	provisioningDeleteContactpointsCmd = &cobra.Command{
		Use:               "delete-contactpoints",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Provisioning.DeleteContactpointsWithParams(
				&provisioning.DeleteContactpointsParams{
					UID: provisioningDeleteContactpointsFlag.UID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			fmt.Println(resp.String())
			return nil
		},
	}
	provisioningDeleteMuteTimingCmd = &cobra.Command{
		Use:               "delete-mute-timing",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Provisioning.DeleteMuteTiming(
				&provisioning.DeleteMuteTimingParams{
					XDisableProvenance: &provisioningDeleteMuteTimingFlag.XDisableProvenance,
					Name:               provisioningDeleteMuteTimingFlag.Name,
					Version:            &provisioningDeleteMuteTimingFlag.Version,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			fmt.Println(resp.String())
			return nil
		},
	}
	provisioningDeleteTemplateCmd = &cobra.Command{
		Use:               "delete-template",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Provisioning.DeleteTemplateWithParams(
				&provisioning.DeleteTemplateParams{
					Name: provisioningDeleteTemplateFlag.Name,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			fmt.Println(resp.String())
			return nil
		},
	}
	provisioningExportMuteTimingCmd = &cobra.Command{
		Use:               "export-mute-timing",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Provisioning.ExportMuteTiming(
				&provisioning.ExportMuteTimingParams{
					Download: &provisioningExportMuteTimingFlag.Download,
					Format:   &provisioningExportMuteTimingFlag.Format,
					Name:     provisioningExportMuteTimingFlag.Name,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	provisioningExportMuteTimingsCmd = &cobra.Command{
		Use:               "export-mute-timings",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Provisioning.ExportMuteTimings(
				&provisioning.ExportMuteTimingsParams{
					Download: &provisioningExportMuteTimingsFlag.Download,
					Format:   &provisioningExportMuteTimingsFlag.Format,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	provisioningGetAlertRuleExportCmd = &cobra.Command{
		Use:               "get-alert-rule-export",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Provisioning.GetAlertRuleExport(
				&provisioning.GetAlertRuleExportParams{
					UID:      provisioningGetAlertRuleExportFlag.UID,
					Download: &provisioningGetAlertRuleExportFlag.Download,
					Format:   &provisioningGetAlertRuleExportFlag.Format,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	provisioningGetAlertRuleGroupExportCmd = &cobra.Command{
		Use:               "get-alert-rule-group-export",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Provisioning.GetAlertRuleGroupExport(
				&provisioning.GetAlertRuleGroupExportParams{
					FolderUID: provisioningGetAlertRuleGroupExportFlag.FolderUID,
					Group:     provisioningGetAlertRuleGroupExportFlag.Group,
					Download:  &provisioningGetAlertRuleGroupExportFlag.Download,
					Format:    &provisioningGetAlertRuleGroupExportFlag.Format,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	provisioningGetAlertRuleGroupCmd = &cobra.Command{
		Use:               "get-alert-rule-group",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Provisioning.GetAlertRuleGroupWithParams(
				&provisioning.GetAlertRuleGroupParams{
					FolderUID: provisioningGetAlertRuleGroupFlag.FolderUID,
					Group:     provisioningGetAlertRuleGroupFlag.Group,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	provisioningGetAlertRuleCmd = &cobra.Command{
		Use:               "get-alert-rule",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Provisioning.GetAlertRuleWithParams(
				&provisioning.GetAlertRuleParams{
					UID: provisioningGetAlertRuleFlag.UID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	provisioningGetAlertRulesExportCmd = &cobra.Command{
		Use:               "get-alert-rules-export",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Provisioning.GetAlertRulesExport(
				&provisioning.GetAlertRulesExportParams{
					Download:  &provisioningGetAlertRulesExportFlag.Download,
					FolderUID: provisioningGetAlertRulesExportFlag.FolderUID,
					Format:    &provisioningGetAlertRulesExportFlag.Format,
					Group:     &provisioningGetAlertRulesExportFlag.Group,
					RuleUID:   &provisioningGetAlertRulesExportFlag.RuleUID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	provisioningGetAlertRulesCmd = &cobra.Command{
		Use:               "get-alert-rules",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Provisioning.GetAlertRulesWithParams(
				&provisioning.GetAlertRulesParams{},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	provisioningGetContactpointsCmd = &cobra.Command{
		Use:               "get-contactpoints",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Provisioning.GetContactpoints(
				&provisioning.GetContactpointsParams{
					Name: &provisioningGetContactpointsFlag.Name,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	provisioningGetContactpointsExportCmd = &cobra.Command{
		Use:               "get-contactpoints-export",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Provisioning.GetContactpointsExport(
				&provisioning.GetContactpointsExportParams{
					Decrypt:  &provisioningGetContactpointsExportFlag.Decrypt,
					Download: &provisioningGetContactpointsExportFlag.Download,
					Format:   &provisioningGetContactpointsExportFlag.Format,
					Name:     &provisioningGetContactpointsExportFlag.Name,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	provisioningGetMuteTimingCmd = &cobra.Command{
		Use:               "get-mute-timing",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Provisioning.GetMuteTimingWithParams(
				&provisioning.GetMuteTimingParams{
					Name: provisioningGetMuteTimingFlag.Name,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	provisioningGetMuteTimingsCmd = &cobra.Command{
		Use:               "get-mute-timings",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Provisioning.GetMuteTimingsWithParams(
				&provisioning.GetMuteTimingsParams{},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	provisioningGetPolicyTreeExportCmd = &cobra.Command{
		Use:               "get-policy-tree-export",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Provisioning.GetPolicyTreeExportWithParams(
				&provisioning.GetPolicyTreeExportParams{},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	provisioningGetPolicyTreeCmd = &cobra.Command{
		Use:               "get-policy-tree",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Provisioning.GetPolicyTreeWithParams(
				&provisioning.GetPolicyTreeParams{},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	provisioningGetTemplateCmd = &cobra.Command{
		Use:               "get-template",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Provisioning.GetTemplateWithParams(
				&provisioning.GetTemplateParams{
					Name: provisioningGetTemplateFlag.Name,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	provisioningGetTemplatesCmd = &cobra.Command{
		Use:               "get-templates",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Provisioning.GetTemplatesWithParams(
				&provisioning.GetTemplatesParams{},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	provisioningPostAlertRuleCmd = &cobra.Command{
		Use:               "post-alert-rule",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.ProvisionedAlertRule
			if err := getBodyParam(
				provisioningPostAlertRuleFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.Provisioning.PostAlertRule(
				&provisioning.PostAlertRuleParams{
					Body:               &body,
					XDisableProvenance: &provisioningPostAlertRuleFlag.XDisableProvenance,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	provisioningPostContactpointsCmd = &cobra.Command{
		Use:               "post-contactpoints",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.EmbeddedContactPoint
			if err := getBodyParam(
				provisioningPostContactpointsFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.Provisioning.PostContactpoints(
				&provisioning.PostContactpointsParams{
					Body:               &body,
					XDisableProvenance: &provisioningPostContactpointsFlag.XDisableProvenance,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	provisioningPostMuteTimingCmd = &cobra.Command{
		Use:               "post-mute-timing",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.MuteTimeInterval
			if err := getBodyParam(
				provisioningPostMuteTimingFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.Provisioning.PostMuteTiming(
				&provisioning.PostMuteTimingParams{
					Body:               &body,
					XDisableProvenance: &provisioningPostMuteTimingFlag.XDisableProvenance,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	provisioningPutAlertRuleCmd = &cobra.Command{
		Use:               "put-alert-rule",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.ProvisionedAlertRule
			if err := getBodyParam(
				provisioningPutAlertRuleFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.Provisioning.PutAlertRule(
				&provisioning.PutAlertRuleParams{
					Body:               &body,
					UID:                provisioningPutAlertRuleFlag.UID,
					XDisableProvenance: &provisioningPutAlertRuleFlag.XDisableProvenance,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	provisioningPutAlertRuleGroupCmd = &cobra.Command{
		Use:               "put-alert-rule-group",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.AlertRuleGroup
			if err := getBodyParam(
				provisioningPutAlertRuleGroupFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.Provisioning.PutAlertRuleGroup(
				&provisioning.PutAlertRuleGroupParams{
					Body:               &body,
					FolderUID:          provisioningPutAlertRuleGroupFlag.FolderUID,
					Group:              provisioningPutAlertRuleGroupFlag.Group,
					XDisableProvenance: &provisioningPutAlertRuleGroupFlag.XDisableProvenance,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	provisioningPutContactpointCmd = &cobra.Command{
		Use:               "put-contactpoint",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.EmbeddedContactPoint
			if err := getBodyParam(
				provisioningPutContactpointFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.Provisioning.PutContactpoint(
				&provisioning.PutContactpointParams{
					Body:               &body,
					UID:                provisioningPutContactpointFlag.UID,
					XDisableProvenance: &provisioningPutContactpointFlag.XDisableProvenance,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	provisioningPutMuteTimingCmd = &cobra.Command{
		Use:               "put-mute-timing",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.MuteTimeInterval
			if err := getBodyParam(
				provisioningPutMuteTimingFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.Provisioning.PutMuteTiming(
				&provisioning.PutMuteTimingParams{
					Body:               &body,
					XDisableProvenance: &provisioningPutMuteTimingFlag.XDisableProvenance,
					Name:               provisioningPutMuteTimingFlag.Name,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	provisioningPutPolicyTreeCmd = &cobra.Command{
		Use:               "put-policy-tree",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.Route
			if err := getBodyParam(
				provisioningPutPolicyTreeFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.Provisioning.PutPolicyTree(
				&provisioning.PutPolicyTreeParams{
					Body:               &body,
					XDisableProvenance: &provisioningPutPolicyTreeFlag.XDisableProvenance,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	provisioningPutTemplateCmd = &cobra.Command{
		Use:               "put-template",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.NotificationTemplateContent
			if err := getBodyParam(
				provisioningPutTemplateFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.Provisioning.PutTemplate(
				&provisioning.PutTemplateParams{
					Body:               &body,
					XDisableProvenance: &provisioningPutTemplateFlag.XDisableProvenance,
					Name:               provisioningPutTemplateFlag.Name,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	provisioningResetPolicyTreeCmd = &cobra.Command{
		Use:               "reset-policy-tree",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Provisioning.ResetPolicyTreeWithParams(
				&provisioning.ResetPolicyTreeParams{},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	provisioningDeleteAlertRuleFlag = struct {
		UID                string
		XDisableProvenance string
	}{}
	provisioningDeleteAlertRuleGroupFlag = struct {
		FolderUID string
		Group     string
	}{}
	provisioningDeleteContactpointsFlag = struct {
		UID string
	}{}
	provisioningDeleteMuteTimingFlag = struct {
		XDisableProvenance string
		Name               string
		Version            string
	}{}
	provisioningDeleteTemplateFlag = struct {
		Name string
	}{}
	provisioningExportMuteTimingFlag = struct {
		Download bool
		Format   string
		Name     string
	}{}
	provisioningExportMuteTimingsFlag = struct {
		Download bool
		Format   string
	}{}
	provisioningGetAlertRuleExportFlag = struct {
		UID      string
		Download bool
		Format   string
	}{}
	provisioningGetAlertRuleGroupExportFlag = struct {
		FolderUID string
		Group     string
		Download  bool
		Format    string
	}{}
	provisioningGetAlertRuleGroupFlag = struct {
		FolderUID string
		Group     string
	}{}
	provisioningGetAlertRuleFlag = struct {
		UID string
	}{}
	provisioningGetAlertRulesExportFlag = struct {
		Download  bool
		FolderUID []string
		Format    string
		Group     string
		RuleUID   string
	}{}
	provisioningGetContactpointsFlag = struct {
		Name string
	}{}
	provisioningGetContactpointsExportFlag = struct {
		Decrypt  bool
		Download bool
		Format   string
		Name     string
	}{}
	provisioningGetMuteTimingFlag = struct {
		Name string
	}{}
	provisioningGetTemplateFlag = struct {
		Name string
	}{}
	provisioningPostAlertRuleFlag = struct {
		Body               string
		XDisableProvenance string
	}{}
	provisioningPostContactpointsFlag = struct {
		Body               string
		XDisableProvenance string
	}{}
	provisioningPostMuteTimingFlag = struct {
		Body               string
		XDisableProvenance string
	}{}
	provisioningPutAlertRuleFlag = struct {
		Body               string
		UID                string
		XDisableProvenance string
	}{}
	provisioningPutAlertRuleGroupFlag = struct {
		Body               string
		FolderUID          string
		Group              string
		XDisableProvenance string
	}{}
	provisioningPutContactpointFlag = struct {
		Body               string
		UID                string
		XDisableProvenance string
	}{}
	provisioningPutMuteTimingFlag = struct {
		Body               string
		XDisableProvenance string
		Name               string
	}{}
	provisioningPutPolicyTreeFlag = struct {
		Body               string
		XDisableProvenance string
	}{}
	provisioningPutTemplateFlag = struct {
		Body               string
		XDisableProvenance string
		Name               string
	}{}
	queryHistoryCmd = &cobra.Command{
		Use:               "query-history",
		DisableAutoGenTag: true,
		Args:              cobra.NoArgs,
		Run:               failIfEmptyArgs,
	}
	queryHistoryCreateQueryCmd = &cobra.Command{
		Use:               "create-query",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.CreateQueryInQueryHistoryCommand
			if err := getBodyParam(
				queryHistoryCreateQueryFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.QueryHistory.CreateQueryWithParams(
				&query_history.CreateQueryParams{
					Body: &body,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	queryHistoryDeleteQueryCmd = &cobra.Command{
		Use:               "delete-query",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.QueryHistory.DeleteQueryWithParams(
				&query_history.DeleteQueryParams{
					QueryHistoryUID: queryHistoryDeleteQueryFlag.QueryHistoryUID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	queryHistoryPatchQueryCommentCmd = &cobra.Command{
		Use:               "patch-query-comment",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.PatchQueryCommentInQueryHistoryCommand
			if err := getBodyParam(
				queryHistoryPatchQueryCommentFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.QueryHistory.PatchQueryCommentWithParams(
				&query_history.PatchQueryCommentParams{
					Body:            &body,
					QueryHistoryUID: queryHistoryPatchQueryCommentFlag.QueryHistoryUID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	queryHistorySearchQueriesCmd = &cobra.Command{
		Use:               "search-queries",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.QueryHistory.SearchQueries(
				&query_history.SearchQueriesParams{
					DatasourceUID: queryHistorySearchQueriesFlag.DatasourceUID,
					From:          &queryHistorySearchQueriesFlag.From,
					Limit:         &queryHistorySearchQueriesFlag.Limit,
					OnlyStarred:   &queryHistorySearchQueriesFlag.OnlyStarred,
					Page:          &queryHistorySearchQueriesFlag.Page,
					SearchString:  &queryHistorySearchQueriesFlag.SearchString,
					Sort:          &queryHistorySearchQueriesFlag.Sort,
					To:            &queryHistorySearchQueriesFlag.To,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	queryHistoryStarQueryCmd = &cobra.Command{
		Use:               "star-query",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.QueryHistory.StarQueryWithParams(
				&query_history.StarQueryParams{
					QueryHistoryUID: queryHistoryStarQueryFlag.QueryHistoryUID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	queryHistoryUnstarQueryCmd = &cobra.Command{
		Use:               "unstar-query",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.QueryHistory.UnstarQueryWithParams(
				&query_history.UnstarQueryParams{
					QueryHistoryUID: queryHistoryUnstarQueryFlag.QueryHistoryUID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	queryHistoryCreateQueryFlag = struct {
		Body string
	}{}
	queryHistoryDeleteQueryFlag = struct {
		QueryHistoryUID string
	}{}
	queryHistoryPatchQueryCommentFlag = struct {
		Body            string
		QueryHistoryUID string
	}{}
	queryHistorySearchQueriesFlag = struct {
		DatasourceUID []string
		From          int64
		Limit         int64
		OnlyStarred   bool
		Page          int64
		SearchString  string
		Sort          string
		To            int64
	}{}
	queryHistoryStarQueryFlag = struct {
		QueryHistoryUID string
	}{}
	queryHistoryUnstarQueryFlag = struct {
		QueryHistoryUID string
	}{}
	recordingRulesCmd = &cobra.Command{
		Use:               "recording-rules",
		DisableAutoGenTag: true,
		Args:              cobra.NoArgs,
		Run:               failIfEmptyArgs,
	}
	recordingRulesCreateRecordingRuleCmd = &cobra.Command{
		Use:               "create-recording-rule",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.RecordingRuleJSON
			if err := getBodyParam(
				recordingRulesCreateRecordingRuleFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.RecordingRules.CreateRecordingRuleWithParams(
				&recording_rules.CreateRecordingRuleParams{
					Body: &body,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	recordingRulesCreateRecordingRuleWriteTargetCmd = &cobra.Command{
		Use:               "create-recording-rule-write-target",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.PrometheusRemoteWriteTargetJSON
			if err := getBodyParam(
				recordingRulesCreateRecordingRuleWriteTargetFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.RecordingRules.CreateRecordingRuleWriteTargetWithParams(
				&recording_rules.CreateRecordingRuleWriteTargetParams{
					Body: &body,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	recordingRulesDeleteRecordingRuleCmd = &cobra.Command{
		Use:               "delete-recording-rule",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.RecordingRules.DeleteRecordingRuleWithParams(
				&recording_rules.DeleteRecordingRuleParams{
					RecordingRuleID: recordingRulesDeleteRecordingRuleFlag.RecordingRuleID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	recordingRulesDeleteRecordingRuleWriteTargetCmd = &cobra.Command{
		Use:               "delete-recording-rule-write-target",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.RecordingRules.DeleteRecordingRuleWriteTargetWithParams(
				&recording_rules.DeleteRecordingRuleWriteTargetParams{},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	recordingRulesGetRecordingRuleWriteTargetCmd = &cobra.Command{
		Use:               "get-recording-rule-write-target",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.RecordingRules.GetRecordingRuleWriteTargetWithParams(
				&recording_rules.GetRecordingRuleWriteTargetParams{},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	recordingRulesListRecordingRulesCmd = &cobra.Command{
		Use:               "list-recording-rules",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.RecordingRules.ListRecordingRulesWithParams(
				&recording_rules.ListRecordingRulesParams{},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	recordingRulesTestCreateRecordingRuleCmd = &cobra.Command{
		Use:               "test-create-recording-rule",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.RecordingRuleJSON
			if err := getBodyParam(
				recordingRulesTestCreateRecordingRuleFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.RecordingRules.TestCreateRecordingRuleWithParams(
				&recording_rules.TestCreateRecordingRuleParams{
					Body: &body,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	recordingRulesUpdateRecordingRuleCmd = &cobra.Command{
		Use:               "update-recording-rule",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.RecordingRuleJSON
			if err := getBodyParam(
				recordingRulesUpdateRecordingRuleFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.RecordingRules.UpdateRecordingRuleWithParams(
				&recording_rules.UpdateRecordingRuleParams{
					Body: &body,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	recordingRulesCreateRecordingRuleFlag = struct {
		Body string
	}{}
	recordingRulesCreateRecordingRuleWriteTargetFlag = struct {
		Body string
	}{}
	recordingRulesDeleteRecordingRuleFlag = struct {
		RecordingRuleID int64
	}{}
	recordingRulesTestCreateRecordingRuleFlag = struct {
		Body string
	}{}
	recordingRulesUpdateRecordingRuleFlag = struct {
		Body string
	}{}
	reportsCmd = &cobra.Command{
		Use:               "reports",
		DisableAutoGenTag: true,
		Args:              cobra.NoArgs,
		Run:               failIfEmptyArgs,
	}
	reportsCreateReportCmd = &cobra.Command{
		Use:               "create-report",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.CreateOrUpdateReport
			if err := getBodyParam(
				reportsCreateReportFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.Reports.CreateReportWithParams(
				&reports.CreateReportParams{
					Body: &body,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	reportsDeleteReportCmd = &cobra.Command{
		Use:               "delete-report",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Reports.DeleteReportWithParams(
				&reports.DeleteReportParams{
					ID: reportsDeleteReportFlag.ID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	reportsGetReportSettingsCmd = &cobra.Command{
		Use:               "get-report-settings",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Reports.GetReportSettingsWithParams(
				&reports.GetReportSettingsParams{},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	reportsGetReportCmd = &cobra.Command{
		Use:               "get-report",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Reports.GetReportWithParams(
				&reports.GetReportParams{
					ID: reportsGetReportFlag.ID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	reportsGetReportsCmd = &cobra.Command{
		Use:               "get-reports",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Reports.GetReportsWithParams(
				&reports.GetReportsParams{},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	reportsGetSettingsImageCmd = &cobra.Command{
		Use:               "get-settings-image",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Reports.GetSettingsImageWithParams(
				&reports.GetSettingsImageParams{},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	reportsRenderReportCSVsCmd = &cobra.Command{
		Use:               "render-report-cs-vs",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, _, err := api.Reports.RenderReportCSVs(
				&reports.RenderReportCSVsParams{
					Dashboards: &reportsRenderReportCSVsFlag.Dashboards,
					Title:      &reportsRenderReportCSVsFlag.Title,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	reportsRenderReportPDFsCmd = &cobra.Command{
		Use:               "render-report-pd-fs",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Reports.RenderReportPDFs(
				&reports.RenderReportPDFsParams{
					Dashboards:    &reportsRenderReportPDFsFlag.Dashboards,
					IncludeTables: &reportsRenderReportPDFsFlag.IncludeTables,
					Layout:        &reportsRenderReportPDFsFlag.Layout,
					Orientation:   &reportsRenderReportPDFsFlag.Orientation,
					ScaleFactor:   &reportsRenderReportPDFsFlag.ScaleFactor,
					Title:         &reportsRenderReportPDFsFlag.Title,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	reportsSaveReportSettingsCmd = &cobra.Command{
		Use:               "save-report-settings",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.ReportSettings
			if err := getBodyParam(
				reportsSaveReportSettingsFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.Reports.SaveReportSettingsWithParams(
				&reports.SaveReportSettingsParams{
					Body: &body,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	reportsSendReportCmd = &cobra.Command{
		Use:               "send-report",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.ReportEmail
			if err := getBodyParam(
				reportsSendReportFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.Reports.SendReportWithParams(
				&reports.SendReportParams{
					Body: &body,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	reportsSendTestEmailCmd = &cobra.Command{
		Use:               "send-test-email",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.CreateOrUpdateReport
			if err := getBodyParam(
				reportsSendTestEmailFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.Reports.SendTestEmailWithParams(
				&reports.SendTestEmailParams{
					Body: &body,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	reportsUpdateReportCmd = &cobra.Command{
		Use:               "update-report",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.CreateOrUpdateReport
			if err := getBodyParam(
				reportsUpdateReportFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.Reports.UpdateReportWithParams(
				&reports.UpdateReportParams{
					Body: &body,
					ID:   reportsUpdateReportFlag.ID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	reportsCreateReportFlag = struct {
		Body string
	}{}
	reportsDeleteReportFlag = struct {
		ID int64
	}{}
	reportsGetReportFlag = struct {
		ID int64
	}{}
	reportsRenderReportCSVsFlag = struct {
		Dashboards string
		Title      string
	}{}
	reportsRenderReportPDFsFlag = struct {
		Dashboards    string
		IncludeTables string
		Layout        string
		Orientation   string
		ScaleFactor   string
		Title         string
	}{}
	reportsSaveReportSettingsFlag = struct {
		Body string
	}{}
	reportsSendReportFlag = struct {
		Body string
	}{}
	reportsSendTestEmailFlag = struct {
		Body string
	}{}
	reportsUpdateReportFlag = struct {
		Body string
		ID   int64
	}{}
	samlCmd = &cobra.Command{
		Use:               "saml",
		DisableAutoGenTag: true,
		Args:              cobra.NoArgs,
		Run:               failIfEmptyArgs,
	}
	samlGetMetadataCmd = &cobra.Command{
		Use:               "get-metadata",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Saml.GetMetadataWithParams(
				&saml.GetMetadataParams{},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	samlGetSAMLLogoutCmd = &cobra.Command{
		Use:               "get-saml-logout",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			err = api.Saml.GetSAMLLogoutWithParams(
				&saml.GetSAMLLogoutParams{},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			fmt.Println("{}")
			return nil
		},
	}
	samlGetSLOCmd = &cobra.Command{
		Use:               "get-slo",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			err = api.Saml.GetSLOWithParams(
				&saml.GetSLOParams{},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			fmt.Println("{}")
			return nil
		},
	}
	samlPostACSCmd = &cobra.Command{
		Use:               "post-acs",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			err = api.Saml.PostACS(
				&saml.PostACSParams{
					RelayState: &samlPostACSFlag.RelayState,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			fmt.Println("{}")
			return nil
		},
	}
	samlPostSLOCmd = &cobra.Command{
		Use:               "post-slo",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			err = api.Saml.PostSLO(
				&saml.PostSLOParams{
					SAMLRequest:  &samlPostSLOFlag.SAMLRequest,
					SAMLResponse: &samlPostSLOFlag.SAMLResponse,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			fmt.Println("{}")
			return nil
		},
	}
	samlPostACSFlag = struct {
		RelayState string
	}{}
	samlPostSLOFlag = struct {
		SAMLRequest  string
		SAMLResponse string
	}{}
	searchCmd = &cobra.Command{
		Use:               "search",
		DisableAutoGenTag: true,
		Args:              cobra.NoArgs,
		Run:               failIfEmptyArgs,
	}
	searchListSortOptionsCmd = &cobra.Command{
		Use:               "list-sort-options",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Search.ListSortOptionsWithParams(
				&search.ListSortOptionsParams{},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	searchSearchCmd = &cobra.Command{
		Use:               "search",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Search.Search(
				&search.SearchParams{
					DashboardIds:  searchSearchFlag.DashboardIds,
					DashboardUIDs: searchSearchFlag.DashboardUIDs,
					Deleted:       &searchSearchFlag.Deleted,
					FolderIds:     searchSearchFlag.FolderIds,
					FolderUIDs:    searchSearchFlag.FolderUIDs,
					Limit:         &searchSearchFlag.Limit,
					Page:          &searchSearchFlag.Page,
					Permission:    &searchSearchFlag.Permission,
					Query:         &searchSearchFlag.Query,
					Sort:          &searchSearchFlag.Sort,
					Starred:       &searchSearchFlag.Starred,
					Tag:           searchSearchFlag.Tag,
					Type:          &searchSearchFlag.Type,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	searchSearchFlag = struct {
		DashboardIds  []int64
		DashboardUIDs []string
		Deleted       bool
		FolderIds     []int64
		FolderUIDs    []string
		Limit         int64
		Page          int64
		Permission    string
		Query         string
		Sort          string
		Starred       bool
		Tag           []string
		Type          string
	}{}
	serviceAccountsCmd = &cobra.Command{
		Use:               "service-accounts",
		DisableAutoGenTag: true,
		Args:              cobra.NoArgs,
		Run:               failIfEmptyArgs,
	}
	serviceAccountsCreateServiceAccountCmd = &cobra.Command{
		Use:               "create-service-account",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.CreateServiceAccountForm
			if err := getBodyParam(
				serviceAccountsCreateServiceAccountFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.ServiceAccounts.CreateServiceAccount(
				&service_accounts.CreateServiceAccountParams{
					Body: &body,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	serviceAccountsCreateTokenCmd = &cobra.Command{
		Use:               "create-token",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.AddServiceAccountTokenCommand
			if err := getBodyParam(
				serviceAccountsCreateTokenFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.ServiceAccounts.CreateToken(
				&service_accounts.CreateTokenParams{
					Body:             &body,
					ServiceAccountID: serviceAccountsCreateTokenFlag.ServiceAccountID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	serviceAccountsDeleteServiceAccountCmd = &cobra.Command{
		Use:               "delete-service-account",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.ServiceAccounts.DeleteServiceAccountWithParams(
				&service_accounts.DeleteServiceAccountParams{
					ServiceAccountID: serviceAccountsDeleteServiceAccountFlag.ServiceAccountID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	serviceAccountsDeleteTokenCmd = &cobra.Command{
		Use:               "delete-token",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.ServiceAccounts.DeleteTokenWithParams(
				&service_accounts.DeleteTokenParams{
					ServiceAccountID: serviceAccountsDeleteTokenFlag.ServiceAccountID,
					TokenID:          serviceAccountsDeleteTokenFlag.TokenID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	serviceAccountsListTokensCmd = &cobra.Command{
		Use:               "list-tokens",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.ServiceAccounts.ListTokensWithParams(
				&service_accounts.ListTokensParams{
					ServiceAccountID: serviceAccountsListTokensFlag.ServiceAccountID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	serviceAccountsRetrieveServiceAccountCmd = &cobra.Command{
		Use:               "retrieve-service-account",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.ServiceAccounts.RetrieveServiceAccountWithParams(
				&service_accounts.RetrieveServiceAccountParams{
					ServiceAccountID: serviceAccountsRetrieveServiceAccountFlag.ServiceAccountID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	serviceAccountsSearchOrgServiceAccountsWithPagingCmd = &cobra.Command{
		Use:               "search-org-service-accounts-with-paging",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.ServiceAccounts.SearchOrgServiceAccountsWithPaging(
				&service_accounts.SearchOrgServiceAccountsWithPagingParams{
					Disabled:      &serviceAccountsSearchOrgServiceAccountsWithPagingFlag.Disabled,
					ExpiredTokens: &serviceAccountsSearchOrgServiceAccountsWithPagingFlag.ExpiredTokens,
					Page:          &serviceAccountsSearchOrgServiceAccountsWithPagingFlag.Page,
					Perpage:       &serviceAccountsSearchOrgServiceAccountsWithPagingFlag.Perpage,
					Query:         &serviceAccountsSearchOrgServiceAccountsWithPagingFlag.Query,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	serviceAccountsUpdateServiceAccountCmd = &cobra.Command{
		Use:               "update-service-account",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.UpdateServiceAccountForm
			if err := getBodyParam(
				serviceAccountsUpdateServiceAccountFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.ServiceAccounts.UpdateServiceAccount(
				&service_accounts.UpdateServiceAccountParams{
					Body:             &body,
					ServiceAccountID: serviceAccountsUpdateServiceAccountFlag.ServiceAccountID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	serviceAccountsCreateServiceAccountFlag = struct {
		Body string
	}{}
	serviceAccountsCreateTokenFlag = struct {
		Body             string
		ServiceAccountID int64
	}{}
	serviceAccountsDeleteServiceAccountFlag = struct {
		ServiceAccountID int64
	}{}
	serviceAccountsDeleteTokenFlag = struct {
		ServiceAccountID int64
		TokenID          int64
	}{}
	serviceAccountsListTokensFlag = struct {
		ServiceAccountID int64
	}{}
	serviceAccountsRetrieveServiceAccountFlag = struct {
		ServiceAccountID int64
	}{}
	serviceAccountsSearchOrgServiceAccountsWithPagingFlag = struct {
		Disabled      bool
		ExpiredTokens bool
		Page          int64
		Perpage       int64
		Query         string
	}{}
	serviceAccountsUpdateServiceAccountFlag = struct {
		Body             string
		ServiceAccountID int64
	}{}
	signedInUserCmd = &cobra.Command{
		Use:               "signed-in-user",
		DisableAutoGenTag: true,
		Args:              cobra.NoArgs,
		Run:               failIfEmptyArgs,
	}
	signedInUserChangeUserPasswordCmd = &cobra.Command{
		Use:               "change-user-password",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.ChangeUserPasswordCommand
			if err := getBodyParam(
				signedInUserChangeUserPasswordFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.SignedInUser.ChangeUserPasswordWithParams(
				&signed_in_user.ChangeUserPasswordParams{
					Body: &body,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	signedInUserClearHelpFlagsCmd = &cobra.Command{
		Use:               "clear-help-flags",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.SignedInUser.ClearHelpFlagsWithParams(
				&signed_in_user.ClearHelpFlagsParams{},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	signedInUserGetSignedInUserOrgListCmd = &cobra.Command{
		Use:               "get-signed-in-user-org-list",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.SignedInUser.GetSignedInUserOrgListWithParams(
				&signed_in_user.GetSignedInUserOrgListParams{},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	signedInUserGetSignedInUserTeamListCmd = &cobra.Command{
		Use:               "get-signed-in-user-team-list",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.SignedInUser.GetSignedInUserTeamListWithParams(
				&signed_in_user.GetSignedInUserTeamListParams{},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	signedInUserGetSignedInUserCmd = &cobra.Command{
		Use:               "get-signed-in-user",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.SignedInUser.GetSignedInUserWithParams(
				&signed_in_user.GetSignedInUserParams{},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	signedInUserGetUserAuthTokensCmd = &cobra.Command{
		Use:               "get-user-auth-tokens",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.SignedInUser.GetUserAuthTokensWithParams(
				&signed_in_user.GetUserAuthTokensParams{},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	signedInUserGetUserQuotasCmd = &cobra.Command{
		Use:               "get-user-quotas",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.SignedInUser.GetUserQuotasWithParams(
				&signed_in_user.GetUserQuotasParams{},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	signedInUserRevokeUserAuthTokenCmd = &cobra.Command{
		Use:               "revoke-user-auth-token",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.RevokeAuthTokenCmd
			if err := getBodyParam(
				signedInUserRevokeUserAuthTokenFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.SignedInUser.RevokeUserAuthTokenWithParams(
				&signed_in_user.RevokeUserAuthTokenParams{
					Body: &body,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	signedInUserSetHelpFlagCmd = &cobra.Command{
		Use:               "set-help-flag",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.SignedInUser.SetHelpFlagWithParams(
				&signed_in_user.SetHelpFlagParams{
					FlagID: signedInUserSetHelpFlagFlag.FlagID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	signedInUserStarDashboardByUIDCmd = &cobra.Command{
		Use:               "star-dashboard-by-uid",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.SignedInUser.StarDashboardByUIDWithParams(
				&signed_in_user.StarDashboardByUIDParams{
					DashboardUID: signedInUserStarDashboardByUIDFlag.DashboardUID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	signedInUserStarDashboardCmd = &cobra.Command{
		Use:               "star-dashboard",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.SignedInUser.StarDashboardWithParams(
				&signed_in_user.StarDashboardParams{
					DashboardID: signedInUserStarDashboardFlag.DashboardID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	signedInUserUnstarDashboardByUIDCmd = &cobra.Command{
		Use:               "unstar-dashboard-by-uid",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.SignedInUser.UnstarDashboardByUIDWithParams(
				&signed_in_user.UnstarDashboardByUIDParams{
					DashboardUID: signedInUserUnstarDashboardByUIDFlag.DashboardUID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	signedInUserUnstarDashboardCmd = &cobra.Command{
		Use:               "unstar-dashboard",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.SignedInUser.UnstarDashboardWithParams(
				&signed_in_user.UnstarDashboardParams{
					DashboardID: signedInUserUnstarDashboardFlag.DashboardID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	signedInUserUpdateSignedInUserCmd = &cobra.Command{
		Use:               "update-signed-in-user",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.UpdateUserCommand
			if err := getBodyParam(
				signedInUserUpdateSignedInUserFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.SignedInUser.UpdateSignedInUserWithParams(
				&signed_in_user.UpdateSignedInUserParams{
					Body: &body,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	signedInUserUserSetUsingOrgCmd = &cobra.Command{
		Use:               "user-set-using-org",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.SignedInUser.UserSetUsingOrgWithParams(
				&signed_in_user.UserSetUsingOrgParams{
					OrgID: signedInUserUserSetUsingOrgFlag.OrgID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	signedInUserChangeUserPasswordFlag = struct {
		Body string
	}{}
	signedInUserRevokeUserAuthTokenFlag = struct {
		Body string
	}{}
	signedInUserSetHelpFlagFlag = struct {
		FlagID string
	}{}
	signedInUserStarDashboardByUIDFlag = struct {
		DashboardUID string
	}{}
	signedInUserStarDashboardFlag = struct {
		DashboardID string
	}{}
	signedInUserUnstarDashboardByUIDFlag = struct {
		DashboardUID string
	}{}
	signedInUserUnstarDashboardFlag = struct {
		DashboardID string
	}{}
	signedInUserUpdateSignedInUserFlag = struct {
		Body string
	}{}
	signedInUserUserSetUsingOrgFlag = struct {
		OrgID int64
	}{}
	signingKeysCmd = &cobra.Command{
		Use:               "signing-keys",
		DisableAutoGenTag: true,
		Args:              cobra.NoArgs,
		Run:               failIfEmptyArgs,
	}
	signingKeysRetrieveJWKSCmd = &cobra.Command{
		Use:               "retrieve-jwks",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.SigningKeys.RetrieveJWKSWithParams(
				&signing_keys.RetrieveJWKSParams{},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	snapshotsCmd = &cobra.Command{
		Use:               "snapshots",
		DisableAutoGenTag: true,
		Args:              cobra.NoArgs,
		Run:               failIfEmptyArgs,
	}
	snapshotsCreateDashboardSnapshotCmd = &cobra.Command{
		Use:               "create-dashboard-snapshot",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.CreateDashboardSnapshotCommand
			if err := getBodyParam(
				snapshotsCreateDashboardSnapshotFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.Snapshots.CreateDashboardSnapshotWithParams(
				&snapshots.CreateDashboardSnapshotParams{
					Body: &body,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	snapshotsDeleteDashboardSnapshotByDeleteKeyCmd = &cobra.Command{
		Use:               "delete-dashboard-snapshot-by-delete-key",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Snapshots.DeleteDashboardSnapshotByDeleteKeyWithParams(
				&snapshots.DeleteDashboardSnapshotByDeleteKeyParams{
					DeleteKey: snapshotsDeleteDashboardSnapshotByDeleteKeyFlag.DeleteKey,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	snapshotsDeleteDashboardSnapshotCmd = &cobra.Command{
		Use:               "delete-dashboard-snapshot",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Snapshots.DeleteDashboardSnapshotWithParams(
				&snapshots.DeleteDashboardSnapshotParams{
					Key: snapshotsDeleteDashboardSnapshotFlag.Key,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	snapshotsGetDashboardSnapshotCmd = &cobra.Command{
		Use:               "get-dashboard-snapshot",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Snapshots.GetDashboardSnapshotWithParams(
				&snapshots.GetDashboardSnapshotParams{
					Key: snapshotsGetDashboardSnapshotFlag.Key,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			fmt.Println(resp.String())
			return nil
		},
	}
	snapshotsGetSharingOptionsCmd = &cobra.Command{
		Use:               "get-sharing-options",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Snapshots.GetSharingOptionsWithParams(
				&snapshots.GetSharingOptionsParams{},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	snapshotsSearchDashboardSnapshotsCmd = &cobra.Command{
		Use:               "search-dashboard-snapshots",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Snapshots.SearchDashboardSnapshots(
				&snapshots.SearchDashboardSnapshotsParams{
					Limit: &snapshotsSearchDashboardSnapshotsFlag.Limit,
					Query: &snapshotsSearchDashboardSnapshotsFlag.Query,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	snapshotsCreateDashboardSnapshotFlag = struct {
		Body string
	}{}
	snapshotsDeleteDashboardSnapshotByDeleteKeyFlag = struct {
		DeleteKey string
	}{}
	snapshotsDeleteDashboardSnapshotFlag = struct {
		Key string
	}{}
	snapshotsGetDashboardSnapshotFlag = struct {
		Key string
	}{}
	snapshotsSearchDashboardSnapshotsFlag = struct {
		Limit int64
		Query string
	}{}
	ssoSettingsCmd = &cobra.Command{
		Use:               "sso-settings",
		DisableAutoGenTag: true,
		Args:              cobra.NoArgs,
		Run:               failIfEmptyArgs,
	}
	ssoSettingsGetProviderSettingsCmd = &cobra.Command{
		Use:               "get-provider-settings",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.SsoSettings.GetProviderSettingsWithParams(
				&sso_settings.GetProviderSettingsParams{
					Key: ssoSettingsGetProviderSettingsFlag.Key,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	ssoSettingsListAllProvidersSettingsCmd = &cobra.Command{
		Use:               "list-all-providers-settings",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.SsoSettings.ListAllProvidersSettingsWithParams(
				&sso_settings.ListAllProvidersSettingsParams{},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	ssoSettingsRemoveProviderSettingsCmd = &cobra.Command{
		Use:               "remove-provider-settings",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.SsoSettings.RemoveProviderSettingsWithParams(
				&sso_settings.RemoveProviderSettingsParams{
					Key: ssoSettingsRemoveProviderSettingsFlag.Key,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	ssoSettingsUpdateProviderSettingsCmd = &cobra.Command{
		Use:               "update-provider-settings",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.UpdateProviderSettingsParamsBody
			if err := getBodyParam(
				ssoSettingsUpdateProviderSettingsFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.SsoSettings.UpdateProviderSettingsWithParams(
				&sso_settings.UpdateProviderSettingsParams{
					Body: &body,
					Key:  ssoSettingsUpdateProviderSettingsFlag.Key,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	ssoSettingsGetProviderSettingsFlag = struct {
		Key string
	}{}
	ssoSettingsRemoveProviderSettingsFlag = struct {
		Key string
	}{}
	ssoSettingsUpdateProviderSettingsFlag = struct {
		Body string
		Key  string
	}{}
	syncTeamGroupsCmd = &cobra.Command{
		Use:               "sync-team-groups",
		DisableAutoGenTag: true,
		Args:              cobra.NoArgs,
		Run:               failIfEmptyArgs,
	}
	syncTeamGroupsAddTeamGroupAPICmd = &cobra.Command{
		Use:               "add-team-group-api",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.TeamGroupMapping
			if err := getBodyParam(
				syncTeamGroupsAddTeamGroupAPIFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.SyncTeamGroups.AddTeamGroupAPIWithParams(
				&sync_team_groups.AddTeamGroupAPIParams{
					Body:   &body,
					TeamID: syncTeamGroupsAddTeamGroupAPIFlag.TeamID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	syncTeamGroupsGetTeamGroupsAPICmd = &cobra.Command{
		Use:               "get-team-groups-api",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.SyncTeamGroups.GetTeamGroupsAPIWithParams(
				&sync_team_groups.GetTeamGroupsAPIParams{
					TeamID: syncTeamGroupsGetTeamGroupsAPIFlag.TeamID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	syncTeamGroupsRemoveTeamGroupAPIQueryCmd = &cobra.Command{
		Use:               "remove-team-group-api-query",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.SyncTeamGroups.RemoveTeamGroupAPIQuery(
				&sync_team_groups.RemoveTeamGroupAPIQueryParams{
					GroupID: &syncTeamGroupsRemoveTeamGroupAPIQueryFlag.GroupID,
					TeamID:  syncTeamGroupsRemoveTeamGroupAPIQueryFlag.TeamID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	syncTeamGroupsAddTeamGroupAPIFlag = struct {
		Body   string
		TeamID int64
	}{}
	syncTeamGroupsGetTeamGroupsAPIFlag = struct {
		TeamID int64
	}{}
	syncTeamGroupsRemoveTeamGroupAPIQueryFlag = struct {
		GroupID string
		TeamID  int64
	}{}
	teamsCmd = &cobra.Command{
		Use:               "teams",
		DisableAutoGenTag: true,
		Args:              cobra.NoArgs,
		Run:               failIfEmptyArgs,
	}
	teamsAddTeamMemberCmd = &cobra.Command{
		Use:               "add-team-member",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.AddTeamMemberCommand
			if err := getBodyParam(
				teamsAddTeamMemberFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.Teams.AddTeamMemberWithParams(
				&teams.AddTeamMemberParams{
					Body:   &body,
					TeamID: teamsAddTeamMemberFlag.TeamID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	teamsCreateTeamCmd = &cobra.Command{
		Use:               "create-team",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.CreateTeamCommand
			if err := getBodyParam(
				teamsCreateTeamFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.Teams.CreateTeamWithParams(
				&teams.CreateTeamParams{
					Body: &body,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	teamsGetTeamMembersCmd = &cobra.Command{
		Use:               "get-team-members",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Teams.GetTeamMembersWithParams(
				&teams.GetTeamMembersParams{
					TeamID: teamsGetTeamMembersFlag.TeamID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	teamsGetTeamPreferencesCmd = &cobra.Command{
		Use:               "get-team-preferences",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Teams.GetTeamPreferencesWithParams(
				&teams.GetTeamPreferencesParams{
					TeamID: teamsGetTeamPreferencesFlag.TeamID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	teamsRemoveTeamMemberCmd = &cobra.Command{
		Use:               "remove-team-member",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Teams.RemoveTeamMemberWithParams(
				&teams.RemoveTeamMemberParams{
					TeamID: teamsRemoveTeamMemberFlag.TeamID,
					UserID: teamsRemoveTeamMemberFlag.UserID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	teamsSearchTeamsCmd = &cobra.Command{
		Use:               "search-teams",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Teams.SearchTeams(
				&teams.SearchTeamsParams{
					Name:    &teamsSearchTeamsFlag.Name,
					Page:    &teamsSearchTeamsFlag.Page,
					Perpage: &teamsSearchTeamsFlag.Perpage,
					Query:   &teamsSearchTeamsFlag.Query,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	teamsSetTeamMembershipsCmd = &cobra.Command{
		Use:               "set-team-memberships",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.SetTeamMembershipsCommand
			if err := getBodyParam(
				teamsSetTeamMembershipsFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.Teams.SetTeamMembershipsWithParams(
				&teams.SetTeamMembershipsParams{
					Body:   &body,
					TeamID: teamsSetTeamMembershipsFlag.TeamID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	teamsUpdateTeamMemberCmd = &cobra.Command{
		Use:               "update-team-member",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.UpdateTeamMemberCommand
			if err := getBodyParam(
				teamsUpdateTeamMemberFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.Teams.UpdateTeamMember(
				&teams.UpdateTeamMemberParams{
					Body:   &body,
					TeamID: teamsUpdateTeamMemberFlag.TeamID,
					UserID: teamsUpdateTeamMemberFlag.UserID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	teamsUpdateTeamPreferencesCmd = &cobra.Command{
		Use:               "update-team-preferences",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.UpdatePrefsCmd
			if err := getBodyParam(
				teamsUpdateTeamPreferencesFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.Teams.UpdateTeamPreferencesWithParams(
				&teams.UpdateTeamPreferencesParams{
					Body:   &body,
					TeamID: teamsUpdateTeamPreferencesFlag.TeamID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	teamsUpdateTeamCmd = &cobra.Command{
		Use:               "update-team",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.UpdateTeamCommand
			if err := getBodyParam(
				teamsUpdateTeamFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.Teams.UpdateTeamWithParams(
				&teams.UpdateTeamParams{
					Body:   &body,
					TeamID: teamsUpdateTeamFlag.TeamID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	teamsAddTeamMemberFlag = struct {
		Body   string
		TeamID string
	}{}
	teamsCreateTeamFlag = struct {
		Body string
	}{}
	teamsGetTeamMembersFlag = struct {
		TeamID string
	}{}
	teamsGetTeamPreferencesFlag = struct {
		TeamID string
	}{}
	teamsRemoveTeamMemberFlag = struct {
		TeamID string
		UserID int64
	}{}
	teamsSearchTeamsFlag = struct {
		Name    string
		Page    int64
		Perpage int64
		Query   string
	}{}
	teamsSetTeamMembershipsFlag = struct {
		Body   string
		TeamID string
	}{}
	teamsUpdateTeamMemberFlag = struct {
		Body   string
		TeamID string
		UserID int64
	}{}
	teamsUpdateTeamPreferencesFlag = struct {
		Body   string
		TeamID string
	}{}
	teamsUpdateTeamFlag = struct {
		Body   string
		TeamID string
	}{}
	userCmd = &cobra.Command{
		Use:               "user",
		DisableAutoGenTag: true,
		Args:              cobra.NoArgs,
		Run:               failIfEmptyArgs,
	}
	userUpdateUserEmailCmd = &cobra.Command{
		Use:               "update-user-email",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			err = api.User.UpdateUserEmailWithParams(
				&user.UpdateUserEmailParams{},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			fmt.Println("{}")
			return nil
		},
	}
	userPreferencesCmd = &cobra.Command{
		Use:               "user-preferences",
		DisableAutoGenTag: true,
		Args:              cobra.NoArgs,
		Run:               failIfEmptyArgs,
	}
	userPreferencesGetUserPreferencesCmd = &cobra.Command{
		Use:               "get-user-preferences",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.UserPreferences.GetUserPreferencesWithParams(
				&user_preferences.GetUserPreferencesParams{},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	userPreferencesPatchUserPreferencesCmd = &cobra.Command{
		Use:               "patch-user-preferences",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.PatchPrefsCmd
			if err := getBodyParam(
				userPreferencesPatchUserPreferencesFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.UserPreferences.PatchUserPreferencesWithParams(
				&user_preferences.PatchUserPreferencesParams{
					Body: &body,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	userPreferencesUpdateUserPreferencesCmd = &cobra.Command{
		Use:               "update-user-preferences",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.UpdatePrefsCmd
			if err := getBodyParam(
				userPreferencesUpdateUserPreferencesFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.UserPreferences.UpdateUserPreferencesWithParams(
				&user_preferences.UpdateUserPreferencesParams{
					Body: &body,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	userPreferencesPatchUserPreferencesFlag = struct {
		Body string
	}{}
	userPreferencesUpdateUserPreferencesFlag = struct {
		Body string
	}{}
	usersCmd = &cobra.Command{
		Use:               "users",
		DisableAutoGenTag: true,
		Args:              cobra.NoArgs,
		Run:               failIfEmptyArgs,
	}
	usersGetUserByLoginOrEmailCmd = &cobra.Command{
		Use:               "get-user-by-login-or-email",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Users.GetUserByLoginOrEmailWithParams(
				&users.GetUserByLoginOrEmailParams{
					LoginOrEmail: usersGetUserByLoginOrEmailFlag.LoginOrEmail,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	usersGetUserOrgListCmd = &cobra.Command{
		Use:               "get-user-org-list",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Users.GetUserOrgListWithParams(
				&users.GetUserOrgListParams{
					UserID: usersGetUserOrgListFlag.UserID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	usersGetUserTeamsCmd = &cobra.Command{
		Use:               "get-user-teams",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Users.GetUserTeamsWithParams(
				&users.GetUserTeamsParams{
					UserID: usersGetUserTeamsFlag.UserID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	usersSearchUsersCmd = &cobra.Command{
		Use:               "search-users",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Users.SearchUsers(
				&users.SearchUsersParams{
					Page:    &usersSearchUsersFlag.Page,
					Perpage: &usersSearchUsersFlag.Perpage,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	usersSearchUsersWithPagingCmd = &cobra.Command{
		Use:               "search-users-with-paging",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			resp, err := api.Users.SearchUsersWithPagingWithParams(
				&users.SearchUsersWithPagingParams{},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	usersUpdateUserCmd = &cobra.Command{
		Use:               "update-user",
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			api, err := gfClient()
			if err != nil {
				return err
			}
			var body models.UpdateUserCommand
			if err := getBodyParam(
				usersUpdateUserFlag.Body,
				&body,
			); err != nil {
				return err
			}
			resp, err := api.Users.UpdateUserWithParams(
				&users.UpdateUserParams{
					Body:   &body,
					UserID: usersUpdateUserFlag.UserID,
				},
			)
			if err != nil {
				if pe, ok := err.(getPayloadError); ok {
					if err := printPayload(pe.GetPayload()); err != nil {
						return err
					}
					return err
				}
				return err
			}
			return printPayload(resp.GetPayload())
		},
	}
	usersGetUserByLoginOrEmailFlag = struct {
		LoginOrEmail string
	}{}
	usersGetUserOrgListFlag = struct {
		UserID int64
	}{}
	usersGetUserTeamsFlag = struct {
		UserID int64
	}{}
	usersSearchUsersFlag = struct {
		Page    int64
		Perpage int64
	}{}
	usersUpdateUserFlag = struct {
		Body   string
		UserID int64
	}{}
)

func init() {
	rootCmd.AddCommand(accessControlCmd)
	accessControlAddTeamRoleCmd.Flags().
		StringVar(
			&accessControlAddTeamRoleFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	accessControlAddTeamRoleCmd.MarkFlagRequired("body")
	accessControlAddTeamRoleCmd.Flags().
		Int64Var(
			&accessControlAddTeamRoleFlag.TeamID,
			"team-id",
			0,
			"TeamID",
		)

	accessControlAddTeamRoleCmd.MarkFlagRequired("team-id")
	accessControlCmd.AddCommand(accessControlAddTeamRoleCmd)
	accessControlAddUserRoleCmd.Flags().
		StringVar(
			&accessControlAddUserRoleFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	accessControlAddUserRoleCmd.MarkFlagRequired("body")
	accessControlAddUserRoleCmd.Flags().
		Int64Var(
			&accessControlAddUserRoleFlag.UserID,
			"user-id",
			0,
			"UserID",
		)

	accessControlAddUserRoleCmd.MarkFlagRequired("user-id")
	accessControlCmd.AddCommand(accessControlAddUserRoleCmd)
	accessControlCreateRoleCmd.Flags().
		StringVar(
			&accessControlCreateRoleFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	accessControlCreateRoleCmd.MarkFlagRequired("body")
	accessControlCmd.AddCommand(accessControlCreateRoleCmd)
	accessControlDeleteRoleCmd.Flags().
		BoolVar(
			&accessControlDeleteRoleFlag.Force,
			"force",
			false,
			"Force",
		)

	accessControlDeleteRoleCmd.Flags().
		BoolVar(
			&accessControlDeleteRoleFlag.Global,
			"global",
			false,
			"Global",
		)

	accessControlDeleteRoleCmd.Flags().
		StringVar(
			&accessControlDeleteRoleFlag.RoleUID,
			"role-uid",
			"",
			"RoleUID",
		)

	accessControlDeleteRoleCmd.MarkFlagRequired("role-uid")
	accessControlCmd.AddCommand(accessControlDeleteRoleCmd)
	accessControlCmd.AddCommand(accessControlGetAccessControlStatusCmd)
	accessControlGetResourceDescriptionCmd.Flags().
		StringVar(
			&accessControlGetResourceDescriptionFlag.Resource,
			"resource",
			"",
			"Resource",
		)

	accessControlGetResourceDescriptionCmd.MarkFlagRequired("resource")
	accessControlCmd.AddCommand(accessControlGetResourceDescriptionCmd)
	accessControlGetResourcePermissionsCmd.Flags().
		StringVar(
			&accessControlGetResourcePermissionsFlag.Resource,
			"resource",
			"",
			"Resource",
		)

	accessControlGetResourcePermissionsCmd.MarkFlagRequired("resource")
	accessControlGetResourcePermissionsCmd.Flags().
		StringVar(
			&accessControlGetResourcePermissionsFlag.ResourceID,
			"resource-id",
			"",
			"ResourceID",
		)

	accessControlGetResourcePermissionsCmd.MarkFlagRequired("resource-id")
	accessControlCmd.AddCommand(accessControlGetResourcePermissionsCmd)
	accessControlGetRoleAssignmentsCmd.Flags().
		StringVar(
			&accessControlGetRoleAssignmentsFlag.RoleUID,
			"role-uid",
			"",
			"RoleUID",
		)

	accessControlGetRoleAssignmentsCmd.MarkFlagRequired("role-uid")
	accessControlCmd.AddCommand(accessControlGetRoleAssignmentsCmd)
	accessControlGetRoleCmd.Flags().
		StringVar(
			&accessControlGetRoleFlag.RoleUID,
			"role-uid",
			"",
			"RoleUID",
		)

	accessControlGetRoleCmd.MarkFlagRequired("role-uid")
	accessControlCmd.AddCommand(accessControlGetRoleCmd)
	accessControlListRolesCmd.Flags().
		BoolVar(
			&accessControlListRolesFlag.Delegatable,
			"delegatable",
			false,
			"Delegatable",
		)

	accessControlListRolesCmd.Flags().
		BoolVar(
			&accessControlListRolesFlag.IncludeHidden,
			"include-hidden",
			false,
			"IncludeHidden",
		)

	accessControlCmd.AddCommand(accessControlListRolesCmd)
	accessControlListTeamRolesCmd.Flags().
		Int64Var(
			&accessControlListTeamRolesFlag.TeamID,
			"team-id",
			0,
			"TeamID",
		)

	accessControlListTeamRolesCmd.MarkFlagRequired("team-id")
	accessControlCmd.AddCommand(accessControlListTeamRolesCmd)
	accessControlListTeamsRolesCmd.Flags().
		StringVar(
			&accessControlListTeamsRolesFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	accessControlListTeamsRolesCmd.MarkFlagRequired("body")
	accessControlCmd.AddCommand(accessControlListTeamsRolesCmd)
	accessControlListUserRolesCmd.Flags().
		Int64Var(
			&accessControlListUserRolesFlag.UserID,
			"user-id",
			0,
			"UserID",
		)

	accessControlListUserRolesCmd.MarkFlagRequired("user-id")
	accessControlCmd.AddCommand(accessControlListUserRolesCmd)
	accessControlListUsersRolesCmd.Flags().
		StringVar(
			&accessControlListUsersRolesFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	accessControlListUsersRolesCmd.MarkFlagRequired("body")
	accessControlCmd.AddCommand(accessControlListUsersRolesCmd)
	accessControlRemoveTeamRoleCmd.Flags().
		StringVar(
			&accessControlRemoveTeamRoleFlag.RoleUID,
			"role-uid",
			"",
			"RoleUID",
		)

	accessControlRemoveTeamRoleCmd.MarkFlagRequired("role-uid")
	accessControlRemoveTeamRoleCmd.Flags().
		Int64Var(
			&accessControlRemoveTeamRoleFlag.TeamID,
			"team-id",
			0,
			"TeamID",
		)

	accessControlRemoveTeamRoleCmd.MarkFlagRequired("team-id")
	accessControlCmd.AddCommand(accessControlRemoveTeamRoleCmd)
	accessControlRemoveUserRoleCmd.Flags().
		BoolVar(
			&accessControlRemoveUserRoleFlag.Global,
			"global",
			false,
			"Global",
		)

	accessControlRemoveUserRoleCmd.Flags().
		StringVar(
			&accessControlRemoveUserRoleFlag.RoleUID,
			"role-uid",
			"",
			"RoleUID",
		)

	accessControlRemoveUserRoleCmd.MarkFlagRequired("role-uid")
	accessControlRemoveUserRoleCmd.Flags().
		Int64Var(
			&accessControlRemoveUserRoleFlag.UserID,
			"user-id",
			0,
			"UserID",
		)

	accessControlRemoveUserRoleCmd.MarkFlagRequired("user-id")
	accessControlCmd.AddCommand(accessControlRemoveUserRoleCmd)
	accessControlSetResourcePermissionsCmd.Flags().
		StringVar(
			&accessControlSetResourcePermissionsFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	accessControlSetResourcePermissionsCmd.MarkFlagRequired("body")
	accessControlSetResourcePermissionsCmd.Flags().
		StringVar(
			&accessControlSetResourcePermissionsFlag.Resource,
			"resource",
			"",
			"Resource",
		)

	accessControlSetResourcePermissionsCmd.MarkFlagRequired("resource")
	accessControlSetResourcePermissionsCmd.Flags().
		StringVar(
			&accessControlSetResourcePermissionsFlag.ResourceID,
			"resource-id",
			"",
			"ResourceID",
		)

	accessControlSetResourcePermissionsCmd.MarkFlagRequired("resource-id")
	accessControlCmd.AddCommand(accessControlSetResourcePermissionsCmd)
	accessControlSetResourcePermissionsForBuiltInRoleCmd.Flags().
		StringVar(
			&accessControlSetResourcePermissionsForBuiltInRoleFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	accessControlSetResourcePermissionsForBuiltInRoleCmd.MarkFlagRequired("body")
	accessControlSetResourcePermissionsForBuiltInRoleCmd.Flags().
		StringVar(
			&accessControlSetResourcePermissionsForBuiltInRoleFlag.BuiltInRole,
			"built-in-role",
			"",
			"BuiltInRole",
		)

	accessControlSetResourcePermissionsForBuiltInRoleCmd.MarkFlagRequired("built-in-role")
	accessControlSetResourcePermissionsForBuiltInRoleCmd.Flags().
		StringVar(
			&accessControlSetResourcePermissionsForBuiltInRoleFlag.Resource,
			"resource",
			"",
			"Resource",
		)

	accessControlSetResourcePermissionsForBuiltInRoleCmd.MarkFlagRequired("resource")
	accessControlSetResourcePermissionsForBuiltInRoleCmd.Flags().
		StringVar(
			&accessControlSetResourcePermissionsForBuiltInRoleFlag.ResourceID,
			"resource-id",
			"",
			"ResourceID",
		)

	accessControlSetResourcePermissionsForBuiltInRoleCmd.MarkFlagRequired("resource-id")
	accessControlCmd.AddCommand(accessControlSetResourcePermissionsForBuiltInRoleCmd)
	accessControlSetResourcePermissionsForTeamCmd.Flags().
		StringVar(
			&accessControlSetResourcePermissionsForTeamFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	accessControlSetResourcePermissionsForTeamCmd.MarkFlagRequired("body")
	accessControlSetResourcePermissionsForTeamCmd.Flags().
		StringVar(
			&accessControlSetResourcePermissionsForTeamFlag.Resource,
			"resource",
			"",
			"Resource",
		)

	accessControlSetResourcePermissionsForTeamCmd.MarkFlagRequired("resource")
	accessControlSetResourcePermissionsForTeamCmd.Flags().
		StringVar(
			&accessControlSetResourcePermissionsForTeamFlag.ResourceID,
			"resource-id",
			"",
			"ResourceID",
		)

	accessControlSetResourcePermissionsForTeamCmd.MarkFlagRequired("resource-id")
	accessControlSetResourcePermissionsForTeamCmd.Flags().
		Int64Var(
			&accessControlSetResourcePermissionsForTeamFlag.TeamID,
			"team-id",
			0,
			"TeamID",
		)

	accessControlSetResourcePermissionsForTeamCmd.MarkFlagRequired("team-id")
	accessControlCmd.AddCommand(accessControlSetResourcePermissionsForTeamCmd)
	accessControlSetResourcePermissionsForUserCmd.Flags().
		StringVar(
			&accessControlSetResourcePermissionsForUserFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	accessControlSetResourcePermissionsForUserCmd.MarkFlagRequired("body")
	accessControlSetResourcePermissionsForUserCmd.Flags().
		StringVar(
			&accessControlSetResourcePermissionsForUserFlag.Resource,
			"resource",
			"",
			"Resource",
		)

	accessControlSetResourcePermissionsForUserCmd.MarkFlagRequired("resource")
	accessControlSetResourcePermissionsForUserCmd.Flags().
		StringVar(
			&accessControlSetResourcePermissionsForUserFlag.ResourceID,
			"resource-id",
			"",
			"ResourceID",
		)

	accessControlSetResourcePermissionsForUserCmd.MarkFlagRequired("resource-id")
	accessControlSetResourcePermissionsForUserCmd.Flags().
		Int64Var(
			&accessControlSetResourcePermissionsForUserFlag.UserID,
			"user-id",
			0,
			"UserID",
		)

	accessControlSetResourcePermissionsForUserCmd.MarkFlagRequired("user-id")
	accessControlCmd.AddCommand(accessControlSetResourcePermissionsForUserCmd)
	accessControlSetRoleAssignmentsCmd.Flags().
		StringVar(
			&accessControlSetRoleAssignmentsFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	accessControlSetRoleAssignmentsCmd.MarkFlagRequired("body")
	accessControlSetRoleAssignmentsCmd.Flags().
		StringVar(
			&accessControlSetRoleAssignmentsFlag.RoleUID,
			"role-uid",
			"",
			"RoleUID",
		)

	accessControlSetRoleAssignmentsCmd.MarkFlagRequired("role-uid")
	accessControlCmd.AddCommand(accessControlSetRoleAssignmentsCmd)
	accessControlSetTeamRolesCmd.Flags().
		Int64Var(
			&accessControlSetTeamRolesFlag.TeamID,
			"team-id",
			0,
			"TeamID",
		)

	accessControlSetTeamRolesCmd.MarkFlagRequired("team-id")
	accessControlCmd.AddCommand(accessControlSetTeamRolesCmd)
	accessControlSetUserRolesCmd.Flags().
		StringVar(
			&accessControlSetUserRolesFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	accessControlSetUserRolesCmd.MarkFlagRequired("body")
	accessControlSetUserRolesCmd.Flags().
		Int64Var(
			&accessControlSetUserRolesFlag.UserID,
			"user-id",
			0,
			"UserID",
		)

	accessControlSetUserRolesCmd.MarkFlagRequired("user-id")
	accessControlCmd.AddCommand(accessControlSetUserRolesCmd)
	accessControlUpdateRoleCmd.Flags().
		StringVar(
			&accessControlUpdateRoleFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	accessControlUpdateRoleCmd.MarkFlagRequired("body")
	accessControlUpdateRoleCmd.Flags().
		StringVar(
			&accessControlUpdateRoleFlag.RoleUID,
			"role-uid",
			"",
			"RoleUID",
		)

	accessControlUpdateRoleCmd.MarkFlagRequired("role-uid")
	accessControlCmd.AddCommand(accessControlUpdateRoleCmd)
	rootCmd.AddCommand(accessControlProvisioningCmd)
	accessControlProvisioningCmd.AddCommand(accessControlProvisioningAdminProvisioningReloadAccessControlCmd)
	rootCmd.AddCommand(adminCmd)
	adminCmd.AddCommand(adminAdminGetSettingsCmd)
	adminCmd.AddCommand(adminAdminGetStatsCmd)
	rootCmd.AddCommand(adminLdapCmd)
	adminLdapCmd.AddCommand(adminLdapGetLDAPStatusCmd)
	adminLdapGetUserFromLDAPCmd.Flags().
		StringVar(
			&adminLdapGetUserFromLDAPFlag.UserName,
			"user-name",
			"",
			"UserName",
		)

	adminLdapGetUserFromLDAPCmd.MarkFlagRequired("user-name")
	adminLdapCmd.AddCommand(adminLdapGetUserFromLDAPCmd)
	adminLdapPostSyncUserWithLDAPCmd.Flags().
		Int64Var(
			&adminLdapPostSyncUserWithLDAPFlag.UserID,
			"user-id",
			0,
			"UserID",
		)

	adminLdapPostSyncUserWithLDAPCmd.MarkFlagRequired("user-id")
	adminLdapCmd.AddCommand(adminLdapPostSyncUserWithLDAPCmd)
	adminLdapCmd.AddCommand(adminLdapReloadLDAPCfgCmd)
	rootCmd.AddCommand(adminProvisioningCmd)
	adminProvisioningCmd.AddCommand(adminProvisioningAdminProvisioningReloadDashboardsCmd)
	adminProvisioningCmd.AddCommand(adminProvisioningAdminProvisioningReloadDatasourcesCmd)
	adminProvisioningCmd.AddCommand(adminProvisioningAdminProvisioningReloadPluginsCmd)
	rootCmd.AddCommand(adminUsersCmd)
	adminUsersAdminCreateUserCmd.Flags().
		StringVar(
			&adminUsersAdminCreateUserFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	adminUsersAdminCreateUserCmd.MarkFlagRequired("body")
	adminUsersCmd.AddCommand(adminUsersAdminCreateUserCmd)
	adminUsersAdminDeleteUserCmd.Flags().
		Int64Var(
			&adminUsersAdminDeleteUserFlag.UserID,
			"user-id",
			0,
			"UserID",
		)

	adminUsersAdminDeleteUserCmd.MarkFlagRequired("user-id")
	adminUsersCmd.AddCommand(adminUsersAdminDeleteUserCmd)
	adminUsersAdminDisableUserCmd.Flags().
		Int64Var(
			&adminUsersAdminDisableUserFlag.UserID,
			"user-id",
			0,
			"UserID",
		)

	adminUsersAdminDisableUserCmd.MarkFlagRequired("user-id")
	adminUsersCmd.AddCommand(adminUsersAdminDisableUserCmd)
	adminUsersAdminEnableUserCmd.Flags().
		Int64Var(
			&adminUsersAdminEnableUserFlag.UserID,
			"user-id",
			0,
			"UserID",
		)

	adminUsersAdminEnableUserCmd.MarkFlagRequired("user-id")
	adminUsersCmd.AddCommand(adminUsersAdminEnableUserCmd)
	adminUsersAdminGetUserAuthTokensCmd.Flags().
		Int64Var(
			&adminUsersAdminGetUserAuthTokensFlag.UserID,
			"user-id",
			0,
			"UserID",
		)

	adminUsersAdminGetUserAuthTokensCmd.MarkFlagRequired("user-id")
	adminUsersCmd.AddCommand(adminUsersAdminGetUserAuthTokensCmd)
	adminUsersAdminLogoutUserCmd.Flags().
		Int64Var(
			&adminUsersAdminLogoutUserFlag.UserID,
			"user-id",
			0,
			"UserID",
		)

	adminUsersAdminLogoutUserCmd.MarkFlagRequired("user-id")
	adminUsersCmd.AddCommand(adminUsersAdminLogoutUserCmd)
	adminUsersAdminRevokeUserAuthTokenCmd.Flags().
		StringVar(
			&adminUsersAdminRevokeUserAuthTokenFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	adminUsersAdminRevokeUserAuthTokenCmd.MarkFlagRequired("body")
	adminUsersAdminRevokeUserAuthTokenCmd.Flags().
		Int64Var(
			&adminUsersAdminRevokeUserAuthTokenFlag.UserID,
			"user-id",
			0,
			"UserID",
		)

	adminUsersAdminRevokeUserAuthTokenCmd.MarkFlagRequired("user-id")
	adminUsersCmd.AddCommand(adminUsersAdminRevokeUserAuthTokenCmd)
	adminUsersAdminUpdateUserPasswordCmd.Flags().
		StringVar(
			&adminUsersAdminUpdateUserPasswordFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	adminUsersAdminUpdateUserPasswordCmd.MarkFlagRequired("body")
	adminUsersAdminUpdateUserPasswordCmd.Flags().
		Int64Var(
			&adminUsersAdminUpdateUserPasswordFlag.UserID,
			"user-id",
			0,
			"UserID",
		)

	adminUsersAdminUpdateUserPasswordCmd.MarkFlagRequired("user-id")
	adminUsersCmd.AddCommand(adminUsersAdminUpdateUserPasswordCmd)
	adminUsersAdminUpdateUserPermissionsCmd.Flags().
		StringVar(
			&adminUsersAdminUpdateUserPermissionsFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	adminUsersAdminUpdateUserPermissionsCmd.MarkFlagRequired("body")
	adminUsersAdminUpdateUserPermissionsCmd.Flags().
		Int64Var(
			&adminUsersAdminUpdateUserPermissionsFlag.UserID,
			"user-id",
			0,
			"UserID",
		)

	adminUsersAdminUpdateUserPermissionsCmd.MarkFlagRequired("user-id")
	adminUsersCmd.AddCommand(adminUsersAdminUpdateUserPermissionsCmd)
	adminUsersGetUserQuotaCmd.Flags().
		Int64Var(
			&adminUsersGetUserQuotaFlag.UserID,
			"user-id",
			0,
			"UserID",
		)

	adminUsersGetUserQuotaCmd.MarkFlagRequired("user-id")
	adminUsersCmd.AddCommand(adminUsersGetUserQuotaCmd)
	adminUsersUpdateUserQuotaCmd.Flags().
		StringVar(
			&adminUsersUpdateUserQuotaFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	adminUsersUpdateUserQuotaCmd.MarkFlagRequired("body")
	adminUsersUpdateUserQuotaCmd.Flags().
		StringVar(
			&adminUsersUpdateUserQuotaFlag.QuotaTarget,
			"quota-target",
			"",
			"QuotaTarget",
		)

	adminUsersUpdateUserQuotaCmd.MarkFlagRequired("quota-target")
	adminUsersUpdateUserQuotaCmd.Flags().
		Int64Var(
			&adminUsersUpdateUserQuotaFlag.UserID,
			"user-id",
			0,
			"UserID",
		)

	adminUsersUpdateUserQuotaCmd.MarkFlagRequired("user-id")
	adminUsersCmd.AddCommand(adminUsersUpdateUserQuotaCmd)
	rootCmd.AddCommand(annotationsCmd)
	annotationsGetAnnotationTagsCmd.Flags().
		StringVar(
			&annotationsGetAnnotationTagsFlag.Limit,
			"limit",
			"",
			"Limit",
		)

	annotationsGetAnnotationTagsCmd.Flags().
		StringVar(
			&annotationsGetAnnotationTagsFlag.Tag,
			"tag",
			"",
			"Tag",
		)

	annotationsCmd.AddCommand(annotationsGetAnnotationTagsCmd)
	annotationsGetAnnotationsCmd.Flags().
		Int64Var(
			&annotationsGetAnnotationsFlag.AlertID,
			"alert-id",
			0,
			"AlertID",
		)

	annotationsGetAnnotationsCmd.Flags().
		Int64Var(
			&annotationsGetAnnotationsFlag.DashboardID,
			"dashboard-id",
			0,
			"DashboardID",
		)

	annotationsGetAnnotationsCmd.Flags().
		StringVar(
			&annotationsGetAnnotationsFlag.DashboardUID,
			"dashboard-uid",
			"",
			"DashboardUID",
		)

	annotationsGetAnnotationsCmd.Flags().
		Int64Var(
			&annotationsGetAnnotationsFlag.From,
			"from",
			0,
			"From",
		)

	annotationsGetAnnotationsCmd.Flags().
		Int64Var(
			&annotationsGetAnnotationsFlag.Limit,
			"limit",
			0,
			"Limit",
		)

	annotationsGetAnnotationsCmd.Flags().
		BoolVar(
			&annotationsGetAnnotationsFlag.MatchAny,
			"match-any",
			false,
			"MatchAny",
		)

	annotationsGetAnnotationsCmd.Flags().
		Int64Var(
			&annotationsGetAnnotationsFlag.PanelID,
			"panel-id",
			0,
			"PanelID",
		)

	annotationsGetAnnotationsCmd.Flags().
		StringSliceVar(
			&annotationsGetAnnotationsFlag.Tags,
			"tags",
			[]string{},
			"Tags",
		)

	annotationsGetAnnotationsCmd.Flags().
		Int64Var(
			&annotationsGetAnnotationsFlag.To,
			"to",
			0,
			"To",
		)

	annotationsGetAnnotationsCmd.Flags().
		StringVar(
			&annotationsGetAnnotationsFlag.Type,
			"type",
			"",
			"Type",
		)

	annotationsGetAnnotationsCmd.Flags().
		Int64Var(
			&annotationsGetAnnotationsFlag.UserID,
			"user-id",
			0,
			"UserID",
		)

	annotationsCmd.AddCommand(annotationsGetAnnotationsCmd)
	annotationsMassDeleteAnnotationsCmd.Flags().
		StringVar(
			&annotationsMassDeleteAnnotationsFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	annotationsMassDeleteAnnotationsCmd.MarkFlagRequired("body")
	annotationsCmd.AddCommand(annotationsMassDeleteAnnotationsCmd)
	annotationsPatchAnnotationCmd.Flags().
		StringVar(
			&annotationsPatchAnnotationFlag.AnnotationID,
			"annotation-id",
			"",
			"AnnotationID",
		)

	annotationsPatchAnnotationCmd.MarkFlagRequired("annotation-id")
	annotationsPatchAnnotationCmd.Flags().
		StringVar(
			&annotationsPatchAnnotationFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	annotationsPatchAnnotationCmd.MarkFlagRequired("body")
	annotationsCmd.AddCommand(annotationsPatchAnnotationCmd)
	annotationsPostAnnotationCmd.Flags().
		StringVar(
			&annotationsPostAnnotationFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	annotationsPostAnnotationCmd.MarkFlagRequired("body")
	annotationsCmd.AddCommand(annotationsPostAnnotationCmd)
	annotationsPostGraphiteAnnotationCmd.Flags().
		StringVar(
			&annotationsPostGraphiteAnnotationFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	annotationsPostGraphiteAnnotationCmd.MarkFlagRequired("body")
	annotationsCmd.AddCommand(annotationsPostGraphiteAnnotationCmd)
	annotationsUpdateAnnotationCmd.Flags().
		StringVar(
			&annotationsUpdateAnnotationFlag.AnnotationID,
			"annotation-id",
			"",
			"AnnotationID",
		)

	annotationsUpdateAnnotationCmd.MarkFlagRequired("annotation-id")
	annotationsUpdateAnnotationCmd.Flags().
		StringVar(
			&annotationsUpdateAnnotationFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	annotationsUpdateAnnotationCmd.MarkFlagRequired("body")
	annotationsCmd.AddCommand(annotationsUpdateAnnotationCmd)
	rootCmd.AddCommand(apiKeysCmd)
	apiKeysAddAPIkeyCmd.Flags().
		StringVar(
			&apiKeysAddAPIkeyFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	apiKeysAddAPIkeyCmd.MarkFlagRequired("body")
	apiKeysCmd.AddCommand(apiKeysAddAPIkeyCmd)
	apiKeysDeleteAPIkeyCmd.Flags().
		Int64Var(
			&apiKeysDeleteAPIkeyFlag.ID,
			"id",
			0,
			"ID",
		)

	apiKeysDeleteAPIkeyCmd.MarkFlagRequired("id")
	apiKeysCmd.AddCommand(apiKeysDeleteAPIkeyCmd)
	apiKeysGetAPIkeysCmd.Flags().
		BoolVar(
			&apiKeysGetAPIkeysFlag.IncludeExpired,
			"include-expired",
			false,
			"IncludeExpired",
		)

	apiKeysCmd.AddCommand(apiKeysGetAPIkeysCmd)
	rootCmd.AddCommand(correlationsCmd)
	correlationsCreateCorrelationCmd.Flags().
		StringVar(
			&correlationsCreateCorrelationFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	correlationsCreateCorrelationCmd.MarkFlagRequired("body")
	correlationsCreateCorrelationCmd.Flags().
		StringVar(
			&correlationsCreateCorrelationFlag.SourceUID,
			"source-uid",
			"",
			"SourceUID",
		)

	correlationsCreateCorrelationCmd.MarkFlagRequired("source-uid")
	correlationsCmd.AddCommand(correlationsCreateCorrelationCmd)
	correlationsDeleteCorrelationCmd.Flags().
		StringVar(
			&correlationsDeleteCorrelationFlag.CorrelationUID,
			"correlation-uid",
			"",
			"CorrelationUID",
		)

	correlationsDeleteCorrelationCmd.MarkFlagRequired("correlation-uid")
	correlationsDeleteCorrelationCmd.Flags().
		StringVar(
			&correlationsDeleteCorrelationFlag.UID,
			"uid",
			"",
			"Unique identifier (uid)",
		)

	correlationsDeleteCorrelationCmd.MarkFlagRequired("uid")
	correlationsCmd.AddCommand(correlationsDeleteCorrelationCmd)
	correlationsGetCorrelationCmd.Flags().
		StringVar(
			&correlationsGetCorrelationFlag.CorrelationUID,
			"correlation-uid",
			"",
			"CorrelationUID",
		)

	correlationsGetCorrelationCmd.MarkFlagRequired("correlation-uid")
	correlationsGetCorrelationCmd.Flags().
		StringVar(
			&correlationsGetCorrelationFlag.SourceUID,
			"source-uid",
			"",
			"SourceUID",
		)

	correlationsGetCorrelationCmd.MarkFlagRequired("source-uid")
	correlationsCmd.AddCommand(correlationsGetCorrelationCmd)
	correlationsGetCorrelationsCmd.Flags().
		Int64Var(
			&correlationsGetCorrelationsFlag.Limit,
			"limit",
			0,
			"Limit",
		)

	correlationsGetCorrelationsCmd.Flags().
		Int64Var(
			&correlationsGetCorrelationsFlag.Page,
			"page",
			0,
			"Page",
		)

	correlationsGetCorrelationsCmd.Flags().
		StringSliceVar(
			&correlationsGetCorrelationsFlag.SourceUID,
			"source-uid",
			[]string{},
			"SourceUID",
		)

	correlationsCmd.AddCommand(correlationsGetCorrelationsCmd)
	correlationsGetCorrelationsBySourceUIDCmd.Flags().
		StringVar(
			&correlationsGetCorrelationsBySourceUIDFlag.SourceUID,
			"source-uid",
			"",
			"SourceUID",
		)

	correlationsGetCorrelationsBySourceUIDCmd.MarkFlagRequired("source-uid")
	correlationsCmd.AddCommand(correlationsGetCorrelationsBySourceUIDCmd)
	correlationsUpdateCorrelationCmd.Flags().
		StringVar(
			&correlationsUpdateCorrelationFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	correlationsUpdateCorrelationCmd.MarkFlagRequired("body")
	correlationsUpdateCorrelationCmd.Flags().
		StringVar(
			&correlationsUpdateCorrelationFlag.CorrelationUID,
			"correlation-uid",
			"",
			"CorrelationUID",
		)

	correlationsUpdateCorrelationCmd.MarkFlagRequired("correlation-uid")
	correlationsUpdateCorrelationCmd.Flags().
		StringVar(
			&correlationsUpdateCorrelationFlag.SourceUID,
			"source-uid",
			"",
			"SourceUID",
		)

	correlationsUpdateCorrelationCmd.MarkFlagRequired("source-uid")
	correlationsCmd.AddCommand(correlationsUpdateCorrelationCmd)
	rootCmd.AddCommand(dashboardPermissionsCmd)
	dashboardPermissionsGetDashboardPermissionsListByUIDCmd.Flags().
		StringVar(
			&dashboardPermissionsGetDashboardPermissionsListByUIDFlag.UID,
			"uid",
			"",
			"Unique identifier (uid)",
		)

	dashboardPermissionsGetDashboardPermissionsListByUIDCmd.MarkFlagRequired("uid")
	dashboardPermissionsCmd.AddCommand(dashboardPermissionsGetDashboardPermissionsListByUIDCmd)
	dashboardPermissionsUpdateDashboardPermissionsByUIDCmd.Flags().
		StringVar(
			&dashboardPermissionsUpdateDashboardPermissionsByUIDFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	dashboardPermissionsUpdateDashboardPermissionsByUIDCmd.MarkFlagRequired("body")
	dashboardPermissionsUpdateDashboardPermissionsByUIDCmd.Flags().
		StringVar(
			&dashboardPermissionsUpdateDashboardPermissionsByUIDFlag.UID,
			"uid",
			"",
			"Unique identifier (uid)",
		)

	dashboardPermissionsUpdateDashboardPermissionsByUIDCmd.MarkFlagRequired("uid")
	dashboardPermissionsCmd.AddCommand(dashboardPermissionsUpdateDashboardPermissionsByUIDCmd)
	rootCmd.AddCommand(dashboardPublicCmd)
	dashboardPublicCreatePublicDashboardCmd.Flags().
		StringVar(
			&dashboardPublicCreatePublicDashboardFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	dashboardPublicCreatePublicDashboardCmd.MarkFlagRequired("body")
	dashboardPublicCreatePublicDashboardCmd.Flags().
		StringVar(
			&dashboardPublicCreatePublicDashboardFlag.DashboardUID,
			"dashboard-uid",
			"",
			"DashboardUID",
		)

	dashboardPublicCreatePublicDashboardCmd.MarkFlagRequired("dashboard-uid")
	dashboardPublicCmd.AddCommand(dashboardPublicCreatePublicDashboardCmd)
	dashboardPublicDeletePublicDashboardCmd.Flags().
		StringVar(
			&dashboardPublicDeletePublicDashboardFlag.DashboardUID,
			"dashboard-uid",
			"",
			"DashboardUID",
		)

	dashboardPublicDeletePublicDashboardCmd.MarkFlagRequired("dashboard-uid")
	dashboardPublicDeletePublicDashboardCmd.Flags().
		StringVar(
			&dashboardPublicDeletePublicDashboardFlag.UID,
			"uid",
			"",
			"Unique identifier (uid)",
		)

	dashboardPublicDeletePublicDashboardCmd.MarkFlagRequired("uid")
	dashboardPublicCmd.AddCommand(dashboardPublicDeletePublicDashboardCmd)
	dashboardPublicGetPublicAnnotationsCmd.Flags().
		StringVar(
			&dashboardPublicGetPublicAnnotationsFlag.AccessToken,
			"access-token",
			"",
			"AccessToken",
		)

	dashboardPublicGetPublicAnnotationsCmd.MarkFlagRequired("access-token")
	dashboardPublicCmd.AddCommand(dashboardPublicGetPublicAnnotationsCmd)
	dashboardPublicGetPublicDashboardCmd.Flags().
		StringVar(
			&dashboardPublicGetPublicDashboardFlag.DashboardUID,
			"dashboard-uid",
			"",
			"DashboardUID",
		)

	dashboardPublicGetPublicDashboardCmd.MarkFlagRequired("dashboard-uid")
	dashboardPublicCmd.AddCommand(dashboardPublicGetPublicDashboardCmd)
	dashboardPublicCmd.AddCommand(dashboardPublicListPublicDashboardsCmd)
	dashboardPublicQueryPublicDashboardCmd.Flags().
		StringVar(
			&dashboardPublicQueryPublicDashboardFlag.AccessToken,
			"access-token",
			"",
			"AccessToken",
		)

	dashboardPublicQueryPublicDashboardCmd.MarkFlagRequired("access-token")
	dashboardPublicQueryPublicDashboardCmd.Flags().
		Int64Var(
			&dashboardPublicQueryPublicDashboardFlag.PanelID,
			"panel-id",
			0,
			"PanelID",
		)

	dashboardPublicQueryPublicDashboardCmd.MarkFlagRequired("panel-id")
	dashboardPublicCmd.AddCommand(dashboardPublicQueryPublicDashboardCmd)
	dashboardPublicUpdatePublicDashboardCmd.Flags().
		StringVar(
			&dashboardPublicUpdatePublicDashboardFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	dashboardPublicUpdatePublicDashboardCmd.MarkFlagRequired("body")
	dashboardPublicUpdatePublicDashboardCmd.Flags().
		StringVar(
			&dashboardPublicUpdatePublicDashboardFlag.DashboardUID,
			"dashboard-uid",
			"",
			"DashboardUID",
		)

	dashboardPublicUpdatePublicDashboardCmd.MarkFlagRequired("dashboard-uid")
	dashboardPublicUpdatePublicDashboardCmd.Flags().
		StringVar(
			&dashboardPublicUpdatePublicDashboardFlag.UID,
			"uid",
			"",
			"Unique identifier (uid)",
		)

	dashboardPublicUpdatePublicDashboardCmd.MarkFlagRequired("uid")
	dashboardPublicCmd.AddCommand(dashboardPublicUpdatePublicDashboardCmd)
	dashboardPublicViewPublicDashboardCmd.Flags().
		StringVar(
			&dashboardPublicViewPublicDashboardFlag.AccessToken,
			"access-token",
			"",
			"AccessToken",
		)

	dashboardPublicViewPublicDashboardCmd.MarkFlagRequired("access-token")
	dashboardPublicCmd.AddCommand(dashboardPublicViewPublicDashboardCmd)
	rootCmd.AddCommand(dashboardVersionsCmd)
	dashboardVersionsGetDashboardVersionByUIDCmd.Flags().
		Int64Var(
			&dashboardVersionsGetDashboardVersionByUIDFlag.DashboardVersionID,
			"dashboard-version-id",
			0,
			"DashboardVersionID",
		)

	dashboardVersionsGetDashboardVersionByUIDCmd.MarkFlagRequired("dashboard-version-id")
	dashboardVersionsGetDashboardVersionByUIDCmd.Flags().
		StringVar(
			&dashboardVersionsGetDashboardVersionByUIDFlag.UID,
			"uid",
			"",
			"Unique identifier (uid)",
		)

	dashboardVersionsGetDashboardVersionByUIDCmd.MarkFlagRequired("uid")
	dashboardVersionsCmd.AddCommand(dashboardVersionsGetDashboardVersionByUIDCmd)
	dashboardVersionsGetDashboardVersionsByUIDCmd.Flags().
		Int64Var(
			&dashboardVersionsGetDashboardVersionsByUIDFlag.Limit,
			"limit",
			0,
			"Limit",
		)

	dashboardVersionsGetDashboardVersionsByUIDCmd.Flags().
		Int64Var(
			&dashboardVersionsGetDashboardVersionsByUIDFlag.Start,
			"start",
			0,
			"Start",
		)

	dashboardVersionsGetDashboardVersionsByUIDCmd.Flags().
		StringVar(
			&dashboardVersionsGetDashboardVersionsByUIDFlag.UID,
			"uid",
			"",
			"Unique identifier (uid)",
		)

	dashboardVersionsGetDashboardVersionsByUIDCmd.MarkFlagRequired("uid")
	dashboardVersionsCmd.AddCommand(dashboardVersionsGetDashboardVersionsByUIDCmd)
	dashboardVersionsRestoreDashboardVersionByUIDCmd.Flags().
		StringVar(
			&dashboardVersionsRestoreDashboardVersionByUIDFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	dashboardVersionsRestoreDashboardVersionByUIDCmd.MarkFlagRequired("body")
	dashboardVersionsRestoreDashboardVersionByUIDCmd.Flags().
		StringVar(
			&dashboardVersionsRestoreDashboardVersionByUIDFlag.UID,
			"uid",
			"",
			"Unique identifier (uid)",
		)

	dashboardVersionsRestoreDashboardVersionByUIDCmd.MarkFlagRequired("uid")
	dashboardVersionsCmd.AddCommand(dashboardVersionsRestoreDashboardVersionByUIDCmd)
	rootCmd.AddCommand(dashboardsCmd)
	dashboardsCalculateDashboardDiffCmd.Flags().
		StringVar(
			&dashboardsCalculateDashboardDiffFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	dashboardsCalculateDashboardDiffCmd.MarkFlagRequired("body")
	dashboardsCmd.AddCommand(dashboardsCalculateDashboardDiffCmd)
	dashboardsDeleteDashboardByUIDCmd.Flags().
		StringVar(
			&dashboardsDeleteDashboardByUIDFlag.UID,
			"uid",
			"",
			"Unique identifier (uid)",
		)

	dashboardsDeleteDashboardByUIDCmd.MarkFlagRequired("uid")
	dashboardsCmd.AddCommand(dashboardsDeleteDashboardByUIDCmd)
	dashboardsGetDashboardByUIDCmd.Flags().
		StringVar(
			&dashboardsGetDashboardByUIDFlag.UID,
			"uid",
			"",
			"Unique identifier (uid)",
		)

	dashboardsGetDashboardByUIDCmd.MarkFlagRequired("uid")
	dashboardsCmd.AddCommand(dashboardsGetDashboardByUIDCmd)
	dashboardsCmd.AddCommand(dashboardsGetDashboardTagsCmd)
	dashboardsCmd.AddCommand(dashboardsGetHomeDashboardCmd)
	dashboardsHardDeleteDashboardByUIDCmd.Flags().
		StringVar(
			&dashboardsHardDeleteDashboardByUIDFlag.UID,
			"uid",
			"",
			"Unique identifier (uid)",
		)

	dashboardsHardDeleteDashboardByUIDCmd.MarkFlagRequired("uid")
	dashboardsCmd.AddCommand(dashboardsHardDeleteDashboardByUIDCmd)
	dashboardsImportDashboardCmd.Flags().
		StringVar(
			&dashboardsImportDashboardFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	dashboardsImportDashboardCmd.MarkFlagRequired("body")
	dashboardsCmd.AddCommand(dashboardsImportDashboardCmd)
	dashboardsPostDashboardCmd.Flags().
		StringVar(
			&dashboardsPostDashboardFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	dashboardsPostDashboardCmd.MarkFlagRequired("body")
	dashboardsCmd.AddCommand(dashboardsPostDashboardCmd)
	dashboardsRestoreDeletedDashboardByUIDCmd.Flags().
		StringVar(
			&dashboardsRestoreDeletedDashboardByUIDFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	dashboardsRestoreDeletedDashboardByUIDCmd.MarkFlagRequired("body")
	dashboardsRestoreDeletedDashboardByUIDCmd.Flags().
		StringVar(
			&dashboardsRestoreDeletedDashboardByUIDFlag.UID,
			"uid",
			"",
			"Unique identifier (uid)",
		)

	dashboardsRestoreDeletedDashboardByUIDCmd.MarkFlagRequired("uid")
	dashboardsCmd.AddCommand(dashboardsRestoreDeletedDashboardByUIDCmd)
	rootCmd.AddCommand(datasourcesCmd)
	datasourcesAddDatasourceCmd.Flags().
		StringVar(
			&datasourcesAddDatasourceFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	datasourcesAddDatasourceCmd.MarkFlagRequired("body")
	datasourcesCmd.AddCommand(datasourcesAddDatasourceCmd)
	datasourcesCallDatasourceResourceCmd.Flags().
		StringVar(
			&datasourcesCallDatasourceResourceFlag.DatasourceProxyRoute,
			"datasource-proxy-route",
			"",
			"DatasourceProxyRoute",
		)

	datasourcesCallDatasourceResourceCmd.MarkFlagRequired("datasource-proxy-route")
	datasourcesCallDatasourceResourceCmd.Flags().
		StringVar(
			&datasourcesCallDatasourceResourceFlag.UID,
			"uid",
			"",
			"Unique identifier (uid)",
		)

	datasourcesCallDatasourceResourceCmd.MarkFlagRequired("uid")
	datasourcesCmd.AddCommand(datasourcesCallDatasourceResourceCmd)
	datasourcesCheckDatasourceHealthCmd.Flags().
		StringVar(
			&datasourcesCheckDatasourceHealthFlag.UID,
			"uid",
			"",
			"Unique identifier (uid)",
		)

	datasourcesCheckDatasourceHealthCmd.MarkFlagRequired("uid")
	datasourcesCmd.AddCommand(datasourcesCheckDatasourceHealthCmd)
	datasourcesDeleteDatasourceByNameCmd.Flags().
		StringVar(
			&datasourcesDeleteDatasourceByNameFlag.Name,
			"name",
			"",
			"Name of the datasource",
		)

	datasourcesDeleteDatasourceByNameCmd.MarkFlagRequired("name")
	datasourcesCmd.AddCommand(datasourcesDeleteDatasourceByNameCmd)
	datasourcesDeleteDatasourceByUIDCmd.Flags().
		StringVar(
			&datasourcesDeleteDatasourceByUIDFlag.UID,
			"uid",
			"",
			"Unique identifier (uid)",
		)

	datasourcesDeleteDatasourceByUIDCmd.MarkFlagRequired("uid")
	datasourcesCmd.AddCommand(datasourcesDeleteDatasourceByUIDCmd)
	datasourcesGetDatasourceByNameCmd.Flags().
		StringVar(
			&datasourcesGetDatasourceByNameFlag.Name,
			"name",
			"",
			"Name of the datasource",
		)

	datasourcesGetDatasourceByNameCmd.MarkFlagRequired("name")
	datasourcesCmd.AddCommand(datasourcesGetDatasourceByNameCmd)
	datasourcesGetDatasourceByUIDCmd.Flags().
		StringVar(
			&datasourcesGetDatasourceByUIDFlag.UID,
			"uid",
			"",
			"Unique identifier (uid)",
		)

	datasourcesGetDatasourceByUIDCmd.MarkFlagRequired("uid")
	datasourcesCmd.AddCommand(datasourcesGetDatasourceByUIDCmd)
	datasourcesGetDatasourceIDByNameCmd.Flags().
		StringVar(
			&datasourcesGetDatasourceIDByNameFlag.Name,
			"name",
			"",
			"Name of the datasource",
		)

	datasourcesGetDatasourceIDByNameCmd.MarkFlagRequired("name")
	datasourcesCmd.AddCommand(datasourcesGetDatasourceIDByNameCmd)
	datasourcesCmd.AddCommand(datasourcesGetDatasourcesCmd)
	datasourcesUpdateDatasourceByUIDCmd.Flags().
		StringVar(
			&datasourcesUpdateDatasourceByUIDFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	datasourcesUpdateDatasourceByUIDCmd.MarkFlagRequired("body")
	datasourcesUpdateDatasourceByUIDCmd.Flags().
		StringVar(
			&datasourcesUpdateDatasourceByUIDFlag.UID,
			"uid",
			"",
			"Unique identifier (uid)",
		)

	datasourcesUpdateDatasourceByUIDCmd.MarkFlagRequired("uid")
	datasourcesCmd.AddCommand(datasourcesUpdateDatasourceByUIDCmd)
	rootCmd.AddCommand(devicesCmd)
	devicesCmd.AddCommand(devicesListDevicesCmd)
	devicesCmd.AddCommand(devicesSearchDevicesCmd)
	rootCmd.AddCommand(dsCmd)
	dsQueryMetricsWithExpressionsCmd.Flags().
		StringVar(
			&dsQueryMetricsWithExpressionsFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	dsQueryMetricsWithExpressionsCmd.MarkFlagRequired("body")
	dsCmd.AddCommand(dsQueryMetricsWithExpressionsCmd)
	rootCmd.AddCommand(enterpriseCmd)
	enterpriseCleanDatasourceCacheCmd.Flags().
		StringVar(
			&enterpriseCleanDatasourceCacheFlag.DataSourceUID,
			"data-source-uid",
			"",
			"DataSourceUID",
		)

	enterpriseCleanDatasourceCacheCmd.MarkFlagRequired("data-source-uid")
	enterpriseCmd.AddCommand(enterpriseCleanDatasourceCacheCmd)
	enterpriseDisableDatasourceCacheCmd.Flags().
		StringVar(
			&enterpriseDisableDatasourceCacheFlag.DataSourceUID,
			"data-source-uid",
			"",
			"DataSourceUID",
		)

	enterpriseDisableDatasourceCacheCmd.MarkFlagRequired("data-source-uid")
	enterpriseCmd.AddCommand(enterpriseDisableDatasourceCacheCmd)
	enterpriseEnableDatasourceCacheCmd.Flags().
		StringVar(
			&enterpriseEnableDatasourceCacheFlag.DataSourceUID,
			"data-source-uid",
			"",
			"DataSourceUID",
		)

	enterpriseEnableDatasourceCacheCmd.MarkFlagRequired("data-source-uid")
	enterpriseCmd.AddCommand(enterpriseEnableDatasourceCacheCmd)
	enterpriseGetDatasourceCacheConfigCmd.Flags().
		StringVar(
			&enterpriseGetDatasourceCacheConfigFlag.DataSourceUID,
			"data-source-uid",
			"",
			"DataSourceUID",
		)

	enterpriseGetDatasourceCacheConfigCmd.MarkFlagRequired("data-source-uid")
	enterpriseCmd.AddCommand(enterpriseGetDatasourceCacheConfigCmd)
	enterpriseGetTeamLBACRulesAPICmd.Flags().
		StringVar(
			&enterpriseGetTeamLBACRulesAPIFlag.UID,
			"uid",
			"",
			"Unique identifier (uid)",
		)

	enterpriseGetTeamLBACRulesAPICmd.MarkFlagRequired("uid")
	enterpriseCmd.AddCommand(enterpriseGetTeamLBACRulesAPICmd)
	enterpriseCmd.AddCommand(enterpriseSearchResultCmd)
	enterpriseSetDatasourceCacheConfigCmd.Flags().
		StringVar(
			&enterpriseSetDatasourceCacheConfigFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	enterpriseSetDatasourceCacheConfigCmd.MarkFlagRequired("body")
	enterpriseSetDatasourceCacheConfigCmd.Flags().
		StringVar(
			&enterpriseSetDatasourceCacheConfigFlag.DataSourceUID,
			"data-source-uid",
			"",
			"DataSourceUID",
		)

	enterpriseSetDatasourceCacheConfigCmd.MarkFlagRequired("data-source-uid")
	enterpriseCmd.AddCommand(enterpriseSetDatasourceCacheConfigCmd)
	enterpriseUpdateTeamLBACRulesAPICmd.Flags().
		StringVar(
			&enterpriseUpdateTeamLBACRulesAPIFlag.UID,
			"uid",
			"",
			"Unique identifier (uid)",
		)

	enterpriseUpdateTeamLBACRulesAPICmd.MarkFlagRequired("uid")
	enterpriseCmd.AddCommand(enterpriseUpdateTeamLBACRulesAPICmd)
	rootCmd.AddCommand(folderPermissionsCmd)
	folderPermissionsGetFolderPermissionListCmd.Flags().
		StringVar(
			&folderPermissionsGetFolderPermissionListFlag.FolderUID,
			"folder-uid",
			"",
			"FolderUID",
		)

	folderPermissionsGetFolderPermissionListCmd.MarkFlagRequired("folder-uid")
	folderPermissionsCmd.AddCommand(folderPermissionsGetFolderPermissionListCmd)
	folderPermissionsUpdateFolderPermissionsCmd.Flags().
		StringVar(
			&folderPermissionsUpdateFolderPermissionsFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	folderPermissionsUpdateFolderPermissionsCmd.MarkFlagRequired("body")
	folderPermissionsUpdateFolderPermissionsCmd.Flags().
		StringVar(
			&folderPermissionsUpdateFolderPermissionsFlag.FolderUID,
			"folder-uid",
			"",
			"FolderUID",
		)

	folderPermissionsUpdateFolderPermissionsCmd.MarkFlagRequired("folder-uid")
	folderPermissionsCmd.AddCommand(folderPermissionsUpdateFolderPermissionsCmd)
	rootCmd.AddCommand(foldersCmd)
	foldersCreateFolderCmd.Flags().
		StringVar(
			&foldersCreateFolderFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	foldersCreateFolderCmd.MarkFlagRequired("body")
	foldersCmd.AddCommand(foldersCreateFolderCmd)
	foldersDeleteFolderCmd.Flags().
		StringVar(
			&foldersDeleteFolderFlag.FolderUID,
			"folder-uid",
			"",
			"FolderUID",
		)

	foldersDeleteFolderCmd.MarkFlagRequired("folder-uid")
	foldersDeleteFolderCmd.Flags().
		BoolVar(
			&foldersDeleteFolderFlag.ForceDeleteRules,
			"force-delete-rules",
			false,
			"ForceDeleteRules",
		)

	foldersCmd.AddCommand(foldersDeleteFolderCmd)
	foldersGetFolderByUIDCmd.Flags().
		StringVar(
			&foldersGetFolderByUIDFlag.FolderUID,
			"folder-uid",
			"",
			"FolderUID",
		)

	foldersGetFolderByUIDCmd.MarkFlagRequired("folder-uid")
	foldersCmd.AddCommand(foldersGetFolderByUIDCmd)
	foldersGetFolderDescendantCountsCmd.Flags().
		StringVar(
			&foldersGetFolderDescendantCountsFlag.FolderUID,
			"folder-uid",
			"",
			"FolderUID",
		)

	foldersGetFolderDescendantCountsCmd.MarkFlagRequired("folder-uid")
	foldersCmd.AddCommand(foldersGetFolderDescendantCountsCmd)
	foldersGetFoldersCmd.Flags().
		Int64Var(
			&foldersGetFoldersFlag.Limit,
			"limit",
			0,
			"Limit",
		)

	foldersGetFoldersCmd.Flags().
		Int64Var(
			&foldersGetFoldersFlag.Page,
			"page",
			0,
			"Page",
		)

	foldersGetFoldersCmd.Flags().
		StringVar(
			&foldersGetFoldersFlag.ParentUID,
			"parent-uid",
			"",
			"ParentUID",
		)

	foldersGetFoldersCmd.Flags().
		StringVar(
			&foldersGetFoldersFlag.Permission,
			"permission",
			"",
			"Permission",
		)

	foldersCmd.AddCommand(foldersGetFoldersCmd)
	foldersMoveFolderCmd.Flags().
		StringVar(
			&foldersMoveFolderFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	foldersMoveFolderCmd.MarkFlagRequired("body")
	foldersMoveFolderCmd.Flags().
		StringVar(
			&foldersMoveFolderFlag.FolderUID,
			"folder-uid",
			"",
			"FolderUID",
		)

	foldersMoveFolderCmd.MarkFlagRequired("folder-uid")
	foldersCmd.AddCommand(foldersMoveFolderCmd)
	foldersUpdateFolderCmd.Flags().
		StringVar(
			&foldersUpdateFolderFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	foldersUpdateFolderCmd.MarkFlagRequired("body")
	foldersUpdateFolderCmd.Flags().
		StringVar(
			&foldersUpdateFolderFlag.FolderUID,
			"folder-uid",
			"",
			"FolderUID",
		)

	foldersUpdateFolderCmd.MarkFlagRequired("folder-uid")
	foldersCmd.AddCommand(foldersUpdateFolderCmd)
	rootCmd.AddCommand(getCurrentOrgCmd)
	getCurrentOrgCmd.AddCommand(getCurrentOrgGetCurrentOrgQuotaCmd)
	rootCmd.AddCommand(healthCmd)
	healthCmd.AddCommand(healthGetHealthCmd)
	rootCmd.AddCommand(ldapDebugCmd)
	ldapDebugCmd.AddCommand(ldapDebugGetSyncStatusCmd)
	rootCmd.AddCommand(libraryElementsCmd)
	libraryElementsCreateLibraryElementCmd.Flags().
		StringVar(
			&libraryElementsCreateLibraryElementFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	libraryElementsCreateLibraryElementCmd.MarkFlagRequired("body")
	libraryElementsCmd.AddCommand(libraryElementsCreateLibraryElementCmd)
	libraryElementsDeleteLibraryElementByUIDCmd.Flags().
		StringVar(
			&libraryElementsDeleteLibraryElementByUIDFlag.LibraryElementUID,
			"library-element-uid",
			"",
			"LibraryElementUID",
		)

	libraryElementsDeleteLibraryElementByUIDCmd.MarkFlagRequired("library-element-uid")
	libraryElementsCmd.AddCommand(libraryElementsDeleteLibraryElementByUIDCmd)
	libraryElementsGetLibraryElementByNameCmd.Flags().
		StringVar(
			&libraryElementsGetLibraryElementByNameFlag.LibraryElementName,
			"library-element-name",
			"",
			"LibraryElementName",
		)

	libraryElementsGetLibraryElementByNameCmd.MarkFlagRequired("library-element-name")
	libraryElementsCmd.AddCommand(libraryElementsGetLibraryElementByNameCmd)
	libraryElementsGetLibraryElementByUIDCmd.Flags().
		StringVar(
			&libraryElementsGetLibraryElementByUIDFlag.LibraryElementUID,
			"library-element-uid",
			"",
			"LibraryElementUID",
		)

	libraryElementsGetLibraryElementByUIDCmd.MarkFlagRequired("library-element-uid")
	libraryElementsCmd.AddCommand(libraryElementsGetLibraryElementByUIDCmd)
	libraryElementsGetLibraryElementConnectionsCmd.Flags().
		StringVar(
			&libraryElementsGetLibraryElementConnectionsFlag.LibraryElementUID,
			"library-element-uid",
			"",
			"LibraryElementUID",
		)

	libraryElementsGetLibraryElementConnectionsCmd.MarkFlagRequired("library-element-uid")
	libraryElementsCmd.AddCommand(libraryElementsGetLibraryElementConnectionsCmd)
	libraryElementsGetLibraryElementsCmd.Flags().
		StringVar(
			&libraryElementsGetLibraryElementsFlag.ExcludeUID,
			"exclude-uid",
			"",
			"ExcludeUID",
		)

	libraryElementsGetLibraryElementsCmd.Flags().
		StringVar(
			&libraryElementsGetLibraryElementsFlag.FolderFilter,
			"folder-filter",
			"",
			"FolderFilter",
		)

	libraryElementsGetLibraryElementsCmd.Flags().
		Int64Var(
			&libraryElementsGetLibraryElementsFlag.Kind,
			"kind",
			0,
			"Kind",
		)

	libraryElementsGetLibraryElementsCmd.Flags().
		Int64Var(
			&libraryElementsGetLibraryElementsFlag.Page,
			"page",
			0,
			"Page",
		)

	libraryElementsGetLibraryElementsCmd.Flags().
		Int64Var(
			&libraryElementsGetLibraryElementsFlag.PerPage,
			"per-page",
			0,
			"PerPage",
		)

	libraryElementsGetLibraryElementsCmd.Flags().
		StringVar(
			&libraryElementsGetLibraryElementsFlag.SearchString,
			"search-string",
			"",
			"SearchString",
		)

	libraryElementsGetLibraryElementsCmd.Flags().
		StringVar(
			&libraryElementsGetLibraryElementsFlag.SortDirection,
			"sort-direction",
			"",
			"SortDirection",
		)

	libraryElementsGetLibraryElementsCmd.Flags().
		StringVar(
			&libraryElementsGetLibraryElementsFlag.TypeFilter,
			"type-filter",
			"",
			"TypeFilter",
		)

	libraryElementsCmd.AddCommand(libraryElementsGetLibraryElementsCmd)
	libraryElementsUpdateLibraryElementCmd.Flags().
		StringVar(
			&libraryElementsUpdateLibraryElementFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	libraryElementsUpdateLibraryElementCmd.MarkFlagRequired("body")
	libraryElementsUpdateLibraryElementCmd.Flags().
		StringVar(
			&libraryElementsUpdateLibraryElementFlag.LibraryElementUID,
			"library-element-uid",
			"",
			"LibraryElementUID",
		)

	libraryElementsUpdateLibraryElementCmd.MarkFlagRequired("library-element-uid")
	libraryElementsCmd.AddCommand(libraryElementsUpdateLibraryElementCmd)
	rootCmd.AddCommand(licensingCmd)
	licensingDeleteLicenseTokenCmd.Flags().
		StringVar(
			&licensingDeleteLicenseTokenFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	licensingDeleteLicenseTokenCmd.MarkFlagRequired("body")
	licensingCmd.AddCommand(licensingDeleteLicenseTokenCmd)
	licensingCmd.AddCommand(licensingGetCustomPermissionsCSVCmd)
	licensingCmd.AddCommand(licensingGetCustomPermissionsReportCmd)
	licensingCmd.AddCommand(licensingGetLicenseTokenCmd)
	licensingCmd.AddCommand(licensingGetStatusCmd)
	licensingPostLicenseTokenCmd.Flags().
		StringVar(
			&licensingPostLicenseTokenFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	licensingPostLicenseTokenCmd.MarkFlagRequired("body")
	licensingCmd.AddCommand(licensingPostLicenseTokenCmd)
	licensingPostRenewLicenseTokenCmd.Flags().
		StringVar(
			&licensingPostRenewLicenseTokenFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	licensingPostRenewLicenseTokenCmd.MarkFlagRequired("body")
	licensingCmd.AddCommand(licensingPostRenewLicenseTokenCmd)
	licensingCmd.AddCommand(licensingRefreshLicenseStatsCmd)
	rootCmd.AddCommand(migrationsCmd)
	migrationsCancelSnapshotCmd.Flags().
		StringVar(
			&migrationsCancelSnapshotFlag.SnapshotUID,
			"snapshot-uid",
			"",
			"SnapshotUID",
		)

	migrationsCancelSnapshotCmd.MarkFlagRequired("snapshot-uid")
	migrationsCancelSnapshotCmd.Flags().
		StringVar(
			&migrationsCancelSnapshotFlag.UID,
			"uid",
			"",
			"Unique identifier (uid)",
		)

	migrationsCancelSnapshotCmd.MarkFlagRequired("uid")
	migrationsCmd.AddCommand(migrationsCancelSnapshotCmd)
	migrationsCmd.AddCommand(migrationsCreateCloudMigrationTokenCmd)
	migrationsCreateSessionCmd.Flags().
		StringVar(
			&migrationsCreateSessionFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	migrationsCreateSessionCmd.MarkFlagRequired("body")
	migrationsCmd.AddCommand(migrationsCreateSessionCmd)
	migrationsCreateSnapshotCmd.Flags().
		StringVar(
			&migrationsCreateSnapshotFlag.UID,
			"uid",
			"",
			"Unique identifier (uid)",
		)

	migrationsCreateSnapshotCmd.MarkFlagRequired("uid")
	migrationsCmd.AddCommand(migrationsCreateSnapshotCmd)
	migrationsDeleteCloudMigrationTokenCmd.Flags().
		StringVar(
			&migrationsDeleteCloudMigrationTokenFlag.UID,
			"uid",
			"",
			"Unique identifier (uid)",
		)

	migrationsDeleteCloudMigrationTokenCmd.MarkFlagRequired("uid")
	migrationsCmd.AddCommand(migrationsDeleteCloudMigrationTokenCmd)
	migrationsDeleteSessionCmd.Flags().
		StringVar(
			&migrationsDeleteSessionFlag.UID,
			"uid",
			"",
			"Unique identifier (uid)",
		)

	migrationsDeleteSessionCmd.MarkFlagRequired("uid")
	migrationsCmd.AddCommand(migrationsDeleteSessionCmd)
	migrationsGetCloudMigrationRunListCmd.Flags().
		StringVar(
			&migrationsGetCloudMigrationRunListFlag.UID,
			"uid",
			"",
			"Unique identifier (uid)",
		)

	migrationsGetCloudMigrationRunListCmd.MarkFlagRequired("uid")
	migrationsCmd.AddCommand(migrationsGetCloudMigrationRunListCmd)
	migrationsGetCloudMigrationRunCmd.Flags().
		StringVar(
			&migrationsGetCloudMigrationRunFlag.RunUID,
			"run-uid",
			"",
			"RunUID",
		)

	migrationsGetCloudMigrationRunCmd.MarkFlagRequired("run-uid")
	migrationsCmd.AddCommand(migrationsGetCloudMigrationRunCmd)
	migrationsCmd.AddCommand(migrationsGetCloudMigrationTokenCmd)
	migrationsCmd.AddCommand(migrationsGetSessionListCmd)
	migrationsGetSessionCmd.Flags().
		StringVar(
			&migrationsGetSessionFlag.UID,
			"uid",
			"",
			"Unique identifier (uid)",
		)

	migrationsGetSessionCmd.MarkFlagRequired("uid")
	migrationsCmd.AddCommand(migrationsGetSessionCmd)
	migrationsGetShapshotListCmd.Flags().
		Int64Var(
			&migrationsGetShapshotListFlag.Limit,
			"limit",
			0,
			"Limit",
		)

	migrationsGetShapshotListCmd.Flags().
		Int64Var(
			&migrationsGetShapshotListFlag.Page,
			"page",
			0,
			"Page",
		)

	migrationsGetShapshotListCmd.Flags().
		StringVar(
			&migrationsGetShapshotListFlag.UID,
			"uid",
			"",
			"Unique identifier (uid)",
		)

	migrationsGetShapshotListCmd.MarkFlagRequired("uid")
	migrationsCmd.AddCommand(migrationsGetShapshotListCmd)
	migrationsGetSnapshotCmd.Flags().
		Int64Var(
			&migrationsGetSnapshotFlag.ResultLimit,
			"result-limit",
			0,
			"ResultLimit",
		)

	migrationsGetSnapshotCmd.Flags().
		Int64Var(
			&migrationsGetSnapshotFlag.ResultPage,
			"result-page",
			0,
			"ResultPage",
		)

	migrationsGetSnapshotCmd.Flags().
		StringVar(
			&migrationsGetSnapshotFlag.SnapshotUID,
			"snapshot-uid",
			"",
			"SnapshotUID",
		)

	migrationsGetSnapshotCmd.MarkFlagRequired("snapshot-uid")
	migrationsGetSnapshotCmd.Flags().
		StringVar(
			&migrationsGetSnapshotFlag.UID,
			"uid",
			"",
			"Unique identifier (uid)",
		)

	migrationsGetSnapshotCmd.MarkFlagRequired("uid")
	migrationsCmd.AddCommand(migrationsGetSnapshotCmd)
	migrationsRunCloudMigrationCmd.Flags().
		StringVar(
			&migrationsRunCloudMigrationFlag.UID,
			"uid",
			"",
			"Unique identifier (uid)",
		)

	migrationsRunCloudMigrationCmd.MarkFlagRequired("uid")
	migrationsCmd.AddCommand(migrationsRunCloudMigrationCmd)
	migrationsUploadSnapshotCmd.Flags().
		StringVar(
			&migrationsUploadSnapshotFlag.SnapshotUID,
			"snapshot-uid",
			"",
			"SnapshotUID",
		)

	migrationsUploadSnapshotCmd.MarkFlagRequired("snapshot-uid")
	migrationsUploadSnapshotCmd.Flags().
		StringVar(
			&migrationsUploadSnapshotFlag.UID,
			"uid",
			"",
			"Unique identifier (uid)",
		)

	migrationsUploadSnapshotCmd.MarkFlagRequired("uid")
	migrationsCmd.AddCommand(migrationsUploadSnapshotCmd)
	rootCmd.AddCommand(orgCmd)
	orgAddOrgUserToCurrentOrgCmd.Flags().
		StringVar(
			&orgAddOrgUserToCurrentOrgFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	orgAddOrgUserToCurrentOrgCmd.MarkFlagRequired("body")
	orgCmd.AddCommand(orgAddOrgUserToCurrentOrgCmd)
	orgCmd.AddCommand(orgGetCurrentOrgCmd)
	orgGetOrgUsersForCurrentOrgLookupCmd.Flags().
		Int64Var(
			&orgGetOrgUsersForCurrentOrgLookupFlag.Limit,
			"limit",
			0,
			"Limit",
		)

	orgGetOrgUsersForCurrentOrgLookupCmd.Flags().
		StringVar(
			&orgGetOrgUsersForCurrentOrgLookupFlag.Query,
			"query",
			"",
			"Query",
		)

	orgCmd.AddCommand(orgGetOrgUsersForCurrentOrgLookupCmd)
	orgCmd.AddCommand(orgGetOrgUsersForCurrentOrgCmd)
	orgRemoveOrgUserForCurrentOrgCmd.Flags().
		Int64Var(
			&orgRemoveOrgUserForCurrentOrgFlag.UserID,
			"user-id",
			0,
			"UserID",
		)

	orgRemoveOrgUserForCurrentOrgCmd.MarkFlagRequired("user-id")
	orgCmd.AddCommand(orgRemoveOrgUserForCurrentOrgCmd)
	orgUpdateCurrentOrgAddressCmd.Flags().
		StringVar(
			&orgUpdateCurrentOrgAddressFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	orgUpdateCurrentOrgAddressCmd.MarkFlagRequired("body")
	orgCmd.AddCommand(orgUpdateCurrentOrgAddressCmd)
	orgUpdateCurrentOrgCmd.Flags().
		StringVar(
			&orgUpdateCurrentOrgFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	orgUpdateCurrentOrgCmd.MarkFlagRequired("body")
	orgCmd.AddCommand(orgUpdateCurrentOrgCmd)
	orgUpdateOrgUserForCurrentOrgCmd.Flags().
		StringVar(
			&orgUpdateOrgUserForCurrentOrgFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	orgUpdateOrgUserForCurrentOrgCmd.MarkFlagRequired("body")
	orgUpdateOrgUserForCurrentOrgCmd.Flags().
		Int64Var(
			&orgUpdateOrgUserForCurrentOrgFlag.UserID,
			"user-id",
			0,
			"UserID",
		)

	orgUpdateOrgUserForCurrentOrgCmd.MarkFlagRequired("user-id")
	orgCmd.AddCommand(orgUpdateOrgUserForCurrentOrgCmd)
	rootCmd.AddCommand(orgInvitesCmd)
	orgInvitesAddOrgInviteCmd.Flags().
		StringVar(
			&orgInvitesAddOrgInviteFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	orgInvitesAddOrgInviteCmd.MarkFlagRequired("body")
	orgInvitesCmd.AddCommand(orgInvitesAddOrgInviteCmd)
	orgInvitesCmd.AddCommand(orgInvitesGetPendingOrgInvitesCmd)
	orgInvitesRevokeInviteCmd.Flags().
		StringVar(
			&orgInvitesRevokeInviteFlag.InvitationCode,
			"invitation-code",
			"",
			"InvitationCode",
		)

	orgInvitesRevokeInviteCmd.MarkFlagRequired("invitation-code")
	orgInvitesCmd.AddCommand(orgInvitesRevokeInviteCmd)
	rootCmd.AddCommand(orgPreferencesCmd)
	orgPreferencesCmd.AddCommand(orgPreferencesGetOrgPreferencesCmd)
	orgPreferencesPatchOrgPreferencesCmd.Flags().
		StringVar(
			&orgPreferencesPatchOrgPreferencesFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	orgPreferencesPatchOrgPreferencesCmd.MarkFlagRequired("body")
	orgPreferencesCmd.AddCommand(orgPreferencesPatchOrgPreferencesCmd)
	orgPreferencesUpdateOrgPreferencesCmd.Flags().
		StringVar(
			&orgPreferencesUpdateOrgPreferencesFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	orgPreferencesUpdateOrgPreferencesCmd.MarkFlagRequired("body")
	orgPreferencesCmd.AddCommand(orgPreferencesUpdateOrgPreferencesCmd)
	rootCmd.AddCommand(orgsCmd)
	orgsAddOrgUserCmd.Flags().
		StringVar(
			&orgsAddOrgUserFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	orgsAddOrgUserCmd.MarkFlagRequired("body")
	orgsAddOrgUserCmd.Flags().
		Int64Var(
			&orgsAddOrgUserFlag.OrgID,
			"org-id",
			0,
			"OrgID",
		)

	orgsAddOrgUserCmd.MarkFlagRequired("org-id")
	orgsCmd.AddCommand(orgsAddOrgUserCmd)
	orgsCreateOrgCmd.Flags().
		StringVar(
			&orgsCreateOrgFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	orgsCreateOrgCmd.MarkFlagRequired("body")
	orgsCmd.AddCommand(orgsCreateOrgCmd)
	orgsGetOrgByNameCmd.Flags().
		StringVar(
			&orgsGetOrgByNameFlag.OrgName,
			"org-name",
			"",
			"OrgName",
		)

	orgsGetOrgByNameCmd.MarkFlagRequired("org-name")
	orgsCmd.AddCommand(orgsGetOrgByNameCmd)
	orgsGetOrgQuotaCmd.Flags().
		Int64Var(
			&orgsGetOrgQuotaFlag.OrgID,
			"org-id",
			0,
			"OrgID",
		)

	orgsGetOrgQuotaCmd.MarkFlagRequired("org-id")
	orgsCmd.AddCommand(orgsGetOrgQuotaCmd)
	orgsGetOrgUsersCmd.Flags().
		Int64Var(
			&orgsGetOrgUsersFlag.OrgID,
			"org-id",
			0,
			"OrgID",
		)

	orgsGetOrgUsersCmd.MarkFlagRequired("org-id")
	orgsCmd.AddCommand(orgsGetOrgUsersCmd)
	orgsRemoveOrgUserCmd.Flags().
		Int64Var(
			&orgsRemoveOrgUserFlag.OrgID,
			"org-id",
			0,
			"OrgID",
		)

	orgsRemoveOrgUserCmd.MarkFlagRequired("org-id")
	orgsRemoveOrgUserCmd.Flags().
		Int64Var(
			&orgsRemoveOrgUserFlag.UserID,
			"user-id",
			0,
			"UserID",
		)

	orgsRemoveOrgUserCmd.MarkFlagRequired("user-id")
	orgsCmd.AddCommand(orgsRemoveOrgUserCmd)
	orgsSearchOrgUsersCmd.Flags().
		Int64Var(
			&orgsSearchOrgUsersFlag.OrgID,
			"org-id",
			0,
			"OrgID",
		)

	orgsSearchOrgUsersCmd.MarkFlagRequired("org-id")
	orgsCmd.AddCommand(orgsSearchOrgUsersCmd)
	orgsSearchOrgsCmd.Flags().
		StringVar(
			&orgsSearchOrgsFlag.Name,
			"name",
			"",
			"Name of the org",
		)

	orgsSearchOrgsCmd.Flags().
		Int64Var(
			&orgsSearchOrgsFlag.Page,
			"page",
			0,
			"Page",
		)

	orgsSearchOrgsCmd.Flags().
		Int64Var(
			&orgsSearchOrgsFlag.Perpage,
			"perpage",
			1000,
			"Perpage",
		)

	orgsSearchOrgsCmd.Flags().
		StringVar(
			&orgsSearchOrgsFlag.Query,
			"query",
			"",
			"Query",
		)

	orgsCmd.AddCommand(orgsSearchOrgsCmd)
	orgsUpdateOrgAddressCmd.Flags().
		StringVar(
			&orgsUpdateOrgAddressFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	orgsUpdateOrgAddressCmd.MarkFlagRequired("body")
	orgsUpdateOrgAddressCmd.Flags().
		Int64Var(
			&orgsUpdateOrgAddressFlag.OrgID,
			"org-id",
			0,
			"OrgID",
		)

	orgsUpdateOrgAddressCmd.MarkFlagRequired("org-id")
	orgsCmd.AddCommand(orgsUpdateOrgAddressCmd)
	orgsUpdateOrgQuotaCmd.Flags().
		StringVar(
			&orgsUpdateOrgQuotaFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	orgsUpdateOrgQuotaCmd.MarkFlagRequired("body")
	orgsUpdateOrgQuotaCmd.Flags().
		Int64Var(
			&orgsUpdateOrgQuotaFlag.OrgID,
			"org-id",
			0,
			"OrgID",
		)

	orgsUpdateOrgQuotaCmd.MarkFlagRequired("org-id")
	orgsUpdateOrgQuotaCmd.Flags().
		StringVar(
			&orgsUpdateOrgQuotaFlag.QuotaTarget,
			"quota-target",
			"",
			"QuotaTarget",
		)

	orgsUpdateOrgQuotaCmd.MarkFlagRequired("quota-target")
	orgsCmd.AddCommand(orgsUpdateOrgQuotaCmd)
	orgsUpdateOrgUserCmd.Flags().
		StringVar(
			&orgsUpdateOrgUserFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	orgsUpdateOrgUserCmd.MarkFlagRequired("body")
	orgsUpdateOrgUserCmd.Flags().
		Int64Var(
			&orgsUpdateOrgUserFlag.OrgID,
			"org-id",
			0,
			"OrgID",
		)

	orgsUpdateOrgUserCmd.MarkFlagRequired("org-id")
	orgsUpdateOrgUserCmd.Flags().
		Int64Var(
			&orgsUpdateOrgUserFlag.UserID,
			"user-id",
			0,
			"UserID",
		)

	orgsUpdateOrgUserCmd.MarkFlagRequired("user-id")
	orgsCmd.AddCommand(orgsUpdateOrgUserCmd)
	orgsUpdateOrgCmd.Flags().
		StringVar(
			&orgsUpdateOrgFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	orgsUpdateOrgCmd.MarkFlagRequired("body")
	orgsUpdateOrgCmd.Flags().
		Int64Var(
			&orgsUpdateOrgFlag.OrgID,
			"org-id",
			0,
			"OrgID",
		)

	orgsUpdateOrgCmd.MarkFlagRequired("org-id")
	orgsCmd.AddCommand(orgsUpdateOrgCmd)
	rootCmd.AddCommand(playlistsCmd)
	playlistsCreatePlaylistCmd.Flags().
		StringVar(
			&playlistsCreatePlaylistFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	playlistsCreatePlaylistCmd.MarkFlagRequired("body")
	playlistsCmd.AddCommand(playlistsCreatePlaylistCmd)
	playlistsDeletePlaylistCmd.Flags().
		StringVar(
			&playlistsDeletePlaylistFlag.UID,
			"uid",
			"",
			"Unique identifier (uid)",
		)

	playlistsDeletePlaylistCmd.MarkFlagRequired("uid")
	playlistsCmd.AddCommand(playlistsDeletePlaylistCmd)
	playlistsGetPlaylistItemsCmd.Flags().
		StringVar(
			&playlistsGetPlaylistItemsFlag.UID,
			"uid",
			"",
			"Unique identifier (uid)",
		)

	playlistsGetPlaylistItemsCmd.MarkFlagRequired("uid")
	playlistsCmd.AddCommand(playlistsGetPlaylistItemsCmd)
	playlistsGetPlaylistCmd.Flags().
		StringVar(
			&playlistsGetPlaylistFlag.UID,
			"uid",
			"",
			"Unique identifier (uid)",
		)

	playlistsGetPlaylistCmd.MarkFlagRequired("uid")
	playlistsCmd.AddCommand(playlistsGetPlaylistCmd)
	playlistsSearchPlaylistsCmd.Flags().
		Int64Var(
			&playlistsSearchPlaylistsFlag.Limit,
			"limit",
			0,
			"Limit",
		)

	playlistsSearchPlaylistsCmd.Flags().
		StringVar(
			&playlistsSearchPlaylistsFlag.Query,
			"query",
			"",
			"Query",
		)

	playlistsCmd.AddCommand(playlistsSearchPlaylistsCmd)
	playlistsUpdatePlaylistCmd.Flags().
		StringVar(
			&playlistsUpdatePlaylistFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	playlistsUpdatePlaylistCmd.MarkFlagRequired("body")
	playlistsUpdatePlaylistCmd.Flags().
		StringVar(
			&playlistsUpdatePlaylistFlag.UID,
			"uid",
			"",
			"Unique identifier (uid)",
		)

	playlistsUpdatePlaylistCmd.MarkFlagRequired("uid")
	playlistsCmd.AddCommand(playlistsUpdatePlaylistCmd)
	rootCmd.AddCommand(provisioningCmd)
	provisioningDeleteAlertRuleCmd.Flags().
		StringVar(
			&provisioningDeleteAlertRuleFlag.UID,
			"uid",
			"",
			"Unique identifier (uid)",
		)

	provisioningDeleteAlertRuleCmd.MarkFlagRequired("uid")
	provisioningDeleteAlertRuleCmd.Flags().
		StringVar(
			&provisioningDeleteAlertRuleFlag.XDisableProvenance,
			"x-disable-provenance",
			"",
			"XDisableProvenance",
		)

	provisioningCmd.AddCommand(provisioningDeleteAlertRuleCmd)
	provisioningDeleteAlertRuleGroupCmd.Flags().
		StringVar(
			&provisioningDeleteAlertRuleGroupFlag.FolderUID,
			"folder-uid",
			"",
			"FolderUID",
		)

	provisioningDeleteAlertRuleGroupCmd.MarkFlagRequired("folder-uid")
	provisioningDeleteAlertRuleGroupCmd.Flags().
		StringVar(
			&provisioningDeleteAlertRuleGroupFlag.Group,
			"group",
			"",
			"Group",
		)

	provisioningDeleteAlertRuleGroupCmd.MarkFlagRequired("group")
	provisioningCmd.AddCommand(provisioningDeleteAlertRuleGroupCmd)
	provisioningDeleteContactpointsCmd.Flags().
		StringVar(
			&provisioningDeleteContactpointsFlag.UID,
			"uid",
			"",
			"Unique identifier (uid)",
		)

	provisioningDeleteContactpointsCmd.MarkFlagRequired("uid")
	provisioningCmd.AddCommand(provisioningDeleteContactpointsCmd)
	provisioningDeleteMuteTimingCmd.Flags().
		StringVar(
			&provisioningDeleteMuteTimingFlag.XDisableProvenance,
			"x-disable-provenance",
			"",
			"XDisableProvenance",
		)

	provisioningDeleteMuteTimingCmd.Flags().
		StringVar(
			&provisioningDeleteMuteTimingFlag.Name,
			"name",
			"",
			"Name of the provisioning",
		)

	provisioningDeleteMuteTimingCmd.MarkFlagRequired("name")
	provisioningDeleteMuteTimingCmd.Flags().
		StringVar(
			&provisioningDeleteMuteTimingFlag.Version,
			"version",
			"",
			"Version",
		)

	provisioningCmd.AddCommand(provisioningDeleteMuteTimingCmd)
	provisioningDeleteTemplateCmd.Flags().
		StringVar(
			&provisioningDeleteTemplateFlag.Name,
			"name",
			"",
			"Name of the provisioning",
		)

	provisioningDeleteTemplateCmd.MarkFlagRequired("name")
	provisioningCmd.AddCommand(provisioningDeleteTemplateCmd)
	provisioningExportMuteTimingCmd.Flags().
		BoolVar(
			&provisioningExportMuteTimingFlag.Download,
			"download",
			false,
			"Download",
		)

	provisioningExportMuteTimingCmd.Flags().
		StringVar(
			&provisioningExportMuteTimingFlag.Format,
			"format",
			"",
			"Format",
		)

	provisioningExportMuteTimingCmd.Flags().
		StringVar(
			&provisioningExportMuteTimingFlag.Name,
			"name",
			"",
			"Name of the provisioning",
		)

	provisioningExportMuteTimingCmd.MarkFlagRequired("name")
	provisioningCmd.AddCommand(provisioningExportMuteTimingCmd)
	provisioningExportMuteTimingsCmd.Flags().
		BoolVar(
			&provisioningExportMuteTimingsFlag.Download,
			"download",
			false,
			"Download",
		)

	provisioningExportMuteTimingsCmd.Flags().
		StringVar(
			&provisioningExportMuteTimingsFlag.Format,
			"format",
			"",
			"Format",
		)

	provisioningCmd.AddCommand(provisioningExportMuteTimingsCmd)
	provisioningGetAlertRuleExportCmd.Flags().
		StringVar(
			&provisioningGetAlertRuleExportFlag.UID,
			"uid",
			"",
			"Unique identifier (uid)",
		)

	provisioningGetAlertRuleExportCmd.MarkFlagRequired("uid")
	provisioningGetAlertRuleExportCmd.Flags().
		BoolVar(
			&provisioningGetAlertRuleExportFlag.Download,
			"download",
			false,
			"Download",
		)

	provisioningGetAlertRuleExportCmd.Flags().
		StringVar(
			&provisioningGetAlertRuleExportFlag.Format,
			"format",
			"",
			"Format",
		)

	provisioningCmd.AddCommand(provisioningGetAlertRuleExportCmd)
	provisioningGetAlertRuleGroupExportCmd.Flags().
		StringVar(
			&provisioningGetAlertRuleGroupExportFlag.FolderUID,
			"folder-uid",
			"",
			"FolderUID",
		)

	provisioningGetAlertRuleGroupExportCmd.MarkFlagRequired("folder-uid")
	provisioningGetAlertRuleGroupExportCmd.Flags().
		StringVar(
			&provisioningGetAlertRuleGroupExportFlag.Group,
			"group",
			"",
			"Group",
		)

	provisioningGetAlertRuleGroupExportCmd.MarkFlagRequired("group")
	provisioningGetAlertRuleGroupExportCmd.Flags().
		BoolVar(
			&provisioningGetAlertRuleGroupExportFlag.Download,
			"download",
			false,
			"Download",
		)

	provisioningGetAlertRuleGroupExportCmd.Flags().
		StringVar(
			&provisioningGetAlertRuleGroupExportFlag.Format,
			"format",
			"",
			"Format",
		)

	provisioningCmd.AddCommand(provisioningGetAlertRuleGroupExportCmd)
	provisioningGetAlertRuleGroupCmd.Flags().
		StringVar(
			&provisioningGetAlertRuleGroupFlag.FolderUID,
			"folder-uid",
			"",
			"FolderUID",
		)

	provisioningGetAlertRuleGroupCmd.MarkFlagRequired("folder-uid")
	provisioningGetAlertRuleGroupCmd.Flags().
		StringVar(
			&provisioningGetAlertRuleGroupFlag.Group,
			"group",
			"",
			"Group",
		)

	provisioningGetAlertRuleGroupCmd.MarkFlagRequired("group")
	provisioningCmd.AddCommand(provisioningGetAlertRuleGroupCmd)
	provisioningGetAlertRuleCmd.Flags().
		StringVar(
			&provisioningGetAlertRuleFlag.UID,
			"uid",
			"",
			"Unique identifier (uid)",
		)

	provisioningGetAlertRuleCmd.MarkFlagRequired("uid")
	provisioningCmd.AddCommand(provisioningGetAlertRuleCmd)
	provisioningGetAlertRulesExportCmd.Flags().
		BoolVar(
			&provisioningGetAlertRulesExportFlag.Download,
			"download",
			false,
			"Download",
		)

	provisioningGetAlertRulesExportCmd.Flags().
		StringSliceVar(
			&provisioningGetAlertRulesExportFlag.FolderUID,
			"folder-uid",
			[]string{},
			"FolderUID",
		)

	provisioningGetAlertRulesExportCmd.Flags().
		StringVar(
			&provisioningGetAlertRulesExportFlag.Format,
			"format",
			"",
			"Format",
		)

	provisioningGetAlertRulesExportCmd.Flags().
		StringVar(
			&provisioningGetAlertRulesExportFlag.Group,
			"group",
			"",
			"Group",
		)

	provisioningGetAlertRulesExportCmd.Flags().
		StringVar(
			&provisioningGetAlertRulesExportFlag.RuleUID,
			"rule-uid",
			"",
			"RuleUID",
		)

	provisioningCmd.AddCommand(provisioningGetAlertRulesExportCmd)
	provisioningCmd.AddCommand(provisioningGetAlertRulesCmd)
	provisioningGetContactpointsCmd.Flags().
		StringVar(
			&provisioningGetContactpointsFlag.Name,
			"name",
			"",
			"Name of the provisioning",
		)

	provisioningCmd.AddCommand(provisioningGetContactpointsCmd)
	provisioningGetContactpointsExportCmd.Flags().
		BoolVar(
			&provisioningGetContactpointsExportFlag.Decrypt,
			"decrypt",
			false,
			"Decrypt",
		)

	provisioningGetContactpointsExportCmd.Flags().
		BoolVar(
			&provisioningGetContactpointsExportFlag.Download,
			"download",
			false,
			"Download",
		)

	provisioningGetContactpointsExportCmd.Flags().
		StringVar(
			&provisioningGetContactpointsExportFlag.Format,
			"format",
			"",
			"Format",
		)

	provisioningGetContactpointsExportCmd.Flags().
		StringVar(
			&provisioningGetContactpointsExportFlag.Name,
			"name",
			"",
			"Name of the provisioning",
		)

	provisioningCmd.AddCommand(provisioningGetContactpointsExportCmd)
	provisioningGetMuteTimingCmd.Flags().
		StringVar(
			&provisioningGetMuteTimingFlag.Name,
			"name",
			"",
			"Name of the provisioning",
		)

	provisioningGetMuteTimingCmd.MarkFlagRequired("name")
	provisioningCmd.AddCommand(provisioningGetMuteTimingCmd)
	provisioningCmd.AddCommand(provisioningGetMuteTimingsCmd)
	provisioningCmd.AddCommand(provisioningGetPolicyTreeExportCmd)
	provisioningCmd.AddCommand(provisioningGetPolicyTreeCmd)
	provisioningGetTemplateCmd.Flags().
		StringVar(
			&provisioningGetTemplateFlag.Name,
			"name",
			"",
			"Name of the provisioning",
		)

	provisioningGetTemplateCmd.MarkFlagRequired("name")
	provisioningCmd.AddCommand(provisioningGetTemplateCmd)
	provisioningCmd.AddCommand(provisioningGetTemplatesCmd)
	provisioningPostAlertRuleCmd.Flags().
		StringVar(
			&provisioningPostAlertRuleFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	provisioningPostAlertRuleCmd.MarkFlagRequired("body")
	provisioningPostAlertRuleCmd.Flags().
		StringVar(
			&provisioningPostAlertRuleFlag.XDisableProvenance,
			"x-disable-provenance",
			"",
			"XDisableProvenance",
		)

	provisioningCmd.AddCommand(provisioningPostAlertRuleCmd)
	provisioningPostContactpointsCmd.Flags().
		StringVar(
			&provisioningPostContactpointsFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	provisioningPostContactpointsCmd.MarkFlagRequired("body")
	provisioningPostContactpointsCmd.Flags().
		StringVar(
			&provisioningPostContactpointsFlag.XDisableProvenance,
			"x-disable-provenance",
			"",
			"XDisableProvenance",
		)

	provisioningCmd.AddCommand(provisioningPostContactpointsCmd)
	provisioningPostMuteTimingCmd.Flags().
		StringVar(
			&provisioningPostMuteTimingFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	provisioningPostMuteTimingCmd.MarkFlagRequired("body")
	provisioningPostMuteTimingCmd.Flags().
		StringVar(
			&provisioningPostMuteTimingFlag.XDisableProvenance,
			"x-disable-provenance",
			"",
			"XDisableProvenance",
		)

	provisioningCmd.AddCommand(provisioningPostMuteTimingCmd)
	provisioningPutAlertRuleCmd.Flags().
		StringVar(
			&provisioningPutAlertRuleFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	provisioningPutAlertRuleCmd.MarkFlagRequired("body")
	provisioningPutAlertRuleCmd.Flags().
		StringVar(
			&provisioningPutAlertRuleFlag.UID,
			"uid",
			"",
			"Unique identifier (uid)",
		)

	provisioningPutAlertRuleCmd.MarkFlagRequired("uid")
	provisioningPutAlertRuleCmd.Flags().
		StringVar(
			&provisioningPutAlertRuleFlag.XDisableProvenance,
			"x-disable-provenance",
			"",
			"XDisableProvenance",
		)

	provisioningCmd.AddCommand(provisioningPutAlertRuleCmd)
	provisioningPutAlertRuleGroupCmd.Flags().
		StringVar(
			&provisioningPutAlertRuleGroupFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	provisioningPutAlertRuleGroupCmd.MarkFlagRequired("body")
	provisioningPutAlertRuleGroupCmd.Flags().
		StringVar(
			&provisioningPutAlertRuleGroupFlag.FolderUID,
			"folder-uid",
			"",
			"FolderUID",
		)

	provisioningPutAlertRuleGroupCmd.MarkFlagRequired("folder-uid")
	provisioningPutAlertRuleGroupCmd.Flags().
		StringVar(
			&provisioningPutAlertRuleGroupFlag.Group,
			"group",
			"",
			"Group",
		)

	provisioningPutAlertRuleGroupCmd.MarkFlagRequired("group")
	provisioningPutAlertRuleGroupCmd.Flags().
		StringVar(
			&provisioningPutAlertRuleGroupFlag.XDisableProvenance,
			"x-disable-provenance",
			"",
			"XDisableProvenance",
		)

	provisioningCmd.AddCommand(provisioningPutAlertRuleGroupCmd)
	provisioningPutContactpointCmd.Flags().
		StringVar(
			&provisioningPutContactpointFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	provisioningPutContactpointCmd.MarkFlagRequired("body")
	provisioningPutContactpointCmd.Flags().
		StringVar(
			&provisioningPutContactpointFlag.UID,
			"uid",
			"",
			"Unique identifier (uid)",
		)

	provisioningPutContactpointCmd.MarkFlagRequired("uid")
	provisioningPutContactpointCmd.Flags().
		StringVar(
			&provisioningPutContactpointFlag.XDisableProvenance,
			"x-disable-provenance",
			"",
			"XDisableProvenance",
		)

	provisioningCmd.AddCommand(provisioningPutContactpointCmd)
	provisioningPutMuteTimingCmd.Flags().
		StringVar(
			&provisioningPutMuteTimingFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	provisioningPutMuteTimingCmd.MarkFlagRequired("body")
	provisioningPutMuteTimingCmd.Flags().
		StringVar(
			&provisioningPutMuteTimingFlag.XDisableProvenance,
			"x-disable-provenance",
			"",
			"XDisableProvenance",
		)

	provisioningPutMuteTimingCmd.Flags().
		StringVar(
			&provisioningPutMuteTimingFlag.Name,
			"name",
			"",
			"Name of the provisioning",
		)

	provisioningPutMuteTimingCmd.MarkFlagRequired("name")
	provisioningCmd.AddCommand(provisioningPutMuteTimingCmd)
	provisioningPutPolicyTreeCmd.Flags().
		StringVar(
			&provisioningPutPolicyTreeFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	provisioningPutPolicyTreeCmd.MarkFlagRequired("body")
	provisioningPutPolicyTreeCmd.Flags().
		StringVar(
			&provisioningPutPolicyTreeFlag.XDisableProvenance,
			"x-disable-provenance",
			"",
			"XDisableProvenance",
		)

	provisioningCmd.AddCommand(provisioningPutPolicyTreeCmd)
	provisioningPutTemplateCmd.Flags().
		StringVar(
			&provisioningPutTemplateFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	provisioningPutTemplateCmd.MarkFlagRequired("body")
	provisioningPutTemplateCmd.Flags().
		StringVar(
			&provisioningPutTemplateFlag.XDisableProvenance,
			"x-disable-provenance",
			"",
			"XDisableProvenance",
		)

	provisioningPutTemplateCmd.Flags().
		StringVar(
			&provisioningPutTemplateFlag.Name,
			"name",
			"",
			"Name of the provisioning",
		)

	provisioningPutTemplateCmd.MarkFlagRequired("name")
	provisioningCmd.AddCommand(provisioningPutTemplateCmd)
	provisioningCmd.AddCommand(provisioningResetPolicyTreeCmd)
	rootCmd.AddCommand(queryHistoryCmd)
	queryHistoryCreateQueryCmd.Flags().
		StringVar(
			&queryHistoryCreateQueryFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	queryHistoryCreateQueryCmd.MarkFlagRequired("body")
	queryHistoryCmd.AddCommand(queryHistoryCreateQueryCmd)
	queryHistoryDeleteQueryCmd.Flags().
		StringVar(
			&queryHistoryDeleteQueryFlag.QueryHistoryUID,
			"query-history-uid",
			"",
			"QueryHistoryUID",
		)

	queryHistoryDeleteQueryCmd.MarkFlagRequired("query-history-uid")
	queryHistoryCmd.AddCommand(queryHistoryDeleteQueryCmd)
	queryHistoryPatchQueryCommentCmd.Flags().
		StringVar(
			&queryHistoryPatchQueryCommentFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	queryHistoryPatchQueryCommentCmd.MarkFlagRequired("body")
	queryHistoryPatchQueryCommentCmd.Flags().
		StringVar(
			&queryHistoryPatchQueryCommentFlag.QueryHistoryUID,
			"query-history-uid",
			"",
			"QueryHistoryUID",
		)

	queryHistoryPatchQueryCommentCmd.MarkFlagRequired("query-history-uid")
	queryHistoryCmd.AddCommand(queryHistoryPatchQueryCommentCmd)
	queryHistorySearchQueriesCmd.Flags().
		StringSliceVar(
			&queryHistorySearchQueriesFlag.DatasourceUID,
			"datasource-uid",
			[]string{},
			"DatasourceUID",
		)

	queryHistorySearchQueriesCmd.Flags().
		Int64Var(
			&queryHistorySearchQueriesFlag.From,
			"from",
			0,
			"From",
		)

	queryHistorySearchQueriesCmd.Flags().
		Int64Var(
			&queryHistorySearchQueriesFlag.Limit,
			"limit",
			0,
			"Limit",
		)

	queryHistorySearchQueriesCmd.Flags().
		BoolVar(
			&queryHistorySearchQueriesFlag.OnlyStarred,
			"only-starred",
			false,
			"OnlyStarred",
		)

	queryHistorySearchQueriesCmd.Flags().
		Int64Var(
			&queryHistorySearchQueriesFlag.Page,
			"page",
			0,
			"Page",
		)

	queryHistorySearchQueriesCmd.Flags().
		StringVar(
			&queryHistorySearchQueriesFlag.SearchString,
			"search-string",
			"",
			"SearchString",
		)

	queryHistorySearchQueriesCmd.Flags().
		StringVar(
			&queryHistorySearchQueriesFlag.Sort,
			"sort",
			"",
			"Sort",
		)

	queryHistorySearchQueriesCmd.Flags().
		Int64Var(
			&queryHistorySearchQueriesFlag.To,
			"to",
			0,
			"To",
		)

	queryHistoryCmd.AddCommand(queryHistorySearchQueriesCmd)
	queryHistoryStarQueryCmd.Flags().
		StringVar(
			&queryHistoryStarQueryFlag.QueryHistoryUID,
			"query-history-uid",
			"",
			"QueryHistoryUID",
		)

	queryHistoryStarQueryCmd.MarkFlagRequired("query-history-uid")
	queryHistoryCmd.AddCommand(queryHistoryStarQueryCmd)
	queryHistoryUnstarQueryCmd.Flags().
		StringVar(
			&queryHistoryUnstarQueryFlag.QueryHistoryUID,
			"query-history-uid",
			"",
			"QueryHistoryUID",
		)

	queryHistoryUnstarQueryCmd.MarkFlagRequired("query-history-uid")
	queryHistoryCmd.AddCommand(queryHistoryUnstarQueryCmd)
	rootCmd.AddCommand(recordingRulesCmd)
	recordingRulesCreateRecordingRuleCmd.Flags().
		StringVar(
			&recordingRulesCreateRecordingRuleFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	recordingRulesCreateRecordingRuleCmd.MarkFlagRequired("body")
	recordingRulesCmd.AddCommand(recordingRulesCreateRecordingRuleCmd)
	recordingRulesCreateRecordingRuleWriteTargetCmd.Flags().
		StringVar(
			&recordingRulesCreateRecordingRuleWriteTargetFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	recordingRulesCreateRecordingRuleWriteTargetCmd.MarkFlagRequired("body")
	recordingRulesCmd.AddCommand(recordingRulesCreateRecordingRuleWriteTargetCmd)
	recordingRulesDeleteRecordingRuleCmd.Flags().
		Int64Var(
			&recordingRulesDeleteRecordingRuleFlag.RecordingRuleID,
			"recording-rule-id",
			0,
			"RecordingRuleID",
		)

	recordingRulesDeleteRecordingRuleCmd.MarkFlagRequired("recording-rule-id")
	recordingRulesCmd.AddCommand(recordingRulesDeleteRecordingRuleCmd)
	recordingRulesCmd.AddCommand(recordingRulesDeleteRecordingRuleWriteTargetCmd)
	recordingRulesCmd.AddCommand(recordingRulesGetRecordingRuleWriteTargetCmd)
	recordingRulesCmd.AddCommand(recordingRulesListRecordingRulesCmd)
	recordingRulesTestCreateRecordingRuleCmd.Flags().
		StringVar(
			&recordingRulesTestCreateRecordingRuleFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	recordingRulesTestCreateRecordingRuleCmd.MarkFlagRequired("body")
	recordingRulesCmd.AddCommand(recordingRulesTestCreateRecordingRuleCmd)
	recordingRulesUpdateRecordingRuleCmd.Flags().
		StringVar(
			&recordingRulesUpdateRecordingRuleFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	recordingRulesUpdateRecordingRuleCmd.MarkFlagRequired("body")
	recordingRulesCmd.AddCommand(recordingRulesUpdateRecordingRuleCmd)
	rootCmd.AddCommand(reportsCmd)
	reportsCreateReportCmd.Flags().
		StringVar(
			&reportsCreateReportFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	reportsCreateReportCmd.MarkFlagRequired("body")
	reportsCmd.AddCommand(reportsCreateReportCmd)
	reportsDeleteReportCmd.Flags().
		Int64Var(
			&reportsDeleteReportFlag.ID,
			"id",
			0,
			"ID",
		)

	reportsDeleteReportCmd.MarkFlagRequired("id")
	reportsCmd.AddCommand(reportsDeleteReportCmd)
	reportsCmd.AddCommand(reportsGetReportSettingsCmd)
	reportsGetReportCmd.Flags().
		Int64Var(
			&reportsGetReportFlag.ID,
			"id",
			0,
			"ID",
		)

	reportsGetReportCmd.MarkFlagRequired("id")
	reportsCmd.AddCommand(reportsGetReportCmd)
	reportsCmd.AddCommand(reportsGetReportsCmd)
	reportsCmd.AddCommand(reportsGetSettingsImageCmd)
	reportsRenderReportCSVsCmd.Flags().
		StringVar(
			&reportsRenderReportCSVsFlag.Dashboards,
			"dashboards",
			"",
			"Dashboards",
		)

	reportsRenderReportCSVsCmd.Flags().
		StringVar(
			&reportsRenderReportCSVsFlag.Title,
			"title",
			"",
			"Title",
		)

	reportsCmd.AddCommand(reportsRenderReportCSVsCmd)
	reportsRenderReportPDFsCmd.Flags().
		StringVar(
			&reportsRenderReportPDFsFlag.Dashboards,
			"dashboards",
			"",
			"Dashboards",
		)

	reportsRenderReportPDFsCmd.Flags().
		StringVar(
			&reportsRenderReportPDFsFlag.IncludeTables,
			"include-tables",
			"",
			"IncludeTables",
		)

	reportsRenderReportPDFsCmd.Flags().
		StringVar(
			&reportsRenderReportPDFsFlag.Layout,
			"layout",
			"",
			"Layout",
		)

	reportsRenderReportPDFsCmd.Flags().
		StringVar(
			&reportsRenderReportPDFsFlag.Orientation,
			"orientation",
			"",
			"Orientation",
		)

	reportsRenderReportPDFsCmd.Flags().
		StringVar(
			&reportsRenderReportPDFsFlag.ScaleFactor,
			"scale-factor",
			"",
			"ScaleFactor",
		)

	reportsRenderReportPDFsCmd.Flags().
		StringVar(
			&reportsRenderReportPDFsFlag.Title,
			"title",
			"",
			"Title",
		)

	reportsCmd.AddCommand(reportsRenderReportPDFsCmd)
	reportsSaveReportSettingsCmd.Flags().
		StringVar(
			&reportsSaveReportSettingsFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	reportsSaveReportSettingsCmd.MarkFlagRequired("body")
	reportsCmd.AddCommand(reportsSaveReportSettingsCmd)
	reportsSendReportCmd.Flags().
		StringVar(
			&reportsSendReportFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	reportsSendReportCmd.MarkFlagRequired("body")
	reportsCmd.AddCommand(reportsSendReportCmd)
	reportsSendTestEmailCmd.Flags().
		StringVar(
			&reportsSendTestEmailFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	reportsSendTestEmailCmd.MarkFlagRequired("body")
	reportsCmd.AddCommand(reportsSendTestEmailCmd)
	reportsUpdateReportCmd.Flags().
		StringVar(
			&reportsUpdateReportFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	reportsUpdateReportCmd.MarkFlagRequired("body")
	reportsUpdateReportCmd.Flags().
		Int64Var(
			&reportsUpdateReportFlag.ID,
			"id",
			0,
			"ID",
		)

	reportsUpdateReportCmd.MarkFlagRequired("id")
	reportsCmd.AddCommand(reportsUpdateReportCmd)
	rootCmd.AddCommand(samlCmd)
	samlCmd.AddCommand(samlGetMetadataCmd)
	samlCmd.AddCommand(samlGetSAMLLogoutCmd)
	samlCmd.AddCommand(samlGetSLOCmd)
	samlPostACSCmd.Flags().
		StringVar(
			&samlPostACSFlag.RelayState,
			"relay-state",
			"",
			"RelayState",
		)

	samlCmd.AddCommand(samlPostACSCmd)
	samlPostSLOCmd.Flags().
		StringVar(
			&samlPostSLOFlag.SAMLRequest,
			"saml-request",
			"",
			"SAMLRequest",
		)

	samlPostSLOCmd.Flags().
		StringVar(
			&samlPostSLOFlag.SAMLResponse,
			"saml-response",
			"",
			"SAMLResponse",
		)

	samlCmd.AddCommand(samlPostSLOCmd)
	rootCmd.AddCommand(searchCmd)
	searchCmd.AddCommand(searchListSortOptionsCmd)
	searchSearchCmd.Flags().
		Int64SliceVar(
			&searchSearchFlag.DashboardIds,
			"dashboard-ids",
			[]int64{},
			"DashboardIds",
		)

	searchSearchCmd.Flags().
		StringSliceVar(
			&searchSearchFlag.DashboardUIDs,
			"dashboard-uids",
			[]string{},
			"DashboardUIDs",
		)

	searchSearchCmd.Flags().
		BoolVar(
			&searchSearchFlag.Deleted,
			"deleted",
			false,
			"Deleted",
		)

	searchSearchCmd.Flags().
		Int64SliceVar(
			&searchSearchFlag.FolderIds,
			"folder-ids",
			[]int64{},
			"FolderIds",
		)

	searchSearchCmd.Flags().
		StringSliceVar(
			&searchSearchFlag.FolderUIDs,
			"folder-uids",
			[]string{},
			"FolderUIDs",
		)

	searchSearchCmd.Flags().
		Int64Var(
			&searchSearchFlag.Limit,
			"limit",
			0,
			"Limit",
		)

	searchSearchCmd.Flags().
		Int64Var(
			&searchSearchFlag.Page,
			"page",
			0,
			"Page",
		)

	searchSearchCmd.Flags().
		StringVar(
			&searchSearchFlag.Permission,
			"permission",
			"",
			"Permission",
		)

	searchSearchCmd.Flags().
		StringVar(
			&searchSearchFlag.Query,
			"query",
			"",
			"Query",
		)

	searchSearchCmd.Flags().
		StringVar(
			&searchSearchFlag.Sort,
			"sort",
			"",
			"Sort",
		)

	searchSearchCmd.Flags().
		BoolVar(
			&searchSearchFlag.Starred,
			"starred",
			false,
			"Starred",
		)

	searchSearchCmd.Flags().
		StringSliceVar(
			&searchSearchFlag.Tag,
			"tag",
			[]string{},
			"Tag",
		)

	searchSearchCmd.Flags().
		StringVar(
			&searchSearchFlag.Type,
			"type",
			"",
			"Type",
		)

	searchCmd.AddCommand(searchSearchCmd)
	rootCmd.AddCommand(serviceAccountsCmd)
	serviceAccountsCreateServiceAccountCmd.Flags().
		StringVar(
			&serviceAccountsCreateServiceAccountFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	serviceAccountsCreateServiceAccountCmd.MarkFlagRequired("body")
	serviceAccountsCmd.AddCommand(serviceAccountsCreateServiceAccountCmd)
	serviceAccountsCreateTokenCmd.Flags().
		StringVar(
			&serviceAccountsCreateTokenFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	serviceAccountsCreateTokenCmd.MarkFlagRequired("body")
	serviceAccountsCreateTokenCmd.Flags().
		Int64Var(
			&serviceAccountsCreateTokenFlag.ServiceAccountID,
			"service-account-id",
			0,
			"ServiceAccountID",
		)

	serviceAccountsCreateTokenCmd.MarkFlagRequired("service-account-id")
	serviceAccountsCmd.AddCommand(serviceAccountsCreateTokenCmd)
	serviceAccountsDeleteServiceAccountCmd.Flags().
		Int64Var(
			&serviceAccountsDeleteServiceAccountFlag.ServiceAccountID,
			"service-account-id",
			0,
			"ServiceAccountID",
		)

	serviceAccountsDeleteServiceAccountCmd.MarkFlagRequired("service-account-id")
	serviceAccountsCmd.AddCommand(serviceAccountsDeleteServiceAccountCmd)
	serviceAccountsDeleteTokenCmd.Flags().
		Int64Var(
			&serviceAccountsDeleteTokenFlag.ServiceAccountID,
			"service-account-id",
			0,
			"ServiceAccountID",
		)

	serviceAccountsDeleteTokenCmd.MarkFlagRequired("service-account-id")
	serviceAccountsDeleteTokenCmd.Flags().
		Int64Var(
			&serviceAccountsDeleteTokenFlag.TokenID,
			"token-id",
			0,
			"TokenID",
		)

	serviceAccountsDeleteTokenCmd.MarkFlagRequired("token-id")
	serviceAccountsCmd.AddCommand(serviceAccountsDeleteTokenCmd)
	serviceAccountsListTokensCmd.Flags().
		Int64Var(
			&serviceAccountsListTokensFlag.ServiceAccountID,
			"service-account-id",
			0,
			"ServiceAccountID",
		)

	serviceAccountsListTokensCmd.MarkFlagRequired("service-account-id")
	serviceAccountsCmd.AddCommand(serviceAccountsListTokensCmd)
	serviceAccountsRetrieveServiceAccountCmd.Flags().
		Int64Var(
			&serviceAccountsRetrieveServiceAccountFlag.ServiceAccountID,
			"service-account-id",
			0,
			"ServiceAccountID",
		)

	serviceAccountsRetrieveServiceAccountCmd.MarkFlagRequired("service-account-id")
	serviceAccountsCmd.AddCommand(serviceAccountsRetrieveServiceAccountCmd)
	serviceAccountsSearchOrgServiceAccountsWithPagingCmd.Flags().
		BoolVar(
			&serviceAccountsSearchOrgServiceAccountsWithPagingFlag.Disabled,
			"disabled",
			false,
			"Disabled",
		)

	serviceAccountsSearchOrgServiceAccountsWithPagingCmd.Flags().
		BoolVar(
			&serviceAccountsSearchOrgServiceAccountsWithPagingFlag.ExpiredTokens,
			"expired-tokens",
			false,
			"ExpiredTokens",
		)

	serviceAccountsSearchOrgServiceAccountsWithPagingCmd.Flags().
		Int64Var(
			&serviceAccountsSearchOrgServiceAccountsWithPagingFlag.Page,
			"page",
			0,
			"Page",
		)

	serviceAccountsSearchOrgServiceAccountsWithPagingCmd.Flags().
		Int64Var(
			&serviceAccountsSearchOrgServiceAccountsWithPagingFlag.Perpage,
			"perpage",
			1000,
			"Perpage",
		)

	serviceAccountsSearchOrgServiceAccountsWithPagingCmd.Flags().
		StringVar(
			&serviceAccountsSearchOrgServiceAccountsWithPagingFlag.Query,
			"query",
			"",
			"Query",
		)

	serviceAccountsCmd.AddCommand(serviceAccountsSearchOrgServiceAccountsWithPagingCmd)
	serviceAccountsUpdateServiceAccountCmd.Flags().
		StringVar(
			&serviceAccountsUpdateServiceAccountFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	serviceAccountsUpdateServiceAccountCmd.MarkFlagRequired("body")
	serviceAccountsUpdateServiceAccountCmd.Flags().
		Int64Var(
			&serviceAccountsUpdateServiceAccountFlag.ServiceAccountID,
			"service-account-id",
			0,
			"ServiceAccountID",
		)

	serviceAccountsUpdateServiceAccountCmd.MarkFlagRequired("service-account-id")
	serviceAccountsCmd.AddCommand(serviceAccountsUpdateServiceAccountCmd)
	rootCmd.AddCommand(signedInUserCmd)
	signedInUserChangeUserPasswordCmd.Flags().
		StringVar(
			&signedInUserChangeUserPasswordFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	signedInUserChangeUserPasswordCmd.MarkFlagRequired("body")
	signedInUserCmd.AddCommand(signedInUserChangeUserPasswordCmd)
	signedInUserCmd.AddCommand(signedInUserClearHelpFlagsCmd)
	signedInUserCmd.AddCommand(signedInUserGetSignedInUserOrgListCmd)
	signedInUserCmd.AddCommand(signedInUserGetSignedInUserTeamListCmd)
	signedInUserCmd.AddCommand(signedInUserGetSignedInUserCmd)
	signedInUserCmd.AddCommand(signedInUserGetUserAuthTokensCmd)
	signedInUserCmd.AddCommand(signedInUserGetUserQuotasCmd)
	signedInUserRevokeUserAuthTokenCmd.Flags().
		StringVar(
			&signedInUserRevokeUserAuthTokenFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	signedInUserRevokeUserAuthTokenCmd.MarkFlagRequired("body")
	signedInUserCmd.AddCommand(signedInUserRevokeUserAuthTokenCmd)
	signedInUserSetHelpFlagCmd.Flags().
		StringVar(
			&signedInUserSetHelpFlagFlag.FlagID,
			"flag-id",
			"",
			"FlagID",
		)

	signedInUserSetHelpFlagCmd.MarkFlagRequired("flag-id")
	signedInUserCmd.AddCommand(signedInUserSetHelpFlagCmd)
	signedInUserStarDashboardByUIDCmd.Flags().
		StringVar(
			&signedInUserStarDashboardByUIDFlag.DashboardUID,
			"dashboard-uid",
			"",
			"DashboardUID",
		)

	signedInUserStarDashboardByUIDCmd.MarkFlagRequired("dashboard-uid")
	signedInUserCmd.AddCommand(signedInUserStarDashboardByUIDCmd)
	signedInUserStarDashboardCmd.Flags().
		StringVar(
			&signedInUserStarDashboardFlag.DashboardID,
			"dashboard-id",
			"",
			"DashboardID",
		)

	signedInUserStarDashboardCmd.MarkFlagRequired("dashboard-id")
	signedInUserCmd.AddCommand(signedInUserStarDashboardCmd)
	signedInUserUnstarDashboardByUIDCmd.Flags().
		StringVar(
			&signedInUserUnstarDashboardByUIDFlag.DashboardUID,
			"dashboard-uid",
			"",
			"DashboardUID",
		)

	signedInUserUnstarDashboardByUIDCmd.MarkFlagRequired("dashboard-uid")
	signedInUserCmd.AddCommand(signedInUserUnstarDashboardByUIDCmd)
	signedInUserUnstarDashboardCmd.Flags().
		StringVar(
			&signedInUserUnstarDashboardFlag.DashboardID,
			"dashboard-id",
			"",
			"DashboardID",
		)

	signedInUserUnstarDashboardCmd.MarkFlagRequired("dashboard-id")
	signedInUserCmd.AddCommand(signedInUserUnstarDashboardCmd)
	signedInUserUpdateSignedInUserCmd.Flags().
		StringVar(
			&signedInUserUpdateSignedInUserFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	signedInUserUpdateSignedInUserCmd.MarkFlagRequired("body")
	signedInUserCmd.AddCommand(signedInUserUpdateSignedInUserCmd)
	signedInUserUserSetUsingOrgCmd.Flags().
		Int64Var(
			&signedInUserUserSetUsingOrgFlag.OrgID,
			"org-id",
			0,
			"OrgID",
		)

	signedInUserUserSetUsingOrgCmd.MarkFlagRequired("org-id")
	signedInUserCmd.AddCommand(signedInUserUserSetUsingOrgCmd)
	rootCmd.AddCommand(signingKeysCmd)
	signingKeysCmd.AddCommand(signingKeysRetrieveJWKSCmd)
	rootCmd.AddCommand(snapshotsCmd)
	snapshotsCreateDashboardSnapshotCmd.Flags().
		StringVar(
			&snapshotsCreateDashboardSnapshotFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	snapshotsCreateDashboardSnapshotCmd.MarkFlagRequired("body")
	snapshotsCmd.AddCommand(snapshotsCreateDashboardSnapshotCmd)
	snapshotsDeleteDashboardSnapshotByDeleteKeyCmd.Flags().
		StringVar(
			&snapshotsDeleteDashboardSnapshotByDeleteKeyFlag.DeleteKey,
			"delete-key",
			"",
			"DeleteKey",
		)

	snapshotsDeleteDashboardSnapshotByDeleteKeyCmd.MarkFlagRequired("delete-key")
	snapshotsCmd.AddCommand(snapshotsDeleteDashboardSnapshotByDeleteKeyCmd)
	snapshotsDeleteDashboardSnapshotCmd.Flags().
		StringVar(
			&snapshotsDeleteDashboardSnapshotFlag.Key,
			"key",
			"",
			"Key",
		)

	snapshotsDeleteDashboardSnapshotCmd.MarkFlagRequired("key")
	snapshotsCmd.AddCommand(snapshotsDeleteDashboardSnapshotCmd)
	snapshotsGetDashboardSnapshotCmd.Flags().
		StringVar(
			&snapshotsGetDashboardSnapshotFlag.Key,
			"key",
			"",
			"Key",
		)

	snapshotsGetDashboardSnapshotCmd.MarkFlagRequired("key")
	snapshotsCmd.AddCommand(snapshotsGetDashboardSnapshotCmd)
	snapshotsCmd.AddCommand(snapshotsGetSharingOptionsCmd)
	snapshotsSearchDashboardSnapshotsCmd.Flags().
		Int64Var(
			&snapshotsSearchDashboardSnapshotsFlag.Limit,
			"limit",
			0,
			"Limit",
		)

	snapshotsSearchDashboardSnapshotsCmd.Flags().
		StringVar(
			&snapshotsSearchDashboardSnapshotsFlag.Query,
			"query",
			"",
			"Query",
		)

	snapshotsCmd.AddCommand(snapshotsSearchDashboardSnapshotsCmd)
	rootCmd.AddCommand(ssoSettingsCmd)
	ssoSettingsGetProviderSettingsCmd.Flags().
		StringVar(
			&ssoSettingsGetProviderSettingsFlag.Key,
			"key",
			"",
			"Key",
		)

	ssoSettingsGetProviderSettingsCmd.MarkFlagRequired("key")
	ssoSettingsCmd.AddCommand(ssoSettingsGetProviderSettingsCmd)
	ssoSettingsCmd.AddCommand(ssoSettingsListAllProvidersSettingsCmd)
	ssoSettingsRemoveProviderSettingsCmd.Flags().
		StringVar(
			&ssoSettingsRemoveProviderSettingsFlag.Key,
			"key",
			"",
			"Key",
		)

	ssoSettingsRemoveProviderSettingsCmd.MarkFlagRequired("key")
	ssoSettingsCmd.AddCommand(ssoSettingsRemoveProviderSettingsCmd)
	ssoSettingsUpdateProviderSettingsCmd.Flags().
		StringVar(
			&ssoSettingsUpdateProviderSettingsFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	ssoSettingsUpdateProviderSettingsCmd.MarkFlagRequired("body")
	ssoSettingsUpdateProviderSettingsCmd.Flags().
		StringVar(
			&ssoSettingsUpdateProviderSettingsFlag.Key,
			"key",
			"",
			"Key",
		)

	ssoSettingsUpdateProviderSettingsCmd.MarkFlagRequired("key")
	ssoSettingsCmd.AddCommand(ssoSettingsUpdateProviderSettingsCmd)
	rootCmd.AddCommand(syncTeamGroupsCmd)
	syncTeamGroupsAddTeamGroupAPICmd.Flags().
		StringVar(
			&syncTeamGroupsAddTeamGroupAPIFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	syncTeamGroupsAddTeamGroupAPICmd.MarkFlagRequired("body")
	syncTeamGroupsAddTeamGroupAPICmd.Flags().
		Int64Var(
			&syncTeamGroupsAddTeamGroupAPIFlag.TeamID,
			"team-id",
			0,
			"TeamID",
		)

	syncTeamGroupsAddTeamGroupAPICmd.MarkFlagRequired("team-id")
	syncTeamGroupsCmd.AddCommand(syncTeamGroupsAddTeamGroupAPICmd)
	syncTeamGroupsGetTeamGroupsAPICmd.Flags().
		Int64Var(
			&syncTeamGroupsGetTeamGroupsAPIFlag.TeamID,
			"team-id",
			0,
			"TeamID",
		)

	syncTeamGroupsGetTeamGroupsAPICmd.MarkFlagRequired("team-id")
	syncTeamGroupsCmd.AddCommand(syncTeamGroupsGetTeamGroupsAPICmd)
	syncTeamGroupsRemoveTeamGroupAPIQueryCmd.Flags().
		StringVar(
			&syncTeamGroupsRemoveTeamGroupAPIQueryFlag.GroupID,
			"group-id",
			"",
			"GroupID",
		)

	syncTeamGroupsRemoveTeamGroupAPIQueryCmd.Flags().
		Int64Var(
			&syncTeamGroupsRemoveTeamGroupAPIQueryFlag.TeamID,
			"team-id",
			0,
			"TeamID",
		)

	syncTeamGroupsRemoveTeamGroupAPIQueryCmd.MarkFlagRequired("team-id")
	syncTeamGroupsCmd.AddCommand(syncTeamGroupsRemoveTeamGroupAPIQueryCmd)
	rootCmd.AddCommand(teamsCmd)
	teamsAddTeamMemberCmd.Flags().
		StringVar(
			&teamsAddTeamMemberFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	teamsAddTeamMemberCmd.MarkFlagRequired("body")
	teamsAddTeamMemberCmd.Flags().
		StringVar(
			&teamsAddTeamMemberFlag.TeamID,
			"team-id",
			"",
			"TeamID",
		)

	teamsAddTeamMemberCmd.MarkFlagRequired("team-id")
	teamsCmd.AddCommand(teamsAddTeamMemberCmd)
	teamsCreateTeamCmd.Flags().
		StringVar(
			&teamsCreateTeamFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	teamsCreateTeamCmd.MarkFlagRequired("body")
	teamsCmd.AddCommand(teamsCreateTeamCmd)
	teamsGetTeamMembersCmd.Flags().
		StringVar(
			&teamsGetTeamMembersFlag.TeamID,
			"team-id",
			"",
			"TeamID",
		)

	teamsGetTeamMembersCmd.MarkFlagRequired("team-id")
	teamsCmd.AddCommand(teamsGetTeamMembersCmd)
	teamsGetTeamPreferencesCmd.Flags().
		StringVar(
			&teamsGetTeamPreferencesFlag.TeamID,
			"team-id",
			"",
			"TeamID",
		)

	teamsGetTeamPreferencesCmd.MarkFlagRequired("team-id")
	teamsCmd.AddCommand(teamsGetTeamPreferencesCmd)
	teamsRemoveTeamMemberCmd.Flags().
		StringVar(
			&teamsRemoveTeamMemberFlag.TeamID,
			"team-id",
			"",
			"TeamID",
		)

	teamsRemoveTeamMemberCmd.MarkFlagRequired("team-id")
	teamsRemoveTeamMemberCmd.Flags().
		Int64Var(
			&teamsRemoveTeamMemberFlag.UserID,
			"user-id",
			0,
			"UserID",
		)

	teamsRemoveTeamMemberCmd.MarkFlagRequired("user-id")
	teamsCmd.AddCommand(teamsRemoveTeamMemberCmd)
	teamsSearchTeamsCmd.Flags().
		StringVar(
			&teamsSearchTeamsFlag.Name,
			"name",
			"",
			"Name of the team",
		)

	teamsSearchTeamsCmd.Flags().
		Int64Var(
			&teamsSearchTeamsFlag.Page,
			"page",
			0,
			"Page",
		)

	teamsSearchTeamsCmd.Flags().
		Int64Var(
			&teamsSearchTeamsFlag.Perpage,
			"perpage",
			1000,
			"Perpage",
		)

	teamsSearchTeamsCmd.Flags().
		StringVar(
			&teamsSearchTeamsFlag.Query,
			"query",
			"",
			"Query",
		)

	teamsCmd.AddCommand(teamsSearchTeamsCmd)
	teamsSetTeamMembershipsCmd.Flags().
		StringVar(
			&teamsSetTeamMembershipsFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	teamsSetTeamMembershipsCmd.MarkFlagRequired("body")
	teamsSetTeamMembershipsCmd.Flags().
		StringVar(
			&teamsSetTeamMembershipsFlag.TeamID,
			"team-id",
			"",
			"TeamID",
		)

	teamsSetTeamMembershipsCmd.MarkFlagRequired("team-id")
	teamsCmd.AddCommand(teamsSetTeamMembershipsCmd)
	teamsUpdateTeamMemberCmd.Flags().
		StringVar(
			&teamsUpdateTeamMemberFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	teamsUpdateTeamMemberCmd.MarkFlagRequired("body")
	teamsUpdateTeamMemberCmd.Flags().
		StringVar(
			&teamsUpdateTeamMemberFlag.TeamID,
			"team-id",
			"",
			"TeamID",
		)

	teamsUpdateTeamMemberCmd.MarkFlagRequired("team-id")
	teamsUpdateTeamMemberCmd.Flags().
		Int64Var(
			&teamsUpdateTeamMemberFlag.UserID,
			"user-id",
			0,
			"UserID",
		)

	teamsUpdateTeamMemberCmd.MarkFlagRequired("user-id")
	teamsCmd.AddCommand(teamsUpdateTeamMemberCmd)
	teamsUpdateTeamPreferencesCmd.Flags().
		StringVar(
			&teamsUpdateTeamPreferencesFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	teamsUpdateTeamPreferencesCmd.MarkFlagRequired("body")
	teamsUpdateTeamPreferencesCmd.Flags().
		StringVar(
			&teamsUpdateTeamPreferencesFlag.TeamID,
			"team-id",
			"",
			"TeamID",
		)

	teamsUpdateTeamPreferencesCmd.MarkFlagRequired("team-id")
	teamsCmd.AddCommand(teamsUpdateTeamPreferencesCmd)
	teamsUpdateTeamCmd.Flags().
		StringVar(
			&teamsUpdateTeamFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	teamsUpdateTeamCmd.MarkFlagRequired("body")
	teamsUpdateTeamCmd.Flags().
		StringVar(
			&teamsUpdateTeamFlag.TeamID,
			"team-id",
			"",
			"TeamID",
		)

	teamsUpdateTeamCmd.MarkFlagRequired("team-id")
	teamsCmd.AddCommand(teamsUpdateTeamCmd)
	rootCmd.AddCommand(userCmd)
	userCmd.AddCommand(userUpdateUserEmailCmd)
	rootCmd.AddCommand(userPreferencesCmd)
	userPreferencesCmd.AddCommand(userPreferencesGetUserPreferencesCmd)
	userPreferencesPatchUserPreferencesCmd.Flags().
		StringVar(
			&userPreferencesPatchUserPreferencesFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	userPreferencesPatchUserPreferencesCmd.MarkFlagRequired("body")
	userPreferencesCmd.AddCommand(userPreferencesPatchUserPreferencesCmd)
	userPreferencesUpdateUserPreferencesCmd.Flags().
		StringVar(
			&userPreferencesUpdateUserPreferencesFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	userPreferencesUpdateUserPreferencesCmd.MarkFlagRequired("body")
	userPreferencesCmd.AddCommand(userPreferencesUpdateUserPreferencesCmd)
	rootCmd.AddCommand(usersCmd)
	usersGetUserByLoginOrEmailCmd.Flags().
		StringVar(
			&usersGetUserByLoginOrEmailFlag.LoginOrEmail,
			"login-or-email",
			"",
			"LoginOrEmail",
		)

	usersGetUserByLoginOrEmailCmd.MarkFlagRequired("login-or-email")
	usersCmd.AddCommand(usersGetUserByLoginOrEmailCmd)
	usersGetUserOrgListCmd.Flags().
		Int64Var(
			&usersGetUserOrgListFlag.UserID,
			"user-id",
			0,
			"UserID",
		)

	usersGetUserOrgListCmd.MarkFlagRequired("user-id")
	usersCmd.AddCommand(usersGetUserOrgListCmd)
	usersGetUserTeamsCmd.Flags().
		Int64Var(
			&usersGetUserTeamsFlag.UserID,
			"user-id",
			0,
			"UserID",
		)

	usersGetUserTeamsCmd.MarkFlagRequired("user-id")
	usersCmd.AddCommand(usersGetUserTeamsCmd)
	usersSearchUsersCmd.Flags().
		Int64Var(
			&usersSearchUsersFlag.Page,
			"page",
			0,
			"Page",
		)

	usersSearchUsersCmd.Flags().
		Int64Var(
			&usersSearchUsersFlag.Perpage,
			"perpage",
			1000,
			"Perpage",
		)

	usersCmd.AddCommand(usersSearchUsersCmd)
	usersCmd.AddCommand(usersSearchUsersWithPagingCmd)
	usersUpdateUserCmd.Flags().
		StringVar(
			&usersUpdateUserFlag.Body,
			"body",
			"",
			"The path to the body json file or json string. For example, --body=/path/to/body.json or --body='{\"foo\": \"bar\"}'",
		)

	usersUpdateUserCmd.MarkFlagRequired("body")
	usersUpdateUserCmd.Flags().
		Int64Var(
			&usersUpdateUserFlag.UserID,
			"user-id",
			0,
			"UserID",
		)

	usersUpdateUserCmd.MarkFlagRequired("user-id")
	usersCmd.AddCommand(usersUpdateUserCmd)
}
